(* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
  SPDX-License-Identifier: Apache-2.0*)

(* TODO: update this file to use program loaded with elf_loader *)

open Air;;
open Arm;;

let sha512_block_data_order = [
  (* 0000000000125680 <sha512_block_data_order>: *)
  (* 125680:	*) 0x900007b0; (*       adrp	x16, 219000 <EVP_PKEY_rsa_pkey_meth_storage+0x80>   *)
  (* 125684:	*) 0xb94d6e10; (*       ldr	w16, [x16, #3436]                                   *)
  (* 125688:	*) 0x721a021f; (*       tst	w16, #0x40                                          *)
  (* 12568c:	*) 0x540071a1; (*       b.ne	1264c0 <sha512_block_armv8>  // b.any               *)
  (* 125690:	*) 0xa9b87bfd; (*       stp	x29, x30, [sp, #-128]!                              *)
  (* 125694:	*) 0x910003fd; (*       mov	x29, sp                                             *)
  (* 125698:	*) 0xa90153f3; (*       stp	x19, x20, [sp, #16]                                 *)
  (* 12569c:	*) 0xa9025bf5; (*       stp	x21, x22, [sp, #32]                                 *)
  (* 1256a0:	*) 0xa90363f7; (*       stp	x23, x24, [sp, #48]                                 *)
  (* 1256a4:	*) 0xa9046bf9; (*       stp	x25, x26, [sp, #64]                                 *)
  (* 1256a8:	*) 0xa90573fb; (*       stp	x27, x28, [sp, #80]                                 *)
  (* 1256ac:	*) 0xd10083ff; (*       sub	sp, sp, #0x20                                       *)
  (* 1256b0:	*) 0xa9405414; (*       ldp	x20, x21, [x0]                                      *)
  (* 1256b4:	*) 0xa9415c16; (*       ldp	x22, x23, [x0, #16]                                 *)
  (* 1256b8:	*) 0xa9426418; (*       ldp	x24, x25, [x0, #32]                                 *)
  (* 1256bc:	*) 0x8b021c22; (*       add	x2, x1, x2, lsl #7                                  *)
  (* 1256c0:	*) 0xa9436c1a; (*       ldp	x26, x27, [x0, #48]                                 *)
  (* 1256c4:	*) 0xf000047e; (*       adrp	x30, 1b4000 <ecp_nistz256_precomputed+0x25000>      *)
  (* 1256c8:	*) 0x910c03de; (*       add	x30, x30, #0x300                                    *)
  (* 1256cc:	*) 0xa9060ba0; (*       stp	x0, x2, [x29, #96]                                  *)

  (* Outer Loop: 126494-1256d0 *)
  (* 1256d0:	*) 0xa8c11023; (*       ldp	x3, x4, [x1], #16                                   *)
  (* 1256d4:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 1256d8:	*) 0xca1602bc; (*       eor	x28, x21, x22                                       *)
  (* 1256dc:	*) 0xf9003ba1; (*       str	x1, [x29, #112]                                     *)
  (* 1256e0:	*) 0xdac00c63; (*       rev	x3, x3                                              *)
  (* 1256e4:	*) 0x93d83b10; (*       ror	x16, x24, #14                                       *)
  (* 1256e8:	*) 0x8b13037b; (*       add	x27, x27, x19                                       *)
  (* 1256ec:	*) 0xcad85f06; (*       eor	x6, x24, x24, ror #23                               *)
  (* 1256f0:	*) 0x8a180331; (*       and	x17, x25, x24                                       *)
  (* 1256f4:	*) 0x8a380353; (*       bic	x19, x26, x24                                       *)
  (* 1256f8:	*) 0x8b03037b; (*       add	x27, x27, x3                                        *)
  (* 1256fc:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125700:	*) 0xca150293; (*       eor	x19, x20, x21                                       *)
  (* 125704:	*) 0xcac64a10; (*       eor	x16, x16, x6, ror #18                               *)
  (* 125708:	*) 0x93d47286; (*       ror	x6, x20, #28                                        *)
  (* 12570c:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 125710:	*) 0xcad41691; (*       eor	x17, x20, x20, ror #5                               *)
  (* 125714:	*) 0x8b10037b; (*       add	x27, x27, x16                                       *)
  (* 125718:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 12571c:	*) 0x8b1b02f7; (*       add	x23, x23, x27                                       *)
  (* 125720:	*) 0xca15039c; (*       eor	x28, x28, x21                                       *)
  (* 125724:	*) 0xcad188d1; (*       eor	x17, x6, x17, ror #34                               *)
  (* 125728:	*) 0x8b1c037b; (*       add	x27, x27, x28                                       *)
  (* 12572c:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125730:	*) 0xdac00c84; (*       rev	x4, x4                                              *)
  (* 125734:	*) 0xa8c11825; (*       ldp	x5, x6, [x1], #16                                   *)
  (* 125738:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 12573c:	*) 0x93d73af0; (*       ror	x16, x23, #14                                       *)
  (* 125740:	*) 0x8b1c035a; (*       add	x26, x26, x28                                       *)
  (* 125744:	*) 0xcad75ee7; (*       eor	x7, x23, x23, ror #23                               *)
  (* 125748:	*) 0x8a170311; (*       and	x17, x24, x23                                       *)
  (* 12574c:	*) 0x8a37033c; (*       bic	x28, x25, x23                                       *)
  (* 125750:	*) 0x8b04035a; (*       add	x26, x26, x4                                        *)
  (* 125754:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125758:	*) 0xca14037c; (*       eor	x28, x27, x20                                       *)
  (* 12575c:	*) 0xcac74a10; (*       eor	x16, x16, x7, ror #18                               *)
  (* 125760:	*) 0x93db7367; (*       ror	x7, x27, #28                                        *)
  (* 125764:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 125768:	*) 0xcadb1771; (*       eor	x17, x27, x27, ror #5                               *)
  (* 12576c:	*) 0x8b10035a; (*       add	x26, x26, x16                                       *)
  (* 125770:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125774:	*) 0x8b1a02d6; (*       add	x22, x22, x26                                       *)
  (* 125778:	*) 0xca140273; (*       eor	x19, x19, x20                                       *)
  (* 12577c:	*) 0xcad188f1; (*       eor	x17, x7, x17, ror #34                               *)
  (* 125780:	*) 0x8b13035a; (*       add	x26, x26, x19                                       *)
  (* 125784:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125788:	*) 0xdac00ca5; (*       rev	x5, x5                                              *)
  (* 12578c:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 125790:	*) 0x93d63ad0; (*       ror	x16, x22, #14                                       *)
  (* 125794:	*) 0x8b130339; (*       add	x25, x25, x19                                       *)
  (* 125798:	*) 0xcad65ec8; (*       eor	x8, x22, x22, ror #23                               *)
  (* 12579c:	*) 0x8a1602f1; (*       and	x17, x23, x22                                       *)
  (* 1257a0:	*) 0x8a360313; (*       bic	x19, x24, x22                                       *)
  (* 1257a4:	*) 0x8b050339; (*       add	x25, x25, x5                                        *)
  (* 1257a8:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 1257ac:	*) 0xca1b0353; (*       eor	x19, x26, x27                                       *)
  (* 1257b0:	*) 0xcac84a10; (*       eor	x16, x16, x8, ror #18                               *)
  (* 1257b4:	*) 0x93da7348; (*       ror	x8, x26, #28                                        *)
  (* 1257b8:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 1257bc:	*) 0xcada1751; (*       eor	x17, x26, x26, ror #5                               *)
  (* 1257c0:	*) 0x8b100339; (*       add	x25, x25, x16                                       *)
  (* 1257c4:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 1257c8:	*) 0x8b1902b5; (*       add	x21, x21, x25                                       *)
  (* 1257cc:	*) 0xca1b039c; (*       eor	x28, x28, x27                                       *)
  (* 1257d0:	*) 0xcad18911; (*       eor	x17, x8, x17, ror #34                               *)
  (* 1257d4:	*) 0x8b1c0339; (*       add	x25, x25, x28                                       *)
  (* 1257d8:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 1257dc:	*) 0xdac00cc6; (*       rev	x6, x6                                              *)
  (* 1257e0:	*) 0xa8c12027; (*       ldp	x7, x8, [x1], #16                                   *)
  (* 1257e4:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 1257e8:	*) 0x93d53ab0; (*       ror	x16, x21, #14                                       *)
  (* 1257ec:	*) 0x8b1c0318; (*       add	x24, x24, x28                                       *)
  (* 1257f0:	*) 0xcad55ea9; (*       eor	x9, x21, x21, ror #23                               *)
  (* 1257f4:	*) 0x8a1502d1; (*       and	x17, x22, x21                                       *)
  (* 1257f8:	*) 0x8a3502fc; (*       bic	x28, x23, x21                                       *)
  (* 1257fc:	*) 0x8b060318; (*       add	x24, x24, x6                                        *)
  (* 125800:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125804:	*) 0xca1a033c; (*       eor	x28, x25, x26                                       *)
  (* 125808:	*) 0xcac94a10; (*       eor	x16, x16, x9, ror #18                               *)
  (* 12580c:	*) 0x93d97329; (*       ror	x9, x25, #28                                        *)
  (* 125810:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 125814:	*) 0xcad91731; (*       eor	x17, x25, x25, ror #5                               *)
  (* 125818:	*) 0x8b100318; (*       add	x24, x24, x16                                       *)
  (* 12581c:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125820:	*) 0x8b180294; (*       add	x20, x20, x24                                       *)
  (* 125824:	*) 0xca1a0273; (*       eor	x19, x19, x26                                       *)
  (* 125828:	*) 0xcad18931; (*       eor	x17, x9, x17, ror #34                               *)
  (* 12582c:	*) 0x8b130318; (*       add	x24, x24, x19                                       *)
  (* 125830:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125834:	*) 0xdac00ce7; (*       rev	x7, x7                                              *)
  (* 125838:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 12583c:	*) 0x93d43a90; (*       ror	x16, x20, #14                                       *)
  (* 125840:	*) 0x8b1302f7; (*       add	x23, x23, x19                                       *)
  (* 125844:	*) 0xcad45e8a; (*       eor	x10, x20, x20, ror #23                              *)
  (* 125848:	*) 0x8a1402b1; (*       and	x17, x21, x20                                       *)
  (* 12584c:	*) 0x8a3402d3; (*       bic	x19, x22, x20                                       *)
  (* 125850:	*) 0x8b0702f7; (*       add	x23, x23, x7                                        *)
  (* 125854:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125858:	*) 0xca190313; (*       eor	x19, x24, x25                                       *)
  (* 12585c:	*) 0xcaca4a10; (*       eor	x16, x16, x10, ror #18                              *)
  (* 125860:	*) 0x93d8730a; (*       ror	x10, x24, #28                                       *)
  (* 125864:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 125868:	*) 0xcad81711; (*       eor	x17, x24, x24, ror #5                               *)
  (* 12586c:	*) 0x8b1002f7; (*       add	x23, x23, x16                                       *)
  (* 125870:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125874:	*) 0x8b17037b; (*       add	x27, x27, x23                                       *)
  (* 125878:	*) 0xca19039c; (*       eor	x28, x28, x25                                       *)
  (* 12587c:	*) 0xcad18951; (*       eor	x17, x10, x17, ror #34                              *)
  (* 125880:	*) 0x8b1c02f7; (*       add	x23, x23, x28                                       *)
  (* 125884:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125888:	*) 0xdac00d08; (*       rev	x8, x8                                              *)
  (* 12588c:	*) 0xa8c12829; (*       ldp	x9, x10, [x1], #16                                  *)
  (* 125890:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 125894:	*) 0x93db3b70; (*       ror	x16, x27, #14                                       *)
  (* 125898:	*) 0x8b1c02d6; (*       add	x22, x22, x28                                       *)
  (* 12589c:	*) 0xcadb5f6b; (*       eor	x11, x27, x27, ror #23                              *)
  (* 1258a0:	*) 0x8a1b0291; (*       and	x17, x20, x27                                       *)
  (* 1258a4:	*) 0x8a3b02bc; (*       bic	x28, x21, x27                                       *)
  (* 1258a8:	*) 0x8b0802d6; (*       add	x22, x22, x8                                        *)
  (* 1258ac:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 1258b0:	*) 0xca1802fc; (*       eor	x28, x23, x24                                       *)
  (* 1258b4:	*) 0xcacb4a10; (*       eor	x16, x16, x11, ror #18                              *)
  (* 1258b8:	*) 0x93d772eb; (*       ror	x11, x23, #28                                       *)
  (* 1258bc:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 1258c0:	*) 0xcad716f1; (*       eor	x17, x23, x23, ror #5                               *)
  (* 1258c4:	*) 0x8b1002d6; (*       add	x22, x22, x16                                       *)
  (* 1258c8:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 1258cc:	*) 0x8b16035a; (*       add	x26, x26, x22                                       *)
  (* 1258d0:	*) 0xca180273; (*       eor	x19, x19, x24                                       *)
  (* 1258d4:	*) 0xcad18971; (*       eor	x17, x11, x17, ror #34                              *)
  (* 1258d8:	*) 0x8b1302d6; (*       add	x22, x22, x19                                       *)
  (* 1258dc:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 1258e0:	*) 0xdac00d29; (*       rev	x9, x9                                              *)
  (* 1258e4:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 1258e8:	*) 0x93da3b50; (*       ror	x16, x26, #14                                       *)
  (* 1258ec:	*) 0x8b1302b5; (*       add	x21, x21, x19                                       *)
  (* 1258f0:	*) 0xcada5f4c; (*       eor	x12, x26, x26, ror #23                              *)
  (* 1258f4:	*) 0x8a1a0371; (*       and	x17, x27, x26                                       *)
  (* 1258f8:	*) 0x8a3a0293; (*       bic	x19, x20, x26                                       *)
  (* 1258fc:	*) 0x8b0902b5; (*       add	x21, x21, x9                                        *)
  (* 125900:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125904:	*) 0xca1702d3; (*       eor	x19, x22, x23                                       *)
  (* 125908:	*) 0xcacc4a10; (*       eor	x16, x16, x12, ror #18                              *)
  (* 12590c:	*) 0x93d672cc; (*       ror	x12, x22, #28                                       *)
  (* 125910:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 125914:	*) 0xcad616d1; (*       eor	x17, x22, x22, ror #5                               *)
  (* 125918:	*) 0x8b1002b5; (*       add	x21, x21, x16                                       *)
  (* 12591c:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125920:	*) 0x8b150339; (*       add	x25, x25, x21                                       *)
  (* 125924:	*) 0xca17039c; (*       eor	x28, x28, x23                                       *)
  (* 125928:	*) 0xcad18991; (*       eor	x17, x12, x17, ror #34                              *)
  (* 12592c:	*) 0x8b1c02b5; (*       add	x21, x21, x28                                       *)
  (* 125930:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125934:	*) 0xdac00d4a; (*       rev	x10, x10                                            *)
  (* 125938:	*) 0xa8c1302b; (*       ldp	x11, x12, [x1], #16                                 *)
  (* 12593c:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 125940:	*) 0x93d93b30; (*       ror	x16, x25, #14                                       *)
  (* 125944:	*) 0x8b1c0294; (*       add	x20, x20, x28                                       *)
  (* 125948:	*) 0xcad95f2d; (*       eor	x13, x25, x25, ror #23                              *)
  (* 12594c:	*) 0x8a190351; (*       and	x17, x26, x25                                       *)
  (* 125950:	*) 0x8a39037c; (*       bic	x28, x27, x25                                       *)
  (* 125954:	*) 0x8b0a0294; (*       add	x20, x20, x10                                       *)
  (* 125958:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 12595c:	*) 0xca1602bc; (*       eor	x28, x21, x22                                       *)
  (* 125960:	*) 0xcacd4a10; (*       eor	x16, x16, x13, ror #18                              *)
  (* 125964:	*) 0x93d572ad; (*       ror	x13, x21, #28                                       *)
  (* 125968:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 12596c:	*) 0xcad516b1; (*       eor	x17, x21, x21, ror #5                               *)
  (* 125970:	*) 0x8b100294; (*       add	x20, x20, x16                                       *)
  (* 125974:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125978:	*) 0x8b140318; (*       add	x24, x24, x20                                       *)
  (* 12597c:	*) 0xca160273; (*       eor	x19, x19, x22                                       *)
  (* 125980:	*) 0xcad189b1; (*       eor	x17, x13, x17, ror #34                              *)
  (* 125984:	*) 0x8b130294; (*       add	x20, x20, x19                                       *)
  (* 125988:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 12598c:	*) 0xdac00d6b; (*       rev	x11, x11                                            *)
  (* 125990:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 125994:	*) 0x93d83b10; (*       ror	x16, x24, #14                                       *)
  (* 125998:	*) 0x8b13037b; (*       add	x27, x27, x19                                       *)
  (* 12599c:	*) 0xcad85f0e; (*       eor	x14, x24, x24, ror #23                              *)
  (* 1259a0:	*) 0x8a180331; (*       and	x17, x25, x24                                       *)
  (* 1259a4:	*) 0x8a380353; (*       bic	x19, x26, x24                                       *)
  (* 1259a8:	*) 0x8b0b037b; (*       add	x27, x27, x11                                       *)
  (* 1259ac:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 1259b0:	*) 0xca150293; (*       eor	x19, x20, x21                                       *)
  (* 1259b4:	*) 0xcace4a10; (*       eor	x16, x16, x14, ror #18                              *)
  (* 1259b8:	*) 0x93d4728e; (*       ror	x14, x20, #28                                       *)
  (* 1259bc:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 1259c0:	*) 0xcad41691; (*       eor	x17, x20, x20, ror #5                               *)
  (* 1259c4:	*) 0x8b10037b; (*       add	x27, x27, x16                                       *)
  (* 1259c8:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 1259cc:	*) 0x8b1b02f7; (*       add	x23, x23, x27                                       *)
  (* 1259d0:	*) 0xca15039c; (*       eor	x28, x28, x21                                       *)
  (* 1259d4:	*) 0xcad189d1; (*       eor	x17, x14, x17, ror #34                              *)
  (* 1259d8:	*) 0x8b1c037b; (*       add	x27, x27, x28                                       *)
  (* 1259dc:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 1259e0:	*) 0xdac00d8c; (*       rev	x12, x12                                            *)
  (* 1259e4:	*) 0xa8c1382d; (*       ldp	x13, x14, [x1], #16                                 *)
  (* 1259e8:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 1259ec:	*) 0x93d73af0; (*       ror	x16, x23, #14                                       *)
  (* 1259f0:	*) 0x8b1c035a; (*       add	x26, x26, x28                                       *)
  (* 1259f4:	*) 0xcad75eef; (*       eor	x15, x23, x23, ror #23                              *)
  (* 1259f8:	*) 0x8a170311; (*       and	x17, x24, x23                                       *)
  (* 1259fc:	*) 0x8a37033c; (*       bic	x28, x25, x23                                       *)
  (* 125a00:	*) 0x8b0c035a; (*       add	x26, x26, x12                                       *)
  (* 125a04:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125a08:	*) 0xca14037c; (*       eor	x28, x27, x20                                       *)
  (* 125a0c:	*) 0xcacf4a10; (*       eor	x16, x16, x15, ror #18                              *)
  (* 125a10:	*) 0x93db736f; (*       ror	x15, x27, #28                                       *)
  (* 125a14:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 125a18:	*) 0xcadb1771; (*       eor	x17, x27, x27, ror #5                               *)
  (* 125a1c:	*) 0x8b10035a; (*       add	x26, x26, x16                                       *)
  (* 125a20:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125a24:	*) 0x8b1a02d6; (*       add	x22, x22, x26                                       *)
  (* 125a28:	*) 0xca140273; (*       eor	x19, x19, x20                                       *)
  (* 125a2c:	*) 0xcad189f1; (*       eor	x17, x15, x17, ror #34                              *)
  (* 125a30:	*) 0x8b13035a; (*       add	x26, x26, x19                                       *)
  (* 125a34:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125a38:	*) 0xdac00dad; (*       rev	x13, x13                                            *)
  (* 125a3c:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 125a40:	*) 0x93d63ad0; (*       ror	x16, x22, #14                                       *)
  (* 125a44:	*) 0x8b130339; (*       add	x25, x25, x19                                       *)
  (* 125a48:	*) 0xcad65ec0; (*       eor	x0, x22, x22, ror #23                               *)
  (* 125a4c:	*) 0x8a1602f1; (*       and	x17, x23, x22                                       *)
  (* 125a50:	*) 0x8a360313; (*       bic	x19, x24, x22                                       *)
  (* 125a54:	*) 0x8b0d0339; (*       add	x25, x25, x13                                       *)
  (* 125a58:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125a5c:	*) 0xca1b0353; (*       eor	x19, x26, x27                                       *)
  (* 125a60:	*) 0xcac04a10; (*       eor	x16, x16, x0, ror #18                               *)
  (* 125a64:	*) 0x93da7340; (*       ror	x0, x26, #28                                        *)
  (* 125a68:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 125a6c:	*) 0xcada1751; (*       eor	x17, x26, x26, ror #5                               *)
  (* 125a70:	*) 0x8b100339; (*       add	x25, x25, x16                                       *)
  (* 125a74:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125a78:	*) 0x8b1902b5; (*       add	x21, x21, x25                                       *)
  (* 125a7c:	*) 0xca1b039c; (*       eor	x28, x28, x27                                       *)
  (* 125a80:	*) 0xcad18811; (*       eor	x17, x0, x17, ror #34                               *)
  (* 125a84:	*) 0x8b1c0339; (*       add	x25, x25, x28                                       *)
  (* 125a88:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125a8c:	*) 0xdac00dce; (*       rev	x14, x14                                            *)
  (* 125a90:	*) 0xa8c1002f; (*       ldp	x15, x0, [x1], #16                                  *)
  (* 125a94:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 125a98:	*) 0xf9000fe6; (*       str	x6, [sp, #24]                                       *)
  (* 125a9c:	*) 0x93d53ab0; (*       ror	x16, x21, #14                                       *)
  (* 125aa0:	*) 0x8b1c0318; (*       add	x24, x24, x28                                       *)
  (* 125aa4:	*) 0xcad55ea6; (*       eor	x6, x21, x21, ror #23                               *)
  (* 125aa8:	*) 0x8a1502d1; (*       and	x17, x22, x21                                       *)
  (* 125aac:	*) 0x8a3502fc; (*       bic	x28, x23, x21                                       *)
  (* 125ab0:	*) 0x8b0e0318; (*       add	x24, x24, x14                                       *)
  (* 125ab4:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125ab8:	*) 0xca1a033c; (*       eor	x28, x25, x26                                       *)
  (* 125abc:	*) 0xcac64a10; (*       eor	x16, x16, x6, ror #18                               *)
  (* 125ac0:	*) 0x93d97326; (*       ror	x6, x25, #28                                        *)
  (* 125ac4:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 125ac8:	*) 0xcad91731; (*       eor	x17, x25, x25, ror #5                               *)
  (* 125acc:	*) 0x8b100318; (*       add	x24, x24, x16                                       *)
  (* 125ad0:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125ad4:	*) 0x8b180294; (*       add	x20, x20, x24                                       *)
  (* 125ad8:	*) 0xca1a0273; (*       eor	x19, x19, x26                                       *)
  (* 125adc:	*) 0xcad188d1; (*       eor	x17, x6, x17, ror #34                               *)
  (* 125ae0:	*) 0x8b130318; (*       add	x24, x24, x19                                       *)
  (* 125ae4:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125ae8:	*) 0xdac00def; (*       rev	x15, x15                                            *)
  (* 125aec:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 125af0:	*) 0xf90003e7; (*       str	x7, [sp]                                            *)
  (* 125af4:	*) 0x93d43a90; (*       ror	x16, x20, #14                                       *)
  (* 125af8:	*) 0x8b1302f7; (*       add	x23, x23, x19                                       *)
  (* 125afc:	*) 0xcad45e87; (*       eor	x7, x20, x20, ror #23                               *)
  (* 125b00:	*) 0x8a1402b1; (*       and	x17, x21, x20                                       *)
  (* 125b04:	*) 0x8a3402d3; (*       bic	x19, x22, x20                                       *)
  (* 125b08:	*) 0x8b0f02f7; (*       add	x23, x23, x15                                       *)
  (* 125b0c:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125b10:	*) 0xca190313; (*       eor	x19, x24, x25                                       *)
  (* 125b14:	*) 0xcac74a10; (*       eor	x16, x16, x7, ror #18                               *)
  (* 125b18:	*) 0x93d87307; (*       ror	x7, x24, #28                                        *)
  (* 125b1c:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 125b20:	*) 0xcad81711; (*       eor	x17, x24, x24, ror #5                               *)
  (* 125b24:	*) 0x8b1002f7; (*       add	x23, x23, x16                                       *)
  (* 125b28:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125b2c:	*) 0x8b17037b; (*       add	x27, x27, x23                                       *)
  (* 125b30:	*) 0xca19039c; (*       eor	x28, x28, x25                                       *)
  (* 125b34:	*) 0xcad188f1; (*       eor	x17, x7, x17, ror #34                               *)
  (* 125b38:	*) 0x8b1c02f7; (*       add	x23, x23, x28                                       *)
  (* 125b3c:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125b40:	*) 0xdac00c00; (*       rev	x0, x0                                              *)
  (* 125b44:	*) 0xa9400821; (*       ldp	x1, x2, [x1]                                        *)
  (* 125b48:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 125b4c:	*) 0xf90007e8; (*       str	x8, [sp, #8]                                        *)
  (* 125b50:	*) 0x93db3b70; (*       ror	x16, x27, #14                                       *)
  (* 125b54:	*) 0x8b1c02d6; (*       add	x22, x22, x28                                       *)
  (* 125b58:	*) 0xcadb5f68; (*       eor	x8, x27, x27, ror #23                               *)
  (* 125b5c:	*) 0x8a1b0291; (*       and	x17, x20, x27                                       *)
  (* 125b60:	*) 0x8a3b02bc; (*       bic	x28, x21, x27                                       *)
  (* 125b64:	*) 0x8b0002d6; (*       add	x22, x22, x0                                        *)
  (* 125b68:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125b6c:	*) 0xca1802fc; (*       eor	x28, x23, x24                                       *)
  (* 125b70:	*) 0xcac84a10; (*       eor	x16, x16, x8, ror #18                               *)
  (* 125b74:	*) 0x93d772e8; (*       ror	x8, x23, #28                                        *)
  (* 125b78:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 125b7c:	*) 0xcad716f1; (*       eor	x17, x23, x23, ror #5                               *)
  (* 125b80:	*) 0x8b1002d6; (*       add	x22, x22, x16                                       *)
  (* 125b84:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125b88:	*) 0x8b16035a; (*       add	x26, x26, x22                                       *)
  (* 125b8c:	*) 0xca180273; (*       eor	x19, x19, x24                                       *)
  (* 125b90:	*) 0xcad18911; (*       eor	x17, x8, x17, ror #34                               *)
  (* 125b94:	*) 0x8b1302d6; (*       add	x22, x22, x19                                       *)
  (* 125b98:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125b9c:	*) 0xdac00c21; (*       rev	x1, x1                                              *)
  (* 125ba0:	*) 0xf9400fe6; (*       ldr	x6, [sp, #24]                                       *)
  (* 125ba4:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 125ba8:	*) 0xf9000be9; (*       str	x9, [sp, #16]                                       *)
  (* 125bac:	*) 0x93da3b50; (*       ror	x16, x26, #14                                       *)
  (* 125bb0:	*) 0x8b1302b5; (*       add	x21, x21, x19                                       *)
  (* 125bb4:	*) 0xcada5f49; (*       eor	x9, x26, x26, ror #23                               *)
  (* 125bb8:	*) 0x8a1a0371; (*       and	x17, x27, x26                                       *)
  (* 125bbc:	*) 0x8a3a0293; (*       bic	x19, x20, x26                                       *)
  (* 125bc0:	*) 0x8b0102b5; (*       add	x21, x21, x1                                        *)
  (* 125bc4:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125bc8:	*) 0xca1702d3; (*       eor	x19, x22, x23                                       *)
  (* 125bcc:	*) 0xcac94a10; (*       eor	x16, x16, x9, ror #18                               *)
  (* 125bd0:	*) 0x93d672c9; (*       ror	x9, x22, #28                                        *)
  (* 125bd4:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 125bd8:	*) 0xcad616d1; (*       eor	x17, x22, x22, ror #5                               *)
  (* 125bdc:	*) 0x8b1002b5; (*       add	x21, x21, x16                                       *)
  (* 125be0:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125be4:	*) 0x8b150339; (*       add	x25, x25, x21                                       *)
  (* 125be8:	*) 0xca17039c; (*       eor	x28, x28, x23                                       *)
  (* 125bec:	*) 0xcad18931; (*       eor	x17, x9, x17, ror #34                               *)
  (* 125bf0:	*) 0x8b1c02b5; (*       add	x21, x21, x28                                       *)
  (* 125bf4:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125bf8:	*) 0xdac00c42; (*       rev	x2, x2                                              *)
  (* 125bfc:	*) 0xf94003e7; (*       ldr	x7, [sp]                                            *)
  (* 125c00:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 125c04:	*) 0xf9000fea; (*       str	x10, [sp, #24]                                      *)
  (* 125c08:	*) 0x93d93b30; (*       ror	x16, x25, #14                                       *)
  (* 125c0c:	*) 0x8b1c0294; (*       add	x20, x20, x28                                       *)
  (* 125c10:	*) 0x93c40489; (*       ror	x9, x4, #1                                          *)
  (* 125c14:	*) 0x8a190351; (*       and	x17, x26, x25                                       *)
  (* 125c18:	*) 0x93c14c28; (*       ror	x8, x1, #19                                         *)
  (* 125c1c:	*) 0x8a39037c; (*       bic	x28, x27, x25                                       *)
  (* 125c20:	*) 0x93d572aa; (*       ror	x10, x21, #28                                       *)
  (* 125c24:	*) 0x8b020294; (*       add	x20, x20, x2                                        *)
  (* 125c28:	*) 0xcad94a10; (*       eor	x16, x16, x25, ror #18                              *)
  (* 125c2c:	*) 0xcac42129; (*       eor	x9, x9, x4, ror #8                                  *)
  (* 125c30:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125c34:	*) 0xca1602bc; (*       eor	x28, x21, x22                                       *)
  (* 125c38:	*) 0xcad9a610; (*       eor	x16, x16, x25, ror #41                              *)
  (* 125c3c:	*) 0xcad5894a; (*       eor	x10, x10, x21, ror #34                              *)
  (* 125c40:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 125c44:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125c48:	*) 0xcac1f508; (*       eor	x8, x8, x1, ror #61                                 *)
  (* 125c4c:	*) 0xca441d29; (*       eor	x9, x9, x4, lsr #7                                  *)
  (* 125c50:	*) 0x8b100294; (*       add	x20, x20, x16                                       *)
  (* 125c54:	*) 0xca160273; (*       eor	x19, x19, x22                                       *)
  (* 125c58:	*) 0xcad59d51; (*       eor	x17, x10, x21, ror #39                              *)
  (* 125c5c:	*) 0xca411908; (*       eor	x8, x8, x1, lsr #6                                  *)
  (* 125c60:	*) 0x8b0c0063; (*       add	x3, x3, x12                                         *)
  (* 125c64:	*) 0x8b140318; (*       add	x24, x24, x20                                       *)
  (* 125c68:	*) 0x8b130294; (*       add	x20, x20, x19                                       *)
  (* 125c6c:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125c70:	*) 0x8b090063; (*       add	x3, x3, x9                                          *)
  (* 125c74:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 125c78:	*) 0x8b080063; (*       add	x3, x3, x8                                          *)

  (* Inner Loop: 12643c-125c7c *)
  (* 125c7c:	*) 0xf94007e8; (*       ldr	x8, [sp, #8]                                        *)
  (* 125c80:	*) 0xf90003eb; (*       str	x11, [sp]                                           *)
  (* 125c84:	*) 0x93d83b10; (*       ror	x16, x24, #14                                       *)
  (* 125c88:	*) 0x8b13037b; (*       add	x27, x27, x19                                       *)
  (* 125c8c:	*) 0x93c504aa; (*       ror	x10, x5, #1                                         *)
  (* 125c90:	*) 0x8a180331; (*       and	x17, x25, x24                                       *)
  (* 125c94:	*) 0x93c24c49; (*       ror	x9, x2, #19                                         *)
  (* 125c98:	*) 0x8a380353; (*       bic	x19, x26, x24                                       *)
  (* 125c9c:	*) 0x93d4728b; (*       ror	x11, x20, #28                                       *)
  (* 125ca0:	*) 0x8b03037b; (*       add	x27, x27, x3                                        *)
  (* 125ca4:	*) 0xcad84a10; (*       eor	x16, x16, x24, ror #18                              *)
  (* 125ca8:	*) 0xcac5214a; (*       eor	x10, x10, x5, ror #8                                *)
  (* 125cac:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125cb0:	*) 0xca150293; (*       eor	x19, x20, x21                                       *)
  (* 125cb4:	*) 0xcad8a610; (*       eor	x16, x16, x24, ror #41                              *)
  (* 125cb8:	*) 0xcad4896b; (*       eor	x11, x11, x20, ror #34                              *)
  (* 125cbc:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 125cc0:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125cc4:	*) 0xcac2f529; (*       eor	x9, x9, x2, ror #61                                 *)
  (* 125cc8:	*) 0xca451d4a; (*       eor	x10, x10, x5, lsr #7                                *)
  (* 125ccc:	*) 0x8b10037b; (*       add	x27, x27, x16                                       *)
  (* 125cd0:	*) 0xca15039c; (*       eor	x28, x28, x21                                       *)
  (* 125cd4:	*) 0xcad49d71; (*       eor	x17, x11, x20, ror #39                              *)
  (* 125cd8:	*) 0xca421929; (*       eor	x9, x9, x2, lsr #6                                  *)
  (* 125cdc:	*) 0x8b0d0084; (*       add	x4, x4, x13                                         *)
  (* 125ce0:	*) 0x8b1b02f7; (*       add	x23, x23, x27                                       *)
  (* 125ce4:	*) 0x8b1c037b; (*       add	x27, x27, x28                                       *)
  (* 125ce8:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125cec:	*) 0x8b0a0084; (*       add	x4, x4, x10                                         *)
  (* 125cf0:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 125cf4:	*) 0x8b090084; (*       add	x4, x4, x9                                          *)
  (* 125cf8:	*) 0xf9400be9; (*       ldr	x9, [sp, #16]                                       *)
  (* 125cfc:	*) 0xf90007ec; (*       str	x12, [sp, #8]                                       *)
  (* 125d00:	*) 0x93d73af0; (*       ror	x16, x23, #14                                       *)
  (* 125d04:	*) 0x8b1c035a; (*       add	x26, x26, x28                                       *)
  (* 125d08:	*) 0x93c604cb; (*       ror	x11, x6, #1                                         *)
  (* 125d0c:	*) 0x8a170311; (*       and	x17, x24, x23                                       *)
  (* 125d10:	*) 0x93c34c6a; (*       ror	x10, x3, #19                                        *)
  (* 125d14:	*) 0x8a37033c; (*       bic	x28, x25, x23                                       *)
  (* 125d18:	*) 0x93db736c; (*       ror	x12, x27, #28                                       *)
  (* 125d1c:	*) 0x8b04035a; (*       add	x26, x26, x4                                        *)
  (* 125d20:	*) 0xcad74a10; (*       eor	x16, x16, x23, ror #18                              *)
  (* 125d24:	*) 0xcac6216b; (*       eor	x11, x11, x6, ror #8                                *)
  (* 125d28:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125d2c:	*) 0xca14037c; (*       eor	x28, x27, x20                                       *)
  (* 125d30:	*) 0xcad7a610; (*       eor	x16, x16, x23, ror #41                              *)
  (* 125d34:	*) 0xcadb898c; (*       eor	x12, x12, x27, ror #34                              *)
  (* 125d38:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 125d3c:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125d40:	*) 0xcac3f54a; (*       eor	x10, x10, x3, ror #61                               *)
  (* 125d44:	*) 0xca461d6b; (*       eor	x11, x11, x6, lsr #7                                *)
  (* 125d48:	*) 0x8b10035a; (*       add	x26, x26, x16                                       *)
  (* 125d4c:	*) 0xca140273; (*       eor	x19, x19, x20                                       *)
  (* 125d50:	*) 0xcadb9d91; (*       eor	x17, x12, x27, ror #39                              *)
  (* 125d54:	*) 0xca43194a; (*       eor	x10, x10, x3, lsr #6                                *)
  (* 125d58:	*) 0x8b0e00a5; (*       add	x5, x5, x14                                         *)
  (* 125d5c:	*) 0x8b1a02d6; (*       add	x22, x22, x26                                       *)
  (* 125d60:	*) 0x8b13035a; (*       add	x26, x26, x19                                       *)
  (* 125d64:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125d68:	*) 0x8b0b00a5; (*       add	x5, x5, x11                                         *)
  (* 125d6c:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 125d70:	*) 0x8b0a00a5; (*       add	x5, x5, x10                                         *)
  (* 125d74:	*) 0xf9400fea; (*       ldr	x10, [sp, #24]                                      *)
  (* 125d78:	*) 0xf9000bed; (*       str	x13, [sp, #16]                                      *)
  (* 125d7c:	*) 0x93d63ad0; (*       ror	x16, x22, #14                                       *)
  (* 125d80:	*) 0x8b130339; (*       add	x25, x25, x19                                       *)
  (* 125d84:	*) 0x93c704ec; (*       ror	x12, x7, #1                                         *)
  (* 125d88:	*) 0x8a1602f1; (*       and	x17, x23, x22                                       *)
  (* 125d8c:	*) 0x93c44c8b; (*       ror	x11, x4, #19                                        *)
  (* 125d90:	*) 0x8a360313; (*       bic	x19, x24, x22                                       *)
  (* 125d94:	*) 0x93da734d; (*       ror	x13, x26, #28                                       *)
  (* 125d98:	*) 0x8b050339; (*       add	x25, x25, x5                                        *)
  (* 125d9c:	*) 0xcad64a10; (*       eor	x16, x16, x22, ror #18                              *)
  (* 125da0:	*) 0xcac7218c; (*       eor	x12, x12, x7, ror #8                                *)
  (* 125da4:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125da8:	*) 0xca1b0353; (*       eor	x19, x26, x27                                       *)
  (* 125dac:	*) 0xcad6a610; (*       eor	x16, x16, x22, ror #41                              *)
  (* 125db0:	*) 0xcada89ad; (*       eor	x13, x13, x26, ror #34                              *)
  (* 125db4:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 125db8:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125dbc:	*) 0xcac4f56b; (*       eor	x11, x11, x4, ror #61                               *)
  (* 125dc0:	*) 0xca471d8c; (*       eor	x12, x12, x7, lsr #7                                *)
  (* 125dc4:	*) 0x8b100339; (*       add	x25, x25, x16                                       *)
  (* 125dc8:	*) 0xca1b039c; (*       eor	x28, x28, x27                                       *)
  (* 125dcc:	*) 0xcada9db1; (*       eor	x17, x13, x26, ror #39                              *)
  (* 125dd0:	*) 0xca44196b; (*       eor	x11, x11, x4, lsr #6                                *)
  (* 125dd4:	*) 0x8b0f00c6; (*       add	x6, x6, x15                                         *)
  (* 125dd8:	*) 0x8b1902b5; (*       add	x21, x21, x25                                       *)
  (* 125ddc:	*) 0x8b1c0339; (*       add	x25, x25, x28                                       *)
  (* 125de0:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125de4:	*) 0x8b0c00c6; (*       add	x6, x6, x12                                         *)
  (* 125de8:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 125dec:	*) 0x8b0b00c6; (*       add	x6, x6, x11                                         *)
  (* 125df0:	*) 0xf94003eb; (*       ldr	x11, [sp]                                           *)
  (* 125df4:	*) 0xf9000fee; (*       str	x14, [sp, #24]                                      *)
  (* 125df8:	*) 0x93d53ab0; (*       ror	x16, x21, #14                                       *)
  (* 125dfc:	*) 0x8b1c0318; (*       add	x24, x24, x28                                       *)
  (* 125e00:	*) 0x93c8050d; (*       ror	x13, x8, #1                                         *)
  (* 125e04:	*) 0x8a1502d1; (*       and	x17, x22, x21                                       *)
  (* 125e08:	*) 0x93c54cac; (*       ror	x12, x5, #19                                        *)
  (* 125e0c:	*) 0x8a3502fc; (*       bic	x28, x23, x21                                       *)
  (* 125e10:	*) 0x93d9732e; (*       ror	x14, x25, #28                                       *)
  (* 125e14:	*) 0x8b060318; (*       add	x24, x24, x6                                        *)
  (* 125e18:	*) 0xcad54a10; (*       eor	x16, x16, x21, ror #18                              *)
  (* 125e1c:	*) 0xcac821ad; (*       eor	x13, x13, x8, ror #8                                *)
  (* 125e20:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125e24:	*) 0xca1a033c; (*       eor	x28, x25, x26                                       *)
  (* 125e28:	*) 0xcad5a610; (*       eor	x16, x16, x21, ror #41                              *)
  (* 125e2c:	*) 0xcad989ce; (*       eor	x14, x14, x25, ror #34                              *)
  (* 125e30:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 125e34:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125e38:	*) 0xcac5f58c; (*       eor	x12, x12, x5, ror #61                               *)
  (* 125e3c:	*) 0xca481dad; (*       eor	x13, x13, x8, lsr #7                                *)
  (* 125e40:	*) 0x8b100318; (*       add	x24, x24, x16                                       *)
  (* 125e44:	*) 0xca1a0273; (*       eor	x19, x19, x26                                       *)
  (* 125e48:	*) 0xcad99dd1; (*       eor	x17, x14, x25, ror #39                              *)
  (* 125e4c:	*) 0xca45198c; (*       eor	x12, x12, x5, lsr #6                                *)
  (* 125e50:	*) 0x8b0000e7; (*       add	x7, x7, x0                                          *)
  (* 125e54:	*) 0x8b180294; (*       add	x20, x20, x24                                       *)
  (* 125e58:	*) 0x8b130318; (*       add	x24, x24, x19                                       *)
  (* 125e5c:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125e60:	*) 0x8b0d00e7; (*       add	x7, x7, x13                                         *)
  (* 125e64:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 125e68:	*) 0x8b0c00e7; (*       add	x7, x7, x12                                         *)
  (* 125e6c:	*) 0xf94007ec; (*       ldr	x12, [sp, #8]                                       *)
  (* 125e70:	*) 0xf90003ef; (*       str	x15, [sp]                                           *)
  (* 125e74:	*) 0x93d43a90; (*       ror	x16, x20, #14                                       *)
  (* 125e78:	*) 0x8b1302f7; (*       add	x23, x23, x19                                       *)
  (* 125e7c:	*) 0x93c9052e; (*       ror	x14, x9, #1                                         *)
  (* 125e80:	*) 0x8a1402b1; (*       and	x17, x21, x20                                       *)
  (* 125e84:	*) 0x93c64ccd; (*       ror	x13, x6, #19                                        *)
  (* 125e88:	*) 0x8a3402d3; (*       bic	x19, x22, x20                                       *)
  (* 125e8c:	*) 0x93d8730f; (*       ror	x15, x24, #28                                       *)
  (* 125e90:	*) 0x8b0702f7; (*       add	x23, x23, x7                                        *)
  (* 125e94:	*) 0xcad44a10; (*       eor	x16, x16, x20, ror #18                              *)
  (* 125e98:	*) 0xcac921ce; (*       eor	x14, x14, x9, ror #8                                *)
  (* 125e9c:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125ea0:	*) 0xca190313; (*       eor	x19, x24, x25                                       *)
  (* 125ea4:	*) 0xcad4a610; (*       eor	x16, x16, x20, ror #41                              *)
  (* 125ea8:	*) 0xcad889ef; (*       eor	x15, x15, x24, ror #34                              *)
  (* 125eac:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 125eb0:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125eb4:	*) 0xcac6f5ad; (*       eor	x13, x13, x6, ror #61                               *)
  (* 125eb8:	*) 0xca491dce; (*       eor	x14, x14, x9, lsr #7                                *)
  (* 125ebc:	*) 0x8b1002f7; (*       add	x23, x23, x16                                       *)
  (* 125ec0:	*) 0xca19039c; (*       eor	x28, x28, x25                                       *)
  (* 125ec4:	*) 0xcad89df1; (*       eor	x17, x15, x24, ror #39                              *)
  (* 125ec8:	*) 0xca4619ad; (*       eor	x13, x13, x6, lsr #6                                *)
  (* 125ecc:	*) 0x8b010108; (*       add	x8, x8, x1                                          *)
  (* 125ed0:	*) 0x8b17037b; (*       add	x27, x27, x23                                       *)
  (* 125ed4:	*) 0x8b1c02f7; (*       add	x23, x23, x28                                       *)
  (* 125ed8:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125edc:	*) 0x8b0e0108; (*       add	x8, x8, x14                                         *)
  (* 125ee0:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 125ee4:	*) 0x8b0d0108; (*       add	x8, x8, x13                                         *)
  (* 125ee8:	*) 0xf9400bed; (*       ldr	x13, [sp, #16]                                      *)
  (* 125eec:	*) 0xf90007e0; (*       str	x0, [sp, #8]                                        *)
  (* 125ef0:	*) 0x93db3b70; (*       ror	x16, x27, #14                                       *)
  (* 125ef4:	*) 0x8b1c02d6; (*       add	x22, x22, x28                                       *)
  (* 125ef8:	*) 0x93ca054f; (*       ror	x15, x10, #1                                        *)
  (* 125efc:	*) 0x8a1b0291; (*       and	x17, x20, x27                                       *)
  (* 125f00:	*) 0x93c74cee; (*       ror	x14, x7, #19                                        *)
  (* 125f04:	*) 0x8a3b02bc; (*       bic	x28, x21, x27                                       *)
  (* 125f08:	*) 0x93d772e0; (*       ror	x0, x23, #28                                        *)
  (* 125f0c:	*) 0x8b0802d6; (*       add	x22, x22, x8                                        *)
  (* 125f10:	*) 0xcadb4a10; (*       eor	x16, x16, x27, ror #18                              *)
  (* 125f14:	*) 0xcaca21ef; (*       eor	x15, x15, x10, ror #8                               *)
  (* 125f18:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 125f1c:	*) 0xca1802fc; (*       eor	x28, x23, x24                                       *)
  (* 125f20:	*) 0xcadba610; (*       eor	x16, x16, x27, ror #41                              *)
  (* 125f24:	*) 0xcad78800; (*       eor	x0, x0, x23, ror #34                                *)
  (* 125f28:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 125f2c:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 125f30:	*) 0xcac7f5ce; (*       eor	x14, x14, x7, ror #61                               *)
  (* 125f34:	*) 0xca4a1def; (*       eor	x15, x15, x10, lsr #7                               *)
  (* 125f38:	*) 0x8b1002d6; (*       add	x22, x22, x16                                       *)
  (* 125f3c:	*) 0xca180273; (*       eor	x19, x19, x24                                       *)
  (* 125f40:	*) 0xcad79c11; (*       eor	x17, x0, x23, ror #39                               *)
  (* 125f44:	*) 0xca4719ce; (*       eor	x14, x14, x7, lsr #6                                *)
  (* 125f48:	*) 0x8b020129; (*       add	x9, x9, x2                                          *)
  (* 125f4c:	*) 0x8b16035a; (*       add	x26, x26, x22                                       *)
  (* 125f50:	*) 0x8b1302d6; (*       add	x22, x22, x19                                       *)
  (* 125f54:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 125f58:	*) 0x8b0f0129; (*       add	x9, x9, x15                                         *)
  (* 125f5c:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 125f60:	*) 0x8b0e0129; (*       add	x9, x9, x14                                         *)
  (* 125f64:	*) 0xf9400fee; (*       ldr	x14, [sp, #24]                                      *)
  (* 125f68:	*) 0xf9000be1; (*       str	x1, [sp, #16]                                       *)
  (* 125f6c:	*) 0x93da3b50; (*       ror	x16, x26, #14                                       *)
  (* 125f70:	*) 0x8b1302b5; (*       add	x21, x21, x19                                       *)
  (* 125f74:	*) 0x93cb0560; (*       ror	x0, x11, #1                                         *)
  (* 125f78:	*) 0x8a1a0371; (*       and	x17, x27, x26                                       *)
  (* 125f7c:	*) 0x93c84d0f; (*       ror	x15, x8, #19                                        *)
  (* 125f80:	*) 0x8a3a0293; (*       bic	x19, x20, x26                                       *)
  (* 125f84:	*) 0x93d672c1; (*       ror	x1, x22, #28                                        *)
  (* 125f88:	*) 0x8b0902b5; (*       add	x21, x21, x9                                        *)
  (* 125f8c:	*) 0xcada4a10; (*       eor	x16, x16, x26, ror #18                              *)
  (* 125f90:	*) 0xcacb2000; (*       eor	x0, x0, x11, ror #8                                 *)
  (* 125f94:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 125f98:	*) 0xca1702d3; (*       eor	x19, x22, x23                                       *)
  (* 125f9c:	*) 0xcadaa610; (*       eor	x16, x16, x26, ror #41                              *)
  (* 125fa0:	*) 0xcad68821; (*       eor	x1, x1, x22, ror #34                                *)
  (* 125fa4:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 125fa8:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 125fac:	*) 0xcac8f5ef; (*       eor	x15, x15, x8, ror #61                               *)
  (* 125fb0:	*) 0xca4b1c00; (*       eor	x0, x0, x11, lsr #7                                 *)
  (* 125fb4:	*) 0x8b1002b5; (*       add	x21, x21, x16                                       *)
  (* 125fb8:	*) 0xca17039c; (*       eor	x28, x28, x23                                       *)
  (* 125fbc:	*) 0xcad69c31; (*       eor	x17, x1, x22, ror #39                               *)
  (* 125fc0:	*) 0xca4819ef; (*       eor	x15, x15, x8, lsr #6                                *)
  (* 125fc4:	*) 0x8b03014a; (*       add	x10, x10, x3                                        *)
  (* 125fc8:	*) 0x8b150339; (*       add	x25, x25, x21                                       *)
  (* 125fcc:	*) 0x8b1c02b5; (*       add	x21, x21, x28                                       *)
  (* 125fd0:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 125fd4:	*) 0x8b00014a; (*       add	x10, x10, x0                                        *)
  (* 125fd8:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 125fdc:	*) 0x8b0f014a; (*       add	x10, x10, x15                                       *)
  (* 125fe0:	*) 0xf94003ef; (*       ldr	x15, [sp]                                           *)
  (* 125fe4:	*) 0xf9000fe2; (*       str	x2, [sp, #24]                                       *)
  (* 125fe8:	*) 0x93d93b30; (*       ror	x16, x25, #14                                       *)
  (* 125fec:	*) 0x8b1c0294; (*       add	x20, x20, x28                                       *)
  (* 125ff0:	*) 0x93cc0581; (*       ror	x1, x12, #1                                         *)
  (* 125ff4:	*) 0x8a190351; (*       and	x17, x26, x25                                       *)
  (* 125ff8:	*) 0x93c94d20; (*       ror	x0, x9, #19                                         *)
  (* 125ffc:	*) 0x8a39037c; (*       bic	x28, x27, x25                                       *)
  (* 126000:	*) 0x93d572a2; (*       ror	x2, x21, #28                                        *)
  (* 126004:	*) 0x8b0a0294; (*       add	x20, x20, x10                                       *)
  (* 126008:	*) 0xcad94a10; (*       eor	x16, x16, x25, ror #18                              *)
  (* 12600c:	*) 0xcacc2021; (*       eor	x1, x1, x12, ror #8                                 *)
  (* 126010:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 126014:	*) 0xca1602bc; (*       eor	x28, x21, x22                                       *)
  (* 126018:	*) 0xcad9a610; (*       eor	x16, x16, x25, ror #41                              *)
  (* 12601c:	*) 0xcad58842; (*       eor	x2, x2, x21, ror #34                                *)
  (* 126020:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 126024:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 126028:	*) 0xcac9f400; (*       eor	x0, x0, x9, ror #61                                 *)
  (* 12602c:	*) 0xca4c1c21; (*       eor	x1, x1, x12, lsr #7                                 *)
  (* 126030:	*) 0x8b100294; (*       add	x20, x20, x16                                       *)
  (* 126034:	*) 0xca160273; (*       eor	x19, x19, x22                                       *)
  (* 126038:	*) 0xcad59c51; (*       eor	x17, x2, x21, ror #39                               *)
  (* 12603c:	*) 0xca491800; (*       eor	x0, x0, x9, lsr #6                                  *)
  (* 126040:	*) 0x8b04016b; (*       add	x11, x11, x4                                        *)
  (* 126044:	*) 0x8b140318; (*       add	x24, x24, x20                                       *)
  (* 126048:	*) 0x8b130294; (*       add	x20, x20, x19                                       *)
  (* 12604c:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 126050:	*) 0x8b01016b; (*       add	x11, x11, x1                                        *)
  (* 126054:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 126058:	*) 0x8b00016b; (*       add	x11, x11, x0                                        *)
  (* 12605c:	*) 0xf94007e0; (*       ldr	x0, [sp, #8]                                        *)
  (* 126060:	*) 0xf90003e3; (*       str	x3, [sp]                                            *)
  (* 126064:	*) 0x93d83b10; (*       ror	x16, x24, #14                                       *)
  (* 126068:	*) 0x8b13037b; (*       add	x27, x27, x19                                       *)
  (* 12606c:	*) 0x93cd05a2; (*       ror	x2, x13, #1                                         *)
  (* 126070:	*) 0x8a180331; (*       and	x17, x25, x24                                       *)
  (* 126074:	*) 0x93ca4d41; (*       ror	x1, x10, #19                                        *)
  (* 126078:	*) 0x8a380353; (*       bic	x19, x26, x24                                       *)
  (* 12607c:	*) 0x93d47283; (*       ror	x3, x20, #28                                        *)
  (* 126080:	*) 0x8b0b037b; (*       add	x27, x27, x11                                       *)
  (* 126084:	*) 0xcad84a10; (*       eor	x16, x16, x24, ror #18                              *)
  (* 126088:	*) 0xcacd2042; (*       eor	x2, x2, x13, ror #8                                 *)
  (* 12608c:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 126090:	*) 0xca150293; (*       eor	x19, x20, x21                                       *)
  (* 126094:	*) 0xcad8a610; (*       eor	x16, x16, x24, ror #41                              *)
  (* 126098:	*) 0xcad48863; (*       eor	x3, x3, x20, ror #34                                *)
  (* 12609c:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 1260a0:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 1260a4:	*) 0xcacaf421; (*       eor	x1, x1, x10, ror #61                                *)
  (* 1260a8:	*) 0xca4d1c42; (*       eor	x2, x2, x13, lsr #7                                 *)
  (* 1260ac:	*) 0x8b10037b; (*       add	x27, x27, x16                                       *)
  (* 1260b0:	*) 0xca15039c; (*       eor	x28, x28, x21                                       *)
  (* 1260b4:	*) 0xcad49c71; (*       eor	x17, x3, x20, ror #39                               *)
  (* 1260b8:	*) 0xca4a1821; (*       eor	x1, x1, x10, lsr #6                                 *)
  (* 1260bc:	*) 0x8b05018c; (*       add	x12, x12, x5                                        *)
  (* 1260c0:	*) 0x8b1b02f7; (*       add	x23, x23, x27                                       *)
  (* 1260c4:	*) 0x8b1c037b; (*       add	x27, x27, x28                                       *)
  (* 1260c8:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 1260cc:	*) 0x8b02018c; (*       add	x12, x12, x2                                        *)
  (* 1260d0:	*) 0x8b11037b; (*       add	x27, x27, x17                                       *)
  (* 1260d4:	*) 0x8b01018c; (*       add	x12, x12, x1                                        *)
  (* 1260d8:	*) 0xf9400be1; (*       ldr	x1, [sp, #16]                                       *)
  (* 1260dc:	*) 0xf90007e4; (*       str	x4, [sp, #8]                                        *)
  (* 1260e0:	*) 0x93d73af0; (*       ror	x16, x23, #14                                       *)
  (* 1260e4:	*) 0x8b1c035a; (*       add	x26, x26, x28                                       *)
  (* 1260e8:	*) 0x93ce05c3; (*       ror	x3, x14, #1                                         *)
  (* 1260ec:	*) 0x8a170311; (*       and	x17, x24, x23                                       *)
  (* 1260f0:	*) 0x93cb4d62; (*       ror	x2, x11, #19                                        *)
  (* 1260f4:	*) 0x8a37033c; (*       bic	x28, x25, x23                                       *)
  (* 1260f8:	*) 0x93db7364; (*       ror	x4, x27, #28                                        *)
  (* 1260fc:	*) 0x8b0c035a; (*       add	x26, x26, x12                                       *)
  (* 126100:	*) 0xcad74a10; (*       eor	x16, x16, x23, ror #18                              *)
  (* 126104:	*) 0xcace2063; (*       eor	x3, x3, x14, ror #8                                 *)
  (* 126108:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 12610c:	*) 0xca14037c; (*       eor	x28, x27, x20                                       *)
  (* 126110:	*) 0xcad7a610; (*       eor	x16, x16, x23, ror #41                              *)
  (* 126114:	*) 0xcadb8884; (*       eor	x4, x4, x27, ror #34                                *)
  (* 126118:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 12611c:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 126120:	*) 0xcacbf442; (*       eor	x2, x2, x11, ror #61                                *)
  (* 126124:	*) 0xca4e1c63; (*       eor	x3, x3, x14, lsr #7                                 *)
  (* 126128:	*) 0x8b10035a; (*       add	x26, x26, x16                                       *)
  (* 12612c:	*) 0xca140273; (*       eor	x19, x19, x20                                       *)
  (* 126130:	*) 0xcadb9c91; (*       eor	x17, x4, x27, ror #39                               *)
  (* 126134:	*) 0xca4b1842; (*       eor	x2, x2, x11, lsr #6                                 *)
  (* 126138:	*) 0x8b0601ad; (*       add	x13, x13, x6                                        *)
  (* 12613c:	*) 0x8b1a02d6; (*       add	x22, x22, x26                                       *)
  (* 126140:	*) 0x8b13035a; (*       add	x26, x26, x19                                       *)
  (* 126144:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 126148:	*) 0x8b0301ad; (*       add	x13, x13, x3                                        *)
  (* 12614c:	*) 0x8b11035a; (*       add	x26, x26, x17                                       *)
  (* 126150:	*) 0x8b0201ad; (*       add	x13, x13, x2                                        *)
  (* 126154:	*) 0xf9400fe2; (*       ldr	x2, [sp, #24]                                       *)
  (* 126158:	*) 0xf9000be5; (*       str	x5, [sp, #16]                                       *)
  (* 12615c:	*) 0x93d63ad0; (*       ror	x16, x22, #14                                       *)
  (* 126160:	*) 0x8b130339; (*       add	x25, x25, x19                                       *)
  (* 126164:	*) 0x93cf05e4; (*       ror	x4, x15, #1                                         *)
  (* 126168:	*) 0x8a1602f1; (*       and	x17, x23, x22                                       *)
  (* 12616c:	*) 0x93cc4d83; (*       ror	x3, x12, #19                                        *)
  (* 126170:	*) 0x8a360313; (*       bic	x19, x24, x22                                       *)
  (* 126174:	*) 0x93da7345; (*       ror	x5, x26, #28                                        *)
  (* 126178:	*) 0x8b0d0339; (*       add	x25, x25, x13                                       *)
  (* 12617c:	*) 0xcad64a10; (*       eor	x16, x16, x22, ror #18                              *)
  (* 126180:	*) 0xcacf2084; (*       eor	x4, x4, x15, ror #8                                 *)
  (* 126184:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 126188:	*) 0xca1b0353; (*       eor	x19, x26, x27                                       *)
  (* 12618c:	*) 0xcad6a610; (*       eor	x16, x16, x22, ror #41                              *)
  (* 126190:	*) 0xcada88a5; (*       eor	x5, x5, x26, ror #34                                *)
  (* 126194:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 126198:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 12619c:	*) 0xcaccf463; (*       eor	x3, x3, x12, ror #61                                *)
  (* 1261a0:	*) 0xca4f1c84; (*       eor	x4, x4, x15, lsr #7                                 *)
  (* 1261a4:	*) 0x8b100339; (*       add	x25, x25, x16                                       *)
  (* 1261a8:	*) 0xca1b039c; (*       eor	x28, x28, x27                                       *)
  (* 1261ac:	*) 0xcada9cb1; (*       eor	x17, x5, x26, ror #39                               *)
  (* 1261b0:	*) 0xca4c1863; (*       eor	x3, x3, x12, lsr #6                                 *)
  (* 1261b4:	*) 0x8b0701ce; (*       add	x14, x14, x7                                        *)
  (* 1261b8:	*) 0x8b1902b5; (*       add	x21, x21, x25                                       *)
  (* 1261bc:	*) 0x8b1c0339; (*       add	x25, x25, x28                                       *)
  (* 1261c0:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 1261c4:	*) 0x8b0401ce; (*       add	x14, x14, x4                                        *)
  (* 1261c8:	*) 0x8b110339; (*       add	x25, x25, x17                                       *)
  (* 1261cc:	*) 0x8b0301ce; (*       add	x14, x14, x3                                        *)
  (* 1261d0:	*) 0xf94003e3; (*       ldr	x3, [sp]                                            *)
  (* 1261d4:	*) 0xf9000fe6; (*       str	x6, [sp, #24]                                       *)
  (* 1261d8:	*) 0x93d53ab0; (*       ror	x16, x21, #14                                       *)
  (* 1261dc:	*) 0x8b1c0318; (*       add	x24, x24, x28                                       *)
  (* 1261e0:	*) 0x93c00405; (*       ror	x5, x0, #1                                          *)
  (* 1261e4:	*) 0x8a1502d1; (*       and	x17, x22, x21                                       *)
  (* 1261e8:	*) 0x93cd4da4; (*       ror	x4, x13, #19                                        *)
  (* 1261ec:	*) 0x8a3502fc; (*       bic	x28, x23, x21                                       *)
  (* 1261f0:	*) 0x93d97326; (*       ror	x6, x25, #28                                        *)
  (* 1261f4:	*) 0x8b0e0318; (*       add	x24, x24, x14                                       *)
  (* 1261f8:	*) 0xcad54a10; (*       eor	x16, x16, x21, ror #18                              *)
  (* 1261fc:	*) 0xcac020a5; (*       eor	x5, x5, x0, ror #8                                  *)
  (* 126200:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 126204:	*) 0xca1a033c; (*       eor	x28, x25, x26                                       *)
  (* 126208:	*) 0xcad5a610; (*       eor	x16, x16, x21, ror #41                              *)
  (* 12620c:	*) 0xcad988c6; (*       eor	x6, x6, x25, ror #34                                *)
  (* 126210:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 126214:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 126218:	*) 0xcacdf484; (*       eor	x4, x4, x13, ror #61                                *)
  (* 12621c:	*) 0xca401ca5; (*       eor	x5, x5, x0, lsr #7                                  *)
  (* 126220:	*) 0x8b100318; (*       add	x24, x24, x16                                       *)
  (* 126224:	*) 0xca1a0273; (*       eor	x19, x19, x26                                       *)
  (* 126228:	*) 0xcad99cd1; (*       eor	x17, x6, x25, ror #39                               *)
  (* 12622c:	*) 0xca4d1884; (*       eor	x4, x4, x13, lsr #6                                 *)
  (* 126230:	*) 0x8b0801ef; (*       add	x15, x15, x8                                        *)
  (* 126234:	*) 0x8b180294; (*       add	x20, x20, x24                                       *)
  (* 126238:	*) 0x8b130318; (*       add	x24, x24, x19                                       *)
  (* 12623c:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 126240:	*) 0x8b0501ef; (*       add	x15, x15, x5                                        *)
  (* 126244:	*) 0x8b110318; (*       add	x24, x24, x17                                       *)
  (* 126248:	*) 0x8b0401ef; (*       add	x15, x15, x4                                        *)
  (* 12624c:	*) 0xf94007e4; (*       ldr	x4, [sp, #8]                                        *)
  (* 126250:	*) 0xf90003e7; (*       str	x7, [sp]                                            *)
  (* 126254:	*) 0x93d43a90; (*       ror	x16, x20, #14                                       *)
  (* 126258:	*) 0x8b1302f7; (*       add	x23, x23, x19                                       *)
  (* 12625c:	*) 0x93c10426; (*       ror	x6, x1, #1                                          *)
  (* 126260:	*) 0x8a1402b1; (*       and	x17, x21, x20                                       *)
  (* 126264:	*) 0x93ce4dc5; (*       ror	x5, x14, #19                                        *)
  (* 126268:	*) 0x8a3402d3; (*       bic	x19, x22, x20                                       *)
  (* 12626c:	*) 0x93d87307; (*       ror	x7, x24, #28                                        *)
  (* 126270:	*) 0x8b0f02f7; (*       add	x23, x23, x15                                       *)
  (* 126274:	*) 0xcad44a10; (*       eor	x16, x16, x20, ror #18                              *)
  (* 126278:	*) 0xcac120c6; (*       eor	x6, x6, x1, ror #8                                  *)
  (* 12627c:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 126280:	*) 0xca190313; (*       eor	x19, x24, x25                                       *)
  (* 126284:	*) 0xcad4a610; (*       eor	x16, x16, x20, ror #41                              *)
  (* 126288:	*) 0xcad888e7; (*       eor	x7, x7, x24, ror #34                                *)
  (* 12628c:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 126290:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 126294:	*) 0xcacef4a5; (*       eor	x5, x5, x14, ror #61                                *)
  (* 126298:	*) 0xca411cc6; (*       eor	x6, x6, x1, lsr #7                                  *)
  (* 12629c:	*) 0x8b1002f7; (*       add	x23, x23, x16                                       *)
  (* 1262a0:	*) 0xca19039c; (*       eor	x28, x28, x25                                       *)
  (* 1262a4:	*) 0xcad89cf1; (*       eor	x17, x7, x24, ror #39                               *)
  (* 1262a8:	*) 0xca4e18a5; (*       eor	x5, x5, x14, lsr #6                                 *)
  (* 1262ac:	*) 0x8b090000; (*       add	x0, x0, x9                                          *)
  (* 1262b0:	*) 0x8b17037b; (*       add	x27, x27, x23                                       *)
  (* 1262b4:	*) 0x8b1c02f7; (*       add	x23, x23, x28                                       *)
  (* 1262b8:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 1262bc:	*) 0x8b060000; (*       add	x0, x0, x6                                          *)
  (* 1262c0:	*) 0x8b1102f7; (*       add	x23, x23, x17                                       *)
  (* 1262c4:	*) 0x8b050000; (*       add	x0, x0, x5                                          *)
  (* 1262c8:	*) 0xf9400be5; (*       ldr	x5, [sp, #16]                                       *)
  (* 1262cc:	*) 0xf90007e8; (*       str	x8, [sp, #8]                                        *)
  (* 1262d0:	*) 0x93db3b70; (*       ror	x16, x27, #14                                       *)
  (* 1262d4:	*) 0x8b1c02d6; (*       add	x22, x22, x28                                       *)
  (* 1262d8:	*) 0x93c20447; (*       ror	x7, x2, #1                                          *)
  (* 1262dc:	*) 0x8a1b0291; (*       and	x17, x20, x27                                       *)
  (* 1262e0:	*) 0x93cf4de6; (*       ror	x6, x15, #19                                        *)
  (* 1262e4:	*) 0x8a3b02bc; (*       bic	x28, x21, x27                                       *)
  (* 1262e8:	*) 0x93d772e8; (*       ror	x8, x23, #28                                        *)
  (* 1262ec:	*) 0x8b0002d6; (*       add	x22, x22, x0                                        *)
  (* 1262f0:	*) 0xcadb4a10; (*       eor	x16, x16, x27, ror #18                              *)
  (* 1262f4:	*) 0xcac220e7; (*       eor	x7, x7, x2, ror #8                                  *)
  (* 1262f8:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 1262fc:	*) 0xca1802fc; (*       eor	x28, x23, x24                                       *)
  (* 126300:	*) 0xcadba610; (*       eor	x16, x16, x27, ror #41                              *)
  (* 126304:	*) 0xcad78908; (*       eor	x8, x8, x23, ror #34                                *)
  (* 126308:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 12630c:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 126310:	*) 0xcacff4c6; (*       eor	x6, x6, x15, ror #61                                *)
  (* 126314:	*) 0xca421ce7; (*       eor	x7, x7, x2, lsr #7                                  *)
  (* 126318:	*) 0x8b1002d6; (*       add	x22, x22, x16                                       *)
  (* 12631c:	*) 0xca180273; (*       eor	x19, x19, x24                                       *)
  (* 126320:	*) 0xcad79d11; (*       eor	x17, x8, x23, ror #39                               *)
  (* 126324:	*) 0xca4f18c6; (*       eor	x6, x6, x15, lsr #6                                 *)
  (* 126328:	*) 0x8b0a0021; (*       add	x1, x1, x10                                         *)
  (* 12632c:	*) 0x8b16035a; (*       add	x26, x26, x22                                       *)
  (* 126330:	*) 0x8b1302d6; (*       add	x22, x22, x19                                       *)
  (* 126334:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 126338:	*) 0x8b070021; (*       add	x1, x1, x7                                          *)
  (* 12633c:	*) 0x8b1102d6; (*       add	x22, x22, x17                                       *)
  (* 126340:	*) 0x8b060021; (*       add	x1, x1, x6                                          *)
  (* 126344:	*) 0xf9400fe6; (*       ldr	x6, [sp, #24]                                       *)
  (* 126348:	*) 0xf9000be9; (*       str	x9, [sp, #16]                                       *)
  (* 12634c:	*) 0x93da3b50; (*       ror	x16, x26, #14                                       *)
  (* 126350:	*) 0x8b1302b5; (*       add	x21, x21, x19                                       *)
  (* 126354:	*) 0x93c30468; (*       ror	x8, x3, #1                                          *)
  (* 126358:	*) 0x8a1a0371; (*       and	x17, x27, x26                                       *)
  (* 12635c:	*) 0x93c04c07; (*       ror	x7, x0, #19                                         *)
  (* 126360:	*) 0x8a3a0293; (*       bic	x19, x20, x26                                       *)
  (* 126364:	*) 0x93d672c9; (*       ror	x9, x22, #28                                        *)
  (* 126368:	*) 0x8b0102b5; (*       add	x21, x21, x1                                        *)
  (* 12636c:	*) 0xcada4a10; (*       eor	x16, x16, x26, ror #18                              *)
  (* 126370:	*) 0xcac32108; (*       eor	x8, x8, x3, ror #8                                  *)
  (* 126374:	*) 0xaa130231; (*       orr	x17, x17, x19                                       *)
  (* 126378:	*) 0xca1702d3; (*       eor	x19, x22, x23                                       *)
  (* 12637c:	*) 0xcadaa610; (*       eor	x16, x16, x26, ror #41                              *)
  (* 126380:	*) 0xcad68929; (*       eor	x9, x9, x22, ror #34                                *)
  (* 126384:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 126388:	*) 0x8a13039c; (*       and	x28, x28, x19                                       *)
  (* 12638c:	*) 0xcac0f4e7; (*       eor	x7, x7, x0, ror #61                                 *)
  (* 126390:	*) 0xca431d08; (*       eor	x8, x8, x3, lsr #7                                  *)
  (* 126394:	*) 0x8b1002b5; (*       add	x21, x21, x16                                       *)
  (* 126398:	*) 0xca17039c; (*       eor	x28, x28, x23                                       *)
  (* 12639c:	*) 0xcad69d31; (*       eor	x17, x9, x22, ror #39                               *)
  (* 1263a0:	*) 0xca4018e7; (*       eor	x7, x7, x0, lsr #6                                  *)
  (* 1263a4:	*) 0x8b0b0042; (*       add	x2, x2, x11                                         *)
  (* 1263a8:	*) 0x8b150339; (*       add	x25, x25, x21                                       *)
  (* 1263ac:	*) 0x8b1c02b5; (*       add	x21, x21, x28                                       *)
  (* 1263b0:	*) 0xf84087dc; (*       ldr	x28, [x30], #8                                      *)
  (* 1263b4:	*) 0x8b080042; (*       add	x2, x2, x8                                          *)
  (* 1263b8:	*) 0x8b1102b5; (*       add	x21, x21, x17                                       *)
  (* 1263bc:	*) 0x8b070042; (*       add	x2, x2, x7                                          *)
  (* 1263c0:	*) 0xf94003e7; (*       ldr	x7, [sp]                                            *)
  (* 1263c4:	*) 0xf9000fea; (*       str	x10, [sp, #24]                                      *)
  (* 1263c8:	*) 0x93d93b30; (*       ror	x16, x25, #14                                       *)
  (* 1263cc:	*) 0x8b1c0294; (*       add	x20, x20, x28                                       *)
  (* 1263d0:	*) 0x93c40489; (*       ror	x9, x4, #1                                          *)
  (* 1263d4:	*) 0x8a190351; (*       and	x17, x26, x25                                       *)
  (* 1263d8:	*) 0x93c14c28; (*       ror	x8, x1, #19                                         *)
  (* 1263dc:	*) 0x8a39037c; (*       bic	x28, x27, x25                                       *)
  (* 1263e0:	*) 0x93d572aa; (*       ror	x10, x21, #28                                       *)
  (* 1263e4:	*) 0x8b020294; (*       add	x20, x20, x2                                        *)
  (* 1263e8:	*) 0xcad94a10; (*       eor	x16, x16, x25, ror #18                              *)
  (* 1263ec:	*) 0xcac42129; (*       eor	x9, x9, x4, ror #8                                  *)
  (* 1263f0:	*) 0xaa1c0231; (*       orr	x17, x17, x28                                       *)
  (* 1263f4:	*) 0xca1602bc; (*       eor	x28, x21, x22                                       *)
  (* 1263f8:	*) 0xcad9a610; (*       eor	x16, x16, x25, ror #41                              *)
  (* 1263fc:	*) 0xcad5894a; (*       eor	x10, x10, x21, ror #34                              *)
  (* 126400:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 126404:	*) 0x8a1c0273; (*       and	x19, x19, x28                                       *)
  (* 126408:	*) 0xcac1f508; (*       eor	x8, x8, x1, ror #61                                 *)
  (* 12640c:	*) 0xca441d29; (*       eor	x9, x9, x4, lsr #7                                  *)
  (* 126410:	*) 0x8b100294; (*       add	x20, x20, x16                                       *)
  (* 126414:	*) 0xca160273; (*       eor	x19, x19, x22                                       *)
  (* 126418:	*) 0xcad59d51; (*       eor	x17, x10, x21, ror #39                              *)
  (* 12641c:	*) 0xca411908; (*       eor	x8, x8, x1, lsr #6                                  *)
  (* 126420:	*) 0x8b0c0063; (*       add	x3, x3, x12                                         *)
  (* 126424:	*) 0x8b140318; (*       add	x24, x24, x20                                       *)
  (* 126428:	*) 0x8b130294; (*       add	x20, x20, x19                                       *)
  (* 12642c:	*) 0xf84087d3; (*       ldr	x19, [x30], #8                                      *)
  (* 126430:	*) 0x8b090063; (*       add	x3, x3, x9                                          *)
  (* 126434:	*) 0x8b110294; (*       add	x20, x20, x17                                       *)
  (* 126438:	*) 0x8b080063; (*       add	x3, x3, x8                                          *)
  (* 12643c:	*) 0xb5ffc213; (*       cbnz	x19, 125c7c <sha512_block_data_order+0x5fc>         *)

  (* x19 refers to 64 bits from the Ktbl. If those 64-bits are zero,
     that means we've reached the end of the 80*8-byte region
     containing the 80 SHA-512 constants. It appears that we can
     safely assume that these SHA-512 constants + at least 64-bits of
     zero-padding are laid out in the appropriate memory region. This
     suggests that the inner loop from 12643c-125c7c can be
     unrolled. *)

  (* 126440:	*) 0xa9460ba0; (*       ldp	x0, x2, [x29, #96]                                  *)
  (* 126444:	*) 0xf9403ba1; (*       ldr	x1, [x29, #112]                                     *)
  (* 126448:	*) 0xd10a23de; (*       sub	x30, x30, #0x288                                    *)
  (* 12644c:	*) 0xa9401003; (*       ldp	x3, x4, [x0]                                        *)
  (* 126450:	*) 0xa9411805; (*       ldp	x5, x6, [x0, #16]                                   *)
  (* 126454:	*) 0x9101c021; (*       add	x1, x1, #0x70                                       *)
  (* 126458:	*) 0xa9422007; (*       ldp	x7, x8, [x0, #32]                                   *)
  (* 12645c:	*) 0x8b030294; (*       add	x20, x20, x3                                        *)
  (* 126460:	*) 0xa9432809; (*       ldp	x9, x10, [x0, #48]                                  *)
  (* 126464:	*) 0x8b0402b5; (*       add	x21, x21, x4                                        *)
  (* 126468:	*) 0x8b0502d6; (*       add	x22, x22, x5                                        *)
  (* 12646c:	*) 0x8b0602f7; (*       add	x23, x23, x6                                        *)
  (* 126470:	*) 0xa9005414; (*       stp	x20, x21, [x0]                                      *)
  (* 126474:	*) 0x8b070318; (*       add	x24, x24, x7                                        *)
  (* 126478:	*) 0x8b080339; (*       add	x25, x25, x8                                        *)
  (* 12647c:	*) 0xa9015c16; (*       stp	x22, x23, [x0, #16]                                 *)
  (* 126480:	*) 0x8b09035a; (*       add	x26, x26, x9                                        *)
  (* 126484:	*) 0x8b0a037b; (*       add	x27, x27, x10                                       *)
  (* 126488:	*) 0xeb02003f; (*       cmp	x2, x1                                              *)
  (* 12648c:	*) 0xa9026418; (*       stp	x24, x25, [x0, #32]                                 *)
  (* 126490:	*) 0xa9036c1a; (*       stp	x26, x27, [x0, #48]                                 *)
  (* 126494:	*) 0x54ff91e1; (*       b.ne	1256d0 <sha512_block_data_order+0x50>  // b.any     *)

  (* This outer loop will terminate only when all of the input has
     been processed. So this is where we need an unbounded proof. *)

  (* 126498:	*) 0xa94153b3; (*       ldp	x19, x20, [x29, #16]                                *)
  (* 12649c:	*) 0x910083ff; (*       add	sp, sp, #0x20                                       *)
  (* 1264a0:	*) 0xa9425bb5; (*       ldp	x21, x22, [x29, #32]                                *)
  (* 1264a4:	*) 0xa94363b7; (*       ldp	x23, x24, [x29, #48]                                *)
  (* 1264a8:	*) 0xa9446bb9; (*       ldp	x25, x26, [x29, #64]                                *)
  (* 1264ac:	*) 0xa94573bb; (*       ldp	x27, x28, [x29, #80]                                *)
  (* 1264b0:	*) 0xa8c87bfd; (*       ldp	x29, x30, [sp], #128                                *)
  (* 1264b4:	*) 0xd65f03c0; (*       ret                                                         *)
  (* 1264b8:	*) 0xd503201f; (*       nop                                                         *)
  (* 1264bc:	*) 0xd503201f; (*       nop                                                         *)

]

(* ---------------------------------------------------------------------- *)

(* Functions to help in program state initialization *)
let digest_size = 512;;

let adrp_base = (cb 64 0x125000);;
let evp_meth_offset = (0xf4000 + 3436);;
let (evp_meth_pointer : State.mem_tracker) =
  { id = Some adrp_base; offset = (cb 64 evp_meth_offset) };;

let ktbl_offset = (0x8f000 + 768);;
let (ktbl_pointer : State.mem_tracker) =
  { id = Some adrp_base; offset = (cb 64 ktbl_offset) };;

let sha512_block_data_order_init_state
    ~(num_blocks : airExp)
    ~(ctx_base : airExp)
    ~(input_base : airExp)
    ~(input : airExp list option) (* Least significant blocks first. *)
    (message : string) : State.t =

  (assert ((Option.is_none input) || (Air.is_concrete_value num_blocks)));

  let open State in

  (* num_bytes = num_blocks * 128 *)
  let num_bytes = (bvlsh 64 num_blocks (cb 32 7)) in

  let state =
    init
      ~stack_size:(Some (cb 64 1024))
      ~stack_offset:(Some (cb 64 256))
      (* We need the stack data width to be 64 here (which,
         thankfully, works out for this program becfause that's the
         granularity of accesses to the stack). The need part comes in
         because right now NSym cannot deal with 'mixed' accesses
         (i.e., accesses involving some addresses that store regular
         data and some that store pointers). If the stack data width
         isn't 64, then NSym can't infer that no 'mixed' accesses are
         occurring, ugh. *)
      ~stack_data_width:64
      ~program_loc:0x125680
      ~program:sha512_block_data_order
      ~pc:0x125680
      "State initialized for sha512_block_data_order."
  in
  let ctx_pointer = State.make_pointer ctx_base in
  let input_pointer = State.make_pointer input_base in
  (* ktbl data should eventually be copied over from the .rodata section. *)
  let ktbl = Cryptol.toAir2Dim Autospecs.SHA512rec.lowercase_K in
  let state =
    State.add_separate_mem_region
      ~name:"ctx_region" ~aw:64 ~dw:64
      ~base_addr:ctx_base ~size:(cb 64 (digest_size / 8))
      ~alignment:8
      state
  in
  let state =
    State.add_separate_mem_region
      ~name:"input_region" ~aw:64 ~dw:64
      ~base_addr:input_base
      ~size:num_bytes
      ~alignment:8
      state
  in
  let state =
    State.add_separate_mem_region
      ~name:"ktbl_region" ~aw:64 ~dw:32
      ~base_addr:adrp_base
      (* Note: both ktbl constants and evp_meth_offset are located in
         the same memory region. *)
      ~size:(cb 64
               (max
                  (ktbl_offset + ((List.length ktbl) * 8))
                  (evp_meth_offset + 4)))
      ~alignment:4
      state
  in
  (* Making sure that w16 & 64 != 0 so that we bypass *)
  (* sha512_block_armv8.  See instructions at PC 125680-88.*)
  let w16_source_pointer = State.make_pointer adrp_base in
  let w16_source_pointer = { w16_source_pointer with offset = (cb 64 (0xf4000 + 3436)) } in
  let state = State.write_mem_data 4 w16_source_pointer (cb 32 0x3d) state in
  let state =
    upd_gprs
      [
        (* x0: pointer to context *)
        (64, 0, ctx_pointer);
        (* x1: pointer to input *)
        (64, 1, input_pointer);
        (* Number of blocks. *)
        (64, 2, (State.make_gpr_data num_blocks));
      ]
      state
  in
  let h0 = Cryptol.toAir2Dim Autospecs.SHA512rec.lowercase_H0 in
  (* Initial hash value *)
  let state = write_mem_data (8 * 8) ctx_pointer (bvapp_list h0) state in
  (* Input block *)
  let state =
    if (Option.is_none input) then
      state
    else
      let input_length_bytes = (Z.to_int (Sem.Bv.to_z (get_cb_val num_bytes))) in
      write_mem_data input_length_bytes input_pointer (Air.bvapp_list (Option.get input)) state in
  (* 80 SHA512 constants, followed by a 64'0. *)
  (*
  let state =
    write_mem_data ((1 + (List.length ktbl)) * 8)
      ktbl_pointer (bvapp_list (ktbl @ [(cb 64 0)])) state
  in
  *)
  let (_, state) =
    List.fold_left
      (fun (i, s) k ->
         (i + 8,
          (write_mem_data
             8
             {ktbl_pointer with offset = (cb 64 (ktbl_offset + i))}
             k s)))
      (0, state)
      (ktbl @ [(cb 64 0)])
  in
  (Format.fprintf Format.std_formatter "@[%s@]@.@." message;
   state);;

(* ---------------------------------------------------------------------- *)

(* Some utility functions *)

let ctx_ptr (s : State.t) : State.mem_tracker =
  (State.gpr 64 0 s)

let input_ptr (s : State.t) : State.mem_tracker =
  (State.gpr 64 1 s)

let end_of_input_ptr (s : State.t) : State.mem_tracker =
  (State.gpr 64 2 s)

(* ---------------------------------------------------------------------- *)
