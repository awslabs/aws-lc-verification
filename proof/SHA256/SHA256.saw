enable_experimental;

import "../../spec/SHA256/SHA256.cry";

m <- llvm_load_module "../../build/llvm/crypto/crypto_test.bc";


/*
 * SAW helpers
 */
let alloc_init ty v = do {
  p <- crucible_alloc ty;
  crucible_points_to p v;
  return p;
};

let alloc_init_readonly ty v = do {
  p <- crucible_alloc_readonly ty;
  crucible_points_to p v;
  return p;
};

let ptr_to_fresh n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init ty (crucible_term x);
  return (x, p);
};

let ptr_to_fresh_readonly n ty = do {
  x <- crucible_fresh_var n ty;
  p <- alloc_init_readonly ty (crucible_term x);
  return (x, p);
};


////////////////////////////////////////////////////////////////////////////////
// Specifications

/*
 * Specification of OPENSSL memory management functions
 */
let OPENSSL_malloc_spec size = do {
  crucible_execute_func [crucible_term {{ `size : [64] }}];
  ptr <- crucible_alloc_aligned 128 (llvm_array size (llvm_int 8));
  crucible_return ptr;
};

let OPENSSL_free_nonnull_spec size = do {
  ptr <- crucible_alloc (llvm_array size (llvm_int 8));
  crucible_execute_func [ptr];
};

let OPENSSL_free_null_spec = do {
  crucible_execute_func [crucible_null];
};

let OPENSSL_cleanse_spec len = do {
  ptr <- crucible_alloc (llvm_array len (llvm_int 8));
  crucible_execute_func [ptr, crucible_term {{ `len : [64] }}];
  crucible_points_to ptr (crucible_term {{ zero : [len][8] }});
};


/*
 * SHA256 defines
 */
let NID_sha256 = 672;
let SHA256_CBLOCK = 64;
let SHA256_DIGEST_LENGTH = 32;
let SHA256_CTX_SIZE = eval_int {{ (`SHA256_DIGEST_LENGTH + 4 + 4 + `SHA256_CBLOCK + 4 + 4) : [64] }};


/*
 * Specification of block function for SHA256
 */
let sha256_block_data_order_spec check_postcond = do {
  if check_postcond then do {
    return ();
  } else do {
    crucible_alloc_global "OPENSSL_ia32cap_P";
    crucible_points_to
      (crucible_global "OPENSSL_ia32cap_P")
      (crucible_term {{ [0, 0, 0, 0] : [4][32] }});
  };

  (state, state_ptr) <- ptr_to_fresh "state" (llvm_array 8 (llvm_int 32));

  (data, data_ptr) <- ptr_to_fresh_readonly "data" (llvm_array SHA256_CBLOCK (llvm_int 8));

  crucible_execute_func [state_ptr, data_ptr, crucible_term {{ 1 : [64] }}];

  if check_postcond then do {
    crucible_points_to state_ptr (crucible_term {{ SHA256Block state (split (join data)) }});
  } else do {
    state' <- crucible_fresh_var "state'" (llvm_array 8 (llvm_int 32));
    crucible_points_to state_ptr (crucible_term state');
  };
};


/*
 * Helpers for specifying the SHA256 structs
 */
let fresh_sha256_state_st name n = do {
  h <- crucible_fresh_var (str_concat name ".h") (llvm_array 8 (llvm_int 32));
  block <- crucible_fresh_var (str_concat name ".block") (llvm_array n (llvm_int 8));
  sz <- crucible_fresh_var (str_concat name ".sz") (llvm_int 64);
  return {{ { h = h, block = (block # zero) : [64][8], n = `n : [32], sz = sz } }};
};

// Specify the sha256_state_st struct
let points_to_sha256_state_st ptr state = do {
  crucible_points_to (crucible_field ptr "h") (crucible_term {{ state.h }});
  crucible_points_to (crucible_field ptr "Nl") (crucible_term {{ drop`{32} state.sz }});
  crucible_points_to (crucible_field ptr "Nh") (crucible_term {{ take`{32} state.sz }});
  crucible_points_to (crucible_field ptr "data") (crucible_term {{ state.block }});
  crucible_points_to (crucible_field ptr "num") (crucible_term {{ state.n }});
  crucible_points_to (crucible_field ptr "md_len") (crucible_term {{ 32 : [32] }});
};

// Specify the env_md_st struct for SHA256
let points_to_env_md_st ptr = do {
  crucible_points_to (crucible_field ptr "type") (crucible_term {{ `NID_sha256 : [32] }});
  crucible_points_to (crucible_field ptr "md_size") (crucible_term {{ `SHA256_DIGEST_LENGTH : [32] }});
  crucible_points_to (crucible_field ptr "flags") (crucible_term {{ 0 : [32] }});
  crucible_points_to (crucible_field ptr "init") (crucible_global "sha256_init");
  crucible_points_to (crucible_field ptr "update") (crucible_global "sha256_update");
  crucible_points_to (crucible_field ptr "final") (crucible_global "sha256_final");
  crucible_points_to (crucible_field ptr "block_size") (crucible_term {{ `SHA256_CBLOCK : [32] }});
  crucible_points_to (crucible_field ptr "ctx_size") (crucible_term {{ `SHA256_CTX_SIZE : [32] }});
};

// Specify the env_md_ctx_st struct
let points_to_env_md_ctx_st ptr digest_ptr md_data_ptr = do {
  crucible_points_to (crucible_field ptr "digest") digest_ptr;
  crucible_points_to (crucible_field ptr "md_data") md_data_ptr;
  crucible_points_to (crucible_field ptr "pctx") crucible_null;
  crucible_points_to (crucible_field ptr "pctx_ops") crucible_null;
};

// Specification of EVP_sha256_init, the initialization function for
// EVP_sha256_storage
let EVP_sha256_init_spec = do {
  crucible_alloc_global "EVP_sha256_storage";
  crucible_execute_func [];
  points_to_env_md_st (crucible_global "EVP_sha256_storage");
};


/*
 * Specifications of EVP_Digest, EVP_DigestInit, EVP_DigestUpdate, and
 * EVP_DigestFinal functions for SHA256.
 */
let EVP_DigestInit_spec = do {
  ctx_ptr <- crucible_alloc (llvm_struct "struct.env_md_ctx_st");
  type_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st type_ptr;

  crucible_execute_func [ctx_ptr, type_ptr];

  sha256_ctx_ptr <- crucible_alloc (llvm_struct "struct.sha256_state_st");
  points_to_sha256_state_st
    sha256_ctx_ptr
    {{ { h = H0, block = zero : [64][8], n = 0 : [32], sz = 0 : [64] } }};
  points_to_env_md_ctx_st ctx_ptr type_ptr sha256_ctx_ptr;
  crucible_return (crucible_term {{ 1 : [32] }});
};

let EVP_DigestUpdate_spec num len = do {
  ctx_ptr <- crucible_alloc (llvm_struct "struct.env_md_ctx_st");

  digest_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st digest_ptr;

  sha256_ctx_ptr <- crucible_alloc (llvm_struct "struct.sha256_state_st");
  sha256_ctx <- fresh_sha256_state_st "sha256_ctx" num;
  points_to_sha256_state_st sha256_ctx_ptr sha256_ctx;

  points_to_env_md_ctx_st ctx_ptr digest_ptr sha256_ctx_ptr;

  (data, data_ptr) <- ptr_to_fresh_readonly "data" (llvm_array len (llvm_int 8));

  crucible_execute_func [ctx_ptr, data_ptr, crucible_term {{ `len : [64] }}];

  points_to_sha256_state_st sha256_ctx_ptr {{ SHA256Update sha256_ctx data }};

  points_to_env_md_ctx_st ctx_ptr digest_ptr sha256_ctx_ptr;

  crucible_return (crucible_term {{ 1 : [32] }});
};

let EVP_DigestFinal_spec num = do {
  md_out_ptr <- crucible_alloc (llvm_array 32 (llvm_int 8));

  ctx_ptr <- crucible_alloc (llvm_struct "struct.env_md_ctx_st");

  digest_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st digest_ptr;

  sha256_ctx_ptr <- crucible_alloc (llvm_struct "struct.sha256_state_st");
  sha256_ctx <- fresh_sha256_state_st "sha256_ctx" num;
  points_to_sha256_state_st sha256_ctx_ptr sha256_ctx;

  points_to_env_md_ctx_st ctx_ptr digest_ptr sha256_ctx_ptr;

  crucible_execute_func [ctx_ptr, md_out_ptr, crucible_null];

  crucible_points_to md_out_ptr (crucible_term {{ split`{32} (SHA256Final sha256_ctx) }});

  crucible_return (crucible_term {{ 1 : [32] }});
};

let EVP_Digest_spec len = do {
  (data, data_ptr) <- ptr_to_fresh_readonly "data" (llvm_array len (llvm_int 8));

  md_out_ptr <- crucible_alloc (llvm_array 32 (llvm_int 8));

  type_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st type_ptr;

  crucible_execute_func
    [ data_ptr
    , crucible_term {{ `len : [64] }}
    , md_out_ptr
    , crucible_null
    , type_ptr
    , crucible_null
    ];

  crucible_points_to md_out_ptr (crucible_term {{ split`{32} (SHA256Imp data) }});

  crucible_return (crucible_term {{ 1 : [32] }});
};


////////////////////////////////////////////////////////////////////////////////
// Proof commands

OPENSSL_malloc_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_malloc"
  (OPENSSL_malloc_spec SHA256_CTX_SIZE);

OPENSSL_free_nonnull_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_free"
  (OPENSSL_free_nonnull_spec SHA256_CTX_SIZE);

OPENSSL_free_null_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_free"
  OPENSSL_free_null_spec;

OPENSSL_cleanse_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_cleanse"
  (OPENSSL_cleanse_spec SHA256_CTX_SIZE);


crucible_llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "sha256_block_data_order"
  [ ("K256", 704) // immutable constants
  ]
  true
  (sha256_block_data_order_spec false)
  (w4_unint_yices []);
sha256_block_data_order_spec <- crucible_llvm_unsafe_assume_spec m "sha256_block_data_order"
  (sha256_block_data_order_spec true);


crucible_llvm_verify m "EVP_sha256_init" [] true EVP_sha256_init_spec (w4_unint_yices []);


crucible_llvm_verify m "EVP_DigestInit"
  [ OPENSSL_malloc_ov
  , OPENSSL_free_null_ov
  ]
  true
  EVP_DigestInit_spec
  (w4_unint_yices []);

crucible_llvm_verify m "EVP_DigestUpdate"
  [sha256_block_data_order_spec]
  true
  // num=0, len=120 covers the case with one call to the block function,
  // on one block from data, and the rest of data copied in c->data
  (EVP_DigestUpdate_spec 0 120)
  (w4_unint_yices ["SHA256Block"]);
crucible_llvm_verify m "EVP_DigestUpdate"
  [sha256_block_data_order_spec]
  true
  // num=0, len=63 covers the case without any calls to the block function,
  // and data copied in c->data
  (EVP_DigestUpdate_spec 0 63)
  (w4_unint_yices ["SHA256Block"]);
crucible_llvm_verify m "EVP_DigestUpdate"
  [sha256_block_data_order_spec]
  true
  // num=63, len=121 covers the case with two calls to the block function,
  // the first one on c->data, the second one on one block from data,
  // and the rest of data copied in c->data
  (EVP_DigestUpdate_spec 63 121)
  (w4_unint_yices ["SHA256Block"]);

crucible_llvm_verify m "EVP_DigestFinal"
  [ sha256_block_data_order_spec
  , OPENSSL_free_nonnull_ov
  , OPENSSL_cleanse_ov
  ]
  true
  // num=55 covers the case with one call to the block function
  (EVP_DigestFinal_spec 55)
  (w4_unint_yices ["SHA256Block"]);
crucible_llvm_verify m "EVP_DigestFinal"
  [ sha256_block_data_order_spec
  , OPENSSL_free_nonnull_ov
  , OPENSSL_cleanse_ov
  ]
  true
  // num=56 covers the case with two calls to the block function
  (EVP_DigestFinal_spec 56)
  (w4_unint_yices ["SHA256Block"]);

crucible_llvm_verify m "EVP_Digest"
  [ sha256_block_data_order_spec
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ]
  true
  (EVP_Digest_spec 120)
  (w4_unint_yices ["SHA256Block"]);

