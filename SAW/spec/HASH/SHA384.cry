/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

module HASH::SHA384 where

import Primitive::Keyless::Hash::SHA384
import Array
import Common::ByteArray

SHAInit_Array2 : SHAState_Array -> SHAState_Array
SHAInit_Array2 state = { h = SHAInit_Array.h
                       , block = state.block
                       , n = 0
                       , sz = 0 }

SHAImp_Array2 : SHAState_Array -> ByteArray -> [64] -> [384]
SHAImp_Array2 state msg msg_len = SHAFinal_Array (SHAUpdate_Array (SHAInit_Array2 state) msg msg_len)

SHAInit_Array_zeroized : SHAState_Array
SHAInit_Array_zeroized =
  { h = zero
  , block = arrayConstant 0
  , n = 0
  , sz = 0
  }

SHAInit_zeroized : SHAState
SHAInit_zeroized =
  { h = zero
  , block = zero
  , n = 0
  , sz = 0
  }

SHAState_eq : SHAState -> SHAState -> Bool
SHAState_eq state1 state2 =
     state1.block == state2.block
  /\ state1.h == state2.h
  /\ state1.n == state2.n
  /\ state1.sz == state2.sz

SHAState_Array_eq : SHAState_Array -> SHAState_Array -> Bool
SHAState_Array_eq state1 state2 =
     (arrayRangeEqual state1.block 0 state2.block 0 128)
  /\ state1.h == state2.h
  /\ state1.n == state2.n
  /\ state1.sz == state2.sz
