/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

module AES_GCM_Implementation where

import Primitive::Symmetric::Cipher::Block::AES
import Primitive::Symmetric::Cipher::Authenticated::AES_256_GCM
import AES_GCM


/*
 * GCM polyval mul/red implementations
 */
gcm_polyval_mul_pmult3 : {n} (fin n) => [2 * (1 + n)] -> [2 * (1 + n)] -> [4 * (1 + n)]
gcm_polyval_mul_pmult3 X Y = r3 # (r2 ^ r1 ^ r3 ^ m1) # (r1 ^ r0 ^ r2 ^ m0) # r0
  where
    [X_hi, X_lo] = split X
    [Y_hi, Y_lo] = split Y
    [r1, r0] = split ((0 : [1]) # (pmult X_lo Y_lo))
    [r3, r2] = split ((0 : [1]) # (pmult X_hi Y_hi))
    [m1, m0] = split ((0 : [1]) # (pmult (X_lo ^ X_hi) (Y_hi ^ Y_lo)))

gcm_polyval_mul_pmult4 : {n} (fin n) => [2 * (1 + n)] -> [2 * (1 + n)] -> [4 * (1 + n)]
gcm_polyval_mul_pmult4 X Y = (hi ^ (0 : [1 + n]) # (hi_bits (m0 ^ m1))) # (lo ^ ((lo_bits (m0 ^ m1)) # (0 : [1 + n])))
  where
    [X_hi, X_lo] = split X
    [Y_hi, Y_lo] = split Y
    lo = (0 : [1]) # (pmult X_lo Y_lo)
    hi = (0 : [1]) # (pmult X_hi Y_hi)
    m0 = (0 : [1]) # (pmult X_lo Y_hi)
    m1 = (0 : [1]) # (pmult X_hi Y_lo)

gcm_polyval_red_pmult : [256] -> [128]
gcm_polyval_red_pmult (x1 # x0) = (gcm_polyval_red_half_pmult (gcm_polyval_red_half_pmult x0)) ^ x1

gcm_polyval_red_half_pmult : [128] -> [128]
gcm_polyval_red_half_pmult X = ((0 : [1]) # (pmult <| x^^63 + x^^62 + x^^57 |> x0)) ^ (x0 # x1)
  where
    [x1, x0] = split X

gcm_polyval_avx : [128] -> [128] -> [128]
gcm_polyval_avx H X = x30
  where
    [H_hi, H_lo] = split H
    [X_hi, X_lo] = split X
    x17 = (0 : [1]) # (pmult H_lo X_lo)
    x18 = ((0 : [1]) # (pmult H_hi X_hi)) ^ x17
    x19 = x18 ^ ((0 : [1]) # (pmult (H_lo ^ H_hi) (X_lo ^ X_hi)))
    x20 = (lo_bits x19) # (0 : [64])
    x21 = x17 ^ x20
    x22 = hi_bits x21
    x23 = lo_bits x21
    x25 = (take`{8} ((x23 << 57) ^ (x23 << 62) ^ (x23 << 63))) # (0 : [120])
    x26 = x21 ^ x25
    x27 = (hi_bits x26) >> 1
    x28 = (lo_bits x26) >> 1
    x29 = (x26 ^ (x27 # x28)) ^ ((x27 >> 5) # (x28 >> 5))
    x30 = ((((x18 ^ x20) ^ ((0 : [64]) # (hi_bits x19))) ^ x25) ^ ((0 : [64]) # (take`{8} ((x22 << 57) ^ (x22 << 62) ^ (x22 << 63))) # (0 : [56]))) ^ (((hi_bits x29) >> 1) # ((lo_bits x29) >> 1))


/*
 * aesni_gcm_cipher Cryptol implementation
 */
aesni_gcm_cipher : {n} (fin n) => [32] -> AES_GCM_Ctx -> [(1 + n) * 6 * 16][8] -> [16][8]
aesni_gcm_cipher enc ctx in = ctx''.Xi
  where
    enc_blks = if enc ! 0
      then split (aesni_gcm_ctr32_encrypt_block ctx in)
      else split (map join (split in))
    ctx' = aesni_gcm_cipher_block6 enc False ctx (enc_blks @ 0)
    ctx'' = foldl (aesni_gcm_cipher_block6 enc (enc ! 0)) ctx' (drop`{1} enc_blks)

aesni_gcm_ctr32_encrypt_block : {n} (fin n) => AES_GCM_Ctx -> [n * 16][8] -> [n][16 * 8]
aesni_gcm_ctr32_encrypt_block ctx in = out
  where
    ctr = drop ((ctx.len / 16) + 1)
    in' = split in
    out = [ swap8 ((join (reverse blk)) ^ (join (reverse (EKi ctx (ctr + i))))) | blk <- in' | i <- [0 ...] ]

aesni_gcm_cipher_block6 : [32] -> Bit -> AES_GCM_Ctx -> [6][128] -> AES_GCM_Ctx
aesni_gcm_cipher_block6 enc karatsuba ctx blks = ctx'
  where
    gcm_polyval_mul_fun = if karatsuba
      then gcm_polyval_mul_pmult3
      else gcm_polyval_mul_pmult4
    Htable = get_Htable ctx.key
    Xi = join ctx.Xi
    Xi_0 = gcm_polyval_mul_fun (Htable @ 0) (blks @ 5)
    Xi_1 = gcm_polyval_mul_fun (Htable @ 1) (blks @ 4)
    Xi_2 = gcm_polyval_mul_fun (Htable @ 3) (blks @ 3)
    Xi_3 = gcm_polyval_mul_fun (Htable @ 4) (blks @ 2)
    Xi_4 = gcm_polyval_mul_fun (Htable @ 6) (blks @ 1)
    Xi_5 = gcm_polyval_mul_fun (Htable @ 7) (Xi ^ (blks @ 0))
    Xi_6 = gcm_polyval_red_pmult (Xi_0 ^ Xi_1 ^ Xi_2 ^ Xi_3 ^ Xi_4 ^ Xi_5)
    Xi' = split Xi_6
    ctx' =
      { key = ctx.key
      , iv = ctx.iv
      , Xi = Xi'
      , len = ctx.len + 6 * 16
      }

gcm_ghash_avx : {n, m} (fin n, 1 <= m, m <= 8) => [128] -> [16][8] -> [(n * 8 + m) * 16][8] -> [16][8]
gcm_ghash_avx H Xi in = Xi''
  where
    bulk # tl = in
    Xi' = foldl (gcm_ghash_avx_8`{8} H) Xi (split`{n} bulk)
    Xi'' = gcm_ghash_avx_8`{m} H Xi' tl

gcm_ghash_avx_8 : {n} (1 <= n, n <= 8) => [128] -> [16][8] -> [n * 16][8] -> [16][8]
gcm_ghash_avx_8 H Xi in = Xi''
  where
    [H0, H1, _, H2, H3, _, H4, H5, _, H6, H7, _] = gcm_init_Htable H
    Htable = [H0, H1, H2, H3, H4, H5, H6, H7]
    Xi' = join Xi
    blks = map join (split in)
    Xi_0 = gcm_polyval_mul_pmult3 (Htable @ (`n - 1)) (Xi' ^ (blks @ 0))
    Xi_1 = gcm_polyval_mul_pmult3 (Htable @ (`n - 2)) (blks @ 1)
    Xi_2 = gcm_polyval_mul_pmult3 (Htable @ (`n - 3)) (blks @ 2)
    Xi_3 = gcm_polyval_mul_pmult3 (Htable @ (`n - 4)) (blks @ 3)
    Xi_4 = gcm_polyval_mul_pmult3 (Htable @ (`n - 5)) (blks @ 4)
    Xi_5 = gcm_polyval_mul_pmult3 (Htable @ (`n - 6)) (blks @ 5)
    Xi_6 = gcm_polyval_mul_pmult3 (Htable @ (`n - 7)) (blks @ 6)
    Xi_7 = gcm_polyval_mul_pmult3 (Htable @ (`n - 8)) (blks @ 7)
    T1 = if `n == 8
      then Xi_7 ^ Xi_6 ^ Xi_5 ^ Xi_4 ^ Xi_3 ^ Xi_2 ^ Xi_1 ^ Xi_0
      else if `n == 7
        then Xi_6 ^ Xi_5 ^ Xi_4 ^ Xi_3 ^ Xi_2 ^ Xi_1 ^ Xi_0
        else if `n == 6
          then Xi_5 ^ Xi_4 ^ Xi_3 ^ Xi_2 ^ Xi_1 ^ Xi_0
          else if `n == 5
            then Xi_4 ^ Xi_3 ^ Xi_2 ^ Xi_1 ^ Xi_0
            else if `n == 4
              then Xi_3 ^ Xi_2 ^ Xi_1 ^ Xi_0
              else if `n == 3
                then Xi_2 ^ Xi_1 ^ Xi_0
                else if `n == 2
                  then Xi_1 ^ Xi_0
                  else Xi_0
    Xi_n = gcm_polyval_red_pmult T1
    Xi'' = split Xi_n

