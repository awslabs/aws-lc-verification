/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

/*
This file contains cryptol specs that closely resemble an implementation.
They are only used to produce rewrite rules that are used to simplfy
goals produced by SAW. For example, the actual spec uses function f, 
but the code in the goal is an equivelent (but more complicated) function 
f_impl. In SAW, we will prove f == f_impl, and use this rewrite rule to 
replace f_impl with f in the goal. 
*/

import Common::EC::EC_P384
import EC_primitives
import EC_P384_5

type wsize = 5

/* The felem_opp_wrapper introduces an extra input to felem_opp
 to stop the concrete evaluation of felem_opp when applied onto concrete values.
*/
felem_opp_wrapper : () -> felem -> felem
felem_opp_wrapper _ n = felem_opp n

/*
testForDouble_ct is a constant time form of testForDouble, which 
is used to test whether two points are equal. 
*/
testForDouble_ct : felem -> felem -> felem -> felem -> Bit
testForDouble_ct p1z p2z h r = res
  where
    z1nz = (felem_nz p1z)
    z2nz = (felem_nz p2z)
    xneq = (felem_nz h)
    yneq = (felem_nz r)

    res = ((constant_time_is_zero_w (xneq || yneq)) &&
            (~(constant_time_is_zero_w z1nz)) &&
            (~(constant_time_is_zero_w z2nz))
            ) != zero


/*
mul_scalar_rwnaf_ct is the constant time rwnaf scalar/point multiplication function and mul_scalar_rwnaf_loop_body_ct is the loop body. mul_scalar_rwnaf_ct
is equivalent to mul_scalar_rwnaf.
*/
mul_scalar_rwnaf_loop_body_ct :
  scalar -> [16] -> [64] -> ([16], [16])

mul_scalar_rwnaf_loop_body_ct s window i = (d, window')
  where
    two_to_wsize = (1 << `wsize)
    wsize_mask = (1 << (`wsize + 1)) - 1
    d = ((window && (wsize_mask:[16])) - (two_to_wsize:[16]))
    window_0 = drop (((sign_extend_16_32 window) - (sign_extend_16_32 d) >> (`wsize:[32]))) 
    i_wsize = (drop`{32} (i&&0x00000000000000FF)) * (`wsize:[32])
    window_5 = foldl f window_0 [1..5]
    f x j = x + ((drop (scalar_get_bit s (i_wsize + ((`wsize:[32]) + j)))) << j)
    window' = window_5

mul_scalar_rwnaf_ct : scalar -> [(bit_length / wsize) + 1]point_id
mul_scalar_rwnaf_ct in = out'
  where
    wsize_mask = (1 << (`wsize + 1)) - 1
    window = zero # (((drop`{bit_length-8} in) && (drop`{8} (wsize_mask:[16]))) || 1)
    f (d, w) = mul_scalar_rwnaf_loop_body_ct in w
    outls = scanl f (0, window) [0 .. ((bit_length/wsize) - 1)]
    window' = (outls!0).1
    out' = (drop`{1} ((map (\p -> p.0) outls)#[window']))

/*
  Note that the breakpoint feature requires that the specification be written
  as a recursive function. However, we need the all functions to be written
  in folds or scans to be able to translate into Coq.
  Therefore we define another version of point_mul_public_breakpoint using foldl.
  We prove the equivalence between the recursive version and the foldl version.
  */
point_mul_public_breakpoint : [bit_length+1][digit_width] -> [bit_length+1][digit_width]
                          ->  [tsize]point -> [16] -> point -> [32] -> JacobianBVPoint
point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i =
  if i <$ 0
  then {X = felem_to_bytes (res@0), Y = felem_to_bytes (res@1), Z = felem_to_bytes (res@2)}
  else point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf2 res2 (i-1)
  where
    (res_is_inf2, res2) =
      double_add_public p_pre_comp (res_is_inf, res) (lookup p_wnaf i, lookup g_wnaf i)

/*
  Say we want to expand just the left-hand side of the following term:
    (point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i).X == A
  where A could also contain calls to `point_mul_public_breakpoint`
  We define a function `point_mul_public_breakpoint_unfold` that has the exact same body
  as `point_mul_public_breakpoint`.
  Then we use this lemma to replace the call with `point_mul_public_breakpoint_unfold`.
  Now we can safely use unfolding hint to expand just that call.
  */
point_mul_public_breakpoint_unfold : [bit_length+1][digit_width] -> [bit_length+1][digit_width]
                                  -> [tsize]point -> [16] -> point -> [32] -> JacobianBVPoint
point_mul_public_breakpoint_unfold p_wnaf g_wnaf p_pre_comp res_is_inf res i =
  if i <$ 0
  then {X = felem_to_bytes (res@0), Y = felem_to_bytes (res@1), Z = felem_to_bytes (res@2)}
  else point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf2 res2 (i-1)
  where
    (res_is_inf2, res2) =
      double_add_public p_pre_comp (res_is_inf, res) (lookup p_wnaf i, lookup g_wnaf i)
