/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

module EC_mul where

import Common::EC::EC_P384
import EC_primitives


type wsize_max = 7

parameter
  type wsize : #

  type constraint (wsize > 0, wsize <= wsize_max)
  type constraint (bit_length%wsize!=0, bit_length/wsize>1)


type tsize = 2^^(wsize - 1)

type point_id = [16]


pre_comp_table : point -> [tsize]point
pre_comp_table p = scanl f p [1..(tsize-1)]
  where
    twoP = (point_double p)
    f z i  = (point_add 0 twoP z)

mul_scalar_rwnaf_odd_loop_body : 
  scalar -> ([16], scalar)
mul_scalar_rwnaf_odd_loop_body s = (drop d, s')
  where
    two_to_wsize = (1 << `wsize)
    d = ((s % (2 * two_to_wsize)) - two_to_wsize)
    s' = (s - d) >> `wsize

mul_scalar_rwnaf_odd : scalar -> [(bit_length / wsize) + 1]point_id
mul_scalar_rwnaf_odd in = out'
  where
    f (d, s) i = mul_scalar_rwnaf_odd_loop_body s
    outls = scanl f (mul_scalar_rwnaf_odd_loop_body in) [0 .. ((bit_length/wsize) - 2)]
    window' = (drop (outls!0).1)
    out' = ((map (\p -> p.0) outls)#[window'])

mul_scalar_rwnaf : scalar -> [(bit_length / wsize) + 1]point_id 
mul_scalar_rwnaf in = mul_scalar_rwnaf_odd (in || 1)

select_point_loop_body : [64] -> point -> [64] -> point -> point
select_point_loop_body idx acc i p = [x, y, z]
  where
    mismatch = i ^ idx
    x = (felem_cmovznz mismatch (p@0) (acc@0))
    y = (felem_cmovznz mismatch (p@1) (acc@1))
    z = (felem_cmovznz mismatch (p@2) (acc@2))

select_point : [64] -> [tsize]point -> point
select_point idx t = foldl f def (zip [0..(tsize-1)] t)
    where
      def = [zero_felem, zero_felem, zero_felem]
      f acc (i, p) = select_point_loop_body idx acc i p

point_id_to_limb : point_id -> limb
point_id_to_limb x = (0:[48]) # (x)

double_add_body : [tsize]point -> point -> point_id -> point
double_add_body t p d = res
  where
    doubled = foldl (\x -> \y -> point_double x) p [0 .. (wsize - 1)]
    // TODO: calculate the expression below from wsize
    is_neg = (d >> 15)
    // is_neg = (d >>$ 7) & 1
    neg_is_neg = (d >>$ 15)
    // neg_is_neg = - is_neg
    abs_d = is_neg + (d ^ neg_is_neg)
    idx = abs_d >>$ 1
    tmp = (select_point (sign_extend_16_64 idx) t)
    ftmp = felem_opp (tmp@1)
    r = [tmp@0, (felem_cmovznz (point_id_to_limb is_neg) (tmp@1) ftmp), (tmp@2)]
    res = point_add 0 doubled r

point_mul : point -> scalar -> point
point_mul p s = r
  where
    pre_comp = pre_comp_table p
    rnaf = mul_scalar_rwnaf s
    idx = ((rnaf@(`bit_length/`wsize)) >>$ 1)
    acc = (select_point (sign_extend_16_64 idx) pre_comp)
    res = foldl (double_add_body pre_comp) acc (drop `{1} (reverse rnaf))
    r = conditional_subtract_if_even res s (pre_comp@0)

point_mul_generic : JacobianBVPoint -> scalar -> JacobianBVPoint
point_mul_generic p s = r_gen
  where
    px = felem_from_bytes p.X
    py = felem_from_bytes p.Y
    pz = felem_from_bytes p.Z
    r = (point_mul [px, py, pz] s)
    r_gen = {X = felem_to_bytes (r@0), Y = felem_to_bytes (r@1), Z = felem_to_bytes (r@2)}


// ---------------------------------------------------------------
// point_mul_base

type ngroups = 4
type csize = ngroups*wsize

type subtable_size = 2^^(wsize-1)
type table_size = (bit_length+csize-1)/csize

type nwindows = (bit_length+wsize-1)/wsize

p384_felem_one : felem
p384_felem_one = [0xffffffff00000001, 0x00000000ffffffff,
                  0x0000000000000001, 0x0000000000000000,
                  0x0000000000000000, 0x0000000000000000]

parameter
  p384_g_pre_comp : [table_size][subtable_size][2]felem

// The following definition is almost the same as the one in EC_primitives.cry
// TODO: Generalize the one in EC_primitives.cry when we start working on the Coq part
conditional_subtract_if_even_mixed : point -> scalar -> point -> point
conditional_subtract_if_even_mixed p1 t p2 = r where
  t_limb = (byte_to_limb ((drop`{bit_length-8} t) && 1))
  tmp1 = [p2@0, (felem_opp (p2@1)), p2@2]
  tmp2 = point_add 1 p1 tmp1
  r = [(felem_cmovznz t_limb (tmp2@0) (p1@0)),
       (felem_cmovznz t_limb (tmp2@1) (p1@1)),
       (felem_cmovznz t_limb (tmp2@2) (p1@2))]

select_point_affine_loop_body : [64] -> [2]felem -> [64] -> [2]felem -> [2]felem
select_point_affine_loop_body idx acc i p = [x, y]
  where
    mismatch = i ^ idx
    x = felem_cmovznz mismatch (p@0) (acc@0)
    y = felem_cmovznz mismatch (p@1) (acc@1)

// select_point_affine
// Note: using [64] for idx instead of [16] in the C code
select_point_affine : [64] -> [subtable_size][2]felem -> [2]felem
select_point_affine idx subtable = foldl f init (zip [0..(subtable_size-1)] subtable)
  where
    init = [zero_felem, zero_felem]
    f acc (i, p) = select_point_affine_loop_body idx acc i p

// select point and add it onto accumulator
add_base : [nwindows]point_id  -> point -> [64] -> point
add_base rnaf p j = res
  where
    d = rnaf@j
    // is_neg = (d < 0) ? 1 : 0
    is_neg = (d >> 15)
    // neg_is_neg = -is_neg
    neg_is_neg = (d >>$ 15)
    // abs_d = abs(d)
    abs_d = is_neg + (d ^ neg_is_neg)
    idx = abs_d >>$ 1
    tmp = select_point_affine (sign_extend_16_64 idx) (p384_g_pre_comp@(j/4))
    ftmp = felem_opp (tmp@1)
    r = [tmp@0, (felem_cmovznz (point_id_to_limb is_neg) (tmp@1) ftmp), p384_felem_one]
    res = point_add 1 p r

// double accumulator and add all points in the ith group
double_add_base : [nwindows]point_id  -> point -> [64] -> point
double_add_base rnaf p i = res
  where
    doubled = if i == ((`(ngroups) - 1):[64])
              then p
              else foldl (\x -> \y -> point_double x) p [0 .. (wsize-1)]
    // In Cryptol, only type variables can be in the expression of sequence bounds.
    // Therefore, i as a value variable, could not be used in sequence bounds.
    // We enumerate all possible bounds to accomodate this problem.
    res = (if i == ((`(ngroups) - 1):[64])
          then foldl (add_base rnaf) doubled [(nwindows-4)/4*4+3, ((nwindows-4)/4*4-1) .. 0 : [64]]
          else if i == ((`(ngroups) - 2):[64])
          then foldl (add_base rnaf) doubled [(nwindows-3)/4*4+2, ((nwindows-3)/4*4-2) .. 0 : [64]]
          else if i == ((`(ngroups) - 3):[64])
          then foldl (add_base rnaf) doubled [(nwindows-2)/4*4+1, ((nwindows-2)/4*4-3) .. 0 : [64]]
          else if i == ((`(ngroups) - 4):[64])
          then foldl (add_base rnaf) doubled [(nwindows-1)/4*4, ((nwindows-1)/4*4-4) .. 0 : [64]]
          else error "Unreachable branch reached.")

// point_mul_base
point_mul_base : scalar -> point
point_mul_base s = r
  where
    pre_comp = p384_g_pre_comp
    rnaf = mul_scalar_rwnaf s
    acc = zero : [3]felem
    res = foldl (double_add_base rnaf) acc [(ngroups - 1), (ngroups - 2) .. 0]
    g = ((p384_g_pre_comp@0)@0) # [p384_felem_one]
    r = conditional_subtract_if_even_mixed res s g

// point_mul_base_generic
point_mul_base_generic : scalar -> JacobianBVPoint
point_mul_base_generic s = r_gen
  where
    r = point_mul_base s
    r_gen = {X = felem_to_bytes (r@0), Y = felem_to_bytes (r@1), Z = felem_to_bytes (r@2)}


// ---------------------------------------------------------------
// point_mul_public

type digit_width = 8

bn_is_bit_set_words : scalar -> [64] -> [32]
bn_is_bit_set_words s ind = (drop (s >> ind)) && (1 : [32])

ec_compute_wNAF_loop_body : [32] -> [32] -> [32] -> scalar -> ([digit_width], [32])
                         -> [64] -> ([digit_width], [32])
ec_compute_wNAF_loop_body bit next_bit mask s (digit, window_val) i =
  (drop`{back=digit_width} di, (wv >>$ 1) + ((bn_is_bit_set_words s (i+`wsize+1)) << `wsize))
  where
    (di, wv) = (if (window_val && 1) != zero
                then ((d, window_val-d)
                      where d = (if (window_val && bit) != zero
                                 then (if i + `wsize + 1 >= `bit_length
                                       then window_val && (mask >> 1)
                                       else window_val - next_bit)
                                 else window_val))
                else (zero, window_val))

// Given a 384 bit scalar, ec_compute_wNAF produces a 385-digit representation of the scalar.
// Each digit is either zero or an odd integer in range [-(2^^w-1), (2^^w-1)].
// It is guaranteed that there are at least w zeros between any two non-zero digits.
// Therefore the density of non-zeros must at least be 1/(w+1).
// See: http://www.bmoeller.de/pdf/TI-01-08.multiexp.pdf Section 3.2
ec_compute_wNAF : scalar -> [bit_length+1][digit_width]
ec_compute_wNAF s = r
  where
    bit = (1 << `wsize):[32]
    next_bit = (bit << 1):[32]
    mask = (next_bit - 1):[32]
    window_val = (drop`{back=32} s) && mask
    acc = ((zero:[digit_width]), window_val)
    f (ds, wv) i = ec_compute_wNAF_loop_body bit next_bit mask s (ds, wv) i
    resl = scanl f acc [0 .. bit_length]
    r = (map (\p -> p.0) (drop`{1} resl))

add_table : [32] -> [tsize]point -> [16] -> point -> Bit -> ([16], point)
add_table d ptable res_is_inf res isg =
  if res_is_inf == 0 then (res_is_inf, point_add isg res p) else (zero, ptmp)
  where
    is_neg = drop`{16} (if d <$ zero then 1:[32] else 0)
    idx = drop`{16} (if (zero#is_neg) == (0:[32]) then (d-1) >>$ 1 else (-d-1) >>$ 1)
    idx_extend = sign_extend_16_64 idx
    tmp = p384_g_pre_comp@0@idx_extend
    ptmp = if isg then [tmp@0, tmp@1, p384_felem_one] else lookup_table ptable idx_extend
    ftmp = if is_neg == 0 then ptmp@1 else felem_opp (ptmp@1)
    p = [ptmp@0, ftmp, ptmp@2]

// double_add loop body for point_mul_public
double_add_public : [tsize]point -> ([16], point) -> ([digit_width], [digit_width]) -> ([16], point)
double_add_public p_table (res_is_inf, res) (dp, dg) = (res_is_inf3, p3)
  where
    dp_extend = sign_extend_8_32 dp
    dg_extend = sign_extend_8_32 dg
    p1 = if res_is_inf == 0 then point_double res else res
    (res_is_inf2, p2) =
      if dp_extend == 0 then (res_is_inf, p1) else add_table dp_extend p_table res_is_inf p1 0
    (res_is_inf3, p3) =
      if dg_extend == 0 then (res_is_inf2, p2) else add_table dg_extend p_table res_is_inf2 p2 1

point_mul_public_breakpoint_foldl : [bit_length+1][digit_width] -> [bit_length+1][digit_width] -> [tsize]point -> [16] -> point -> [32] -> point
point_mul_public_breakpoint_foldl p_wnaf g_wnaf p_pre_comp res_is_inf res i =
  if i <$ 0 then res else r
  where
    (_, r) = foldl (double_add_public p_pre_comp) (res_is_inf, res) (zip (reverse p_wnaf) (reverse g_wnaf))

point_mul_public_breakpoint_foldl_top : [bit_length+1][digit_width] -> [bit_length+1][digit_width] -> [tsize]point -> [16] -> point -> [32] -> JacobianBVPoint
point_mul_public_breakpoint_foldl_top p_wnaf g_wnaf p_pre_comp res_is_inf res i = r_gen
  where
    r = point_mul_public_breakpoint_foldl p_wnaf g_wnaf p_pre_comp res_is_inf res i
    r_gen = {X = felem_to_bytes (r@0), Y = felem_to_bytes (r@1), Z = felem_to_bytes (r@2)}

point_mul_public_generic : scalar -> JacobianBVPoint -> scalar -> JacobianBVPoint
point_mul_public_generic g_scalar p p_scalar = r
  where
    px = felem_from_bytes p.X
    py = felem_from_bytes p.Y
    pz = felem_from_bytes p.Z
    p2 = [px, py, pz]
    p_pre_comp = pre_comp_table p2
    p_wnaf = ec_compute_wNAF p_scalar
    g_wnaf = ec_compute_wNAF g_scalar
    r = point_mul_public_breakpoint_foldl_top p_wnaf g_wnaf p_pre_comp 1 [zero, zero, zero] 384

ec_compute_wNAF_in_range : [bit_length+1][digit_width] -> Bit
ec_compute_wNAF_in_range digits = foldl f True [0 .. bit_length]
  where
    f acc i = acc && (digits@i >=$ (-31:[8])) && (digits@i <=$ 31)

lookup_fn : [bit_length+1][digit_width] -> [32] -> [digit_width] -> [64] -> [digit_width]
lookup_fn wnaf i acc j = if sign_extend_32_64 i == j then (wnaf@j) else acc

lookup : [bit_length+1][digit_width] -> [32] -> [digit_width]
lookup wnaf i = foldl (lookup_fn wnaf i) (wnaf@384) [383, 382 .. 0]

lookup_table_fn : [tsize]point -> [64] -> point -> [64] -> point
lookup_table_fn p_table i acc j = if i == j then (p_table@j) else acc

lookup_table : [tsize]point -> [64] -> point
lookup_table p_table i = foldl (lookup_table_fn p_table i) (p_table@15) [14, 13 .. 0]
