/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

module EC_primitives where

import Common::EC::EC_P384

type bit_length = 384

type limb_size = 64
type nlimbs = bit_length / 64

type limb = [limb_size]
type felem = [nlimbs][64]

type scalar = [bit_length]

type point = [3]felem

zero_felem: felem
zero_felem = repeat 0

primitive felem_zero : felem

primitive felem_one : felem

primitive felem_sqr : felem -> felem

primitive felem_mul : felem -> felem -> felem

primitive felem_add : felem -> felem -> felem

primitive felem_sub : felem -> felem -> felem

primitive felem_opp : felem -> felem

constant_time_is_zero_w : limb -> limb
constant_time_is_zero_w x = if (x == zero) then 0xFFFFFFFFFFFFFFFF else 0

felem_cmovznz : limb -> felem -> felem -> felem
felem_cmovznz t f1 f2 = if (t == zero) then f1 else f2

felem_nz : felem -> limb
felem_nz f = foldl (||) 0 f

point_double : point -> point
point_double p = p'
  where
    x = p@0
    y = p@1
    z = p@2

    delta = (felem_sqr z)
    gamma = (felem_sqr y)
    beta = (felem_mul x gamma)

    xminusdelta = (felem_sub x delta)
    xplusdelta = (felem_add x delta)
    twoxplusdelta = (felem_add xplusdelta xplusdelta)
    threexplusdelta = (felem_add xplusdelta twoxplusdelta)
    alpha = (felem_mul xminusdelta threexplusdelta)

    twobeta = (felem_add beta beta)
    fourbeta = (felem_add twobeta twobeta)
    eightbeta = (felem_add fourbeta fourbeta)
    x' = (felem_sub (felem_sqr alpha) eightbeta)

    yplusz = (felem_add y z)
    ypluszsquared = (felem_sqr yplusz)
    z' = (felem_sub (felem_sub ypluszsquared gamma) delta)

    fourgammasquared = (felem_sqr (felem_add gamma gamma))
    eightgammasquared = (felem_add fourgammasquared fourgammasquared)
    y' = (felem_sub (felem_mul alpha (felem_sub fourbeta x')) eightgammasquared)

    p' = [x', y', z']


testForDouble : felem -> felem -> felem -> felem -> Bit
testForDouble p1z p2z h r = ((h==zero) && (r==zero) && (p1z != zero) && (p2z != zero))

/* 
point_add takes two points p1 p2 and returns p1 + p2. The point p1 can either be
in Jacobian or affine coordinates, and p2 is always in Jacobian coordinates.
When p1 is affine, this is "mixed" arithmetic indicated by setting the first
parameter to true. In this case, the third coordinate of p1 will be ignored. 
*/
point_add : Bit -> point -> point -> point
point_add mixed p1 p2 = p
  where
    x1 = p1@0
    y1 = p1@1
    z1 = p1@2

    x2 = p2@0
    y2 = p2@1
    z2 = p2@2

    z1z1 = (felem_sqr z1)

    // Jacobian arithmetic
    z2z2 = (felem_sqr z2)
    u1_jac = (felem_mul x1 z2z2)
    two_z1z2_jac = (felem_sub (felem_sub (felem_sqr (felem_add z1 z2)) z1z1) z2z2)
    s1_jac = (felem_mul (felem_mul z2 z2z2) y1)

    // mixed arithmetic
    u1_mixed = x1
    two_z1z2_mixed = (felem_add z1 z1)
    s1_mixed = y1

    u1 = if mixed then u1_mixed else u1_jac
    two_z1z2 = if mixed then two_z1z2_mixed else two_z1z2_jac
    s1 = if mixed then s1_mixed else s1_jac

    u2 = (felem_mul x2 z1z1)
    h = (felem_sub u2 u1)

    z_out = (felem_mul h two_z1z2)
    z1z1z1 = (felem_mul z1 z1z1)
    s2 = (felem_mul y2 z1z1z1)
    r = (felem_add (felem_sub s2 s1) (felem_sub s2 s1))


    is_nontrivial_double = (testForDouble z1 z2 h r)

    i = (felem_sqr (felem_add h h))
    j = (felem_mul h i)
    v = (felem_mul u1 i)

    x_out = (felem_sub (felem_sub (felem_sub (felem_sqr r) j) v) v)
    y_out = (felem_sub (felem_sub (felem_mul (felem_sub v x_out) r) (felem_mul s1 j)) (felem_mul s1 j))

    z1nz = (felem_nz z1)
    z2nz = (felem_nz z2)
    x3 = (felem_cmovznz z2nz x1 (felem_cmovznz z1nz x2 x_out))
    y3 = (felem_cmovznz z2nz y1 (felem_cmovznz z1nz y2 y_out))
    z3 = (felem_cmovznz z2nz z1 (felem_cmovznz z1nz z2 z_out))

    p = if is_nontrivial_double then (point_double p1) else [x3, y3, z3]

scalar_get_bit : scalar -> [32] -> [64]
scalar_get_bit s i = (drop (s >> i)) && (1 : [64])

sign_extend_16_64 : [16] -> [64]
sign_extend_16_64 x = (if (x@0) then (~zero:[48]) else (zero:[48])) # x

sign_extend_32_64 : [32] -> [64]
sign_extend_32_64 x = (if (x@0) then (~zero:[32]) else (zero:[32])) # x

sign_extend_16_32 : [16] -> [32]
sign_extend_16_32 x = (if (x@0) then (~zero:[16]) else (zero:[16])) # x

sign_extend_8_16 : [8] -> [16]
sign_extend_8_16 x = (if (x@0) then (~zero:[8]) else (zero:[8])) # x

sign_extend_8_32 : [8] -> [32]
sign_extend_8_32 x = (if (x@0) then (~zero:[24]) else (zero:[24])) # x

sign_extend : {a, b} (fin b) => [a] -> [a+b]
sign_extend x = (if (x@0) then (~zero:[b]) else (zero:[b])) # x


byte_to_limb : [8] -> limb
byte_to_limb x = (0:[56]) # (x)

conditional_subtract_if_even : point -> scalar -> point -> point
conditional_subtract_if_even p1 t p2 = r where
  t_limb = (byte_to_limb ((drop`{bit_length-8} t) && 1))
  tmp1 = [p2@0, (felem_opp (p2@1)), p2@2]
  tmp2 = point_add 0 p1 tmp1
  r = [(felem_cmovznz t_limb (tmp2@0) (p1@0)),
      (felem_cmovznz t_limb (tmp2@1) (p1@1)),
      (felem_cmovznz t_limb (tmp2@2) (p1@2))]

primitive felem_from_bytes : [bit_length] -> felem
primitive felem_to_bytes : felem -> [bit_length]

