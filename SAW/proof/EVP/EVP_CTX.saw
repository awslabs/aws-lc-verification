/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


let NID_rsaEncryption = 6;
let EVP_PKEY_RSA = NID_rsaEncryption;
let NID_rsassaPss = 912;
let EVP_PKEY_RSA_PSS = NID_rsassaPss;
let NID_X9_62_id_ecPublicKey = 408;
let EVP_PKEY_EC = NID_X9_62_id_ecPublicKey;
let NID_HKDF = 969;
let EVP_PKEY_HKDF = NID_HKDF;
let NID_HMAC = 855;
let EVP_PKEY_HMAC = NID_HMAC;

let points_to_evp_pkey_method_st
      ptr
      pkey_id
      init
      copy
      cleanup
      keygen
      sign_init
      sign
      sign_message
      verify_init
      verify
      verify_message
      verify_recover
      encrypt
      decrypt
      derive
      paramgen
      ctrl = do {
  //pkey_id
  crucible_points_to (crucible_elem ptr 0) (crucible_term {{ `pkey_id : [32] }});
  //init
  crucible_points_to (crucible_elem ptr 1) init;
  //copy
  crucible_points_to (crucible_elem ptr 2) copy;
  //cleanup
  crucible_points_to (crucible_elem ptr 3) cleanup;
  //keygen
  crucible_points_to (crucible_elem ptr 4) keygen;
  //sign_init
  crucible_points_to (crucible_elem ptr 5) sign_init;
  //sign
  crucible_points_to (crucible_elem ptr 6) sign;
  //sign_message
  crucible_points_to (crucible_elem ptr 7) sign_message;
  //verify_init
  crucible_points_to (crucible_elem ptr 8) verify_init;
  //verify
  crucible_points_to (crucible_elem ptr 9) verify;
  //verify_message
  crucible_points_to (crucible_elem ptr 10) verify_message;
  //verify_recover
  crucible_points_to (crucible_elem ptr 11) verify_recover;
  //encrypt
  crucible_points_to (crucible_elem ptr 12) encrypt;
  //decrypt
  crucible_points_to (crucible_elem ptr 13) decrypt;
  //derive
  crucible_points_to (crucible_elem ptr 14) derive;
  //paramgen
  crucible_points_to (crucible_elem ptr 15) paramgen;
  //ctrl
  crucible_points_to (crucible_elem ptr 16) ctrl;
};

let points_to_EVP_PKEY_rsa_pkey_meth ptr = points_to_evp_pkey_method_st
      ptr
      EVP_PKEY_RSA // pkey_id
      (crucible_global "pkey_rsa_init") // init
      (crucible_global "pkey_rsa_copy") // copy
      (crucible_global "pkey_rsa_cleanup") // cleanup
      (crucible_global "pkey_rsa_keygen") // keygen
      crucible_null // sign_init
      (crucible_global "pkey_rsa_sign") // sign
      crucible_null // sign_message
      crucible_null // verify_init
      (crucible_global "pkey_rsa_verify") // verify
      crucible_null // verify_message
      (crucible_global "pkey_rsa_verify_recover") // verify_recover
      (crucible_global "pkey_rsa_encrypt") // encrypt
      (crucible_global "pkey_rsa_decrypt") // decrypt
      crucible_null // derive
      crucible_null // paramgen
      (crucible_global "pkey_rsa_ctrl") // ctrl
      ;

let points_to_EVP_PKEY_rsa_pss_pkey_meth ptr = points_to_evp_pkey_method_st
      ptr
      EVP_PKEY_RSA_PSS // pkey_id
      (crucible_global "pkey_rsa_init") // init
      (crucible_global "pkey_rsa_copy") // copy
      (crucible_global "pkey_rsa_cleanup") // cleanup
      (crucible_global "pkey_rsa_keygen") // keygen
      (crucible_global "pkey_pss_init_sign") // sign_init
      (crucible_global "pkey_rsa_sign") // sign
      crucible_null // sign_message
      (crucible_global "pkey_pss_init_verify") // verify_init
      (crucible_global "pkey_rsa_verify") // verify
      crucible_null // verify_message
      crucible_null // verify_recover
      crucible_null // encrypt
      crucible_null // decrypt
      crucible_null // derive
      crucible_null // paramgen
      (crucible_global "pkey_rsa_ctrl") // ctrl
      ;

let points_to_EVP_PKEY_ec_pkey_meth ptr = points_to_evp_pkey_method_st
      ptr
      EVP_PKEY_EC // pkey_id
      (crucible_global "pkey_ec_init") // init
      (crucible_global "pkey_ec_copy") // copy
      (crucible_global "pkey_ec_cleanup") // cleanup
      (crucible_global "pkey_ec_keygen") // keygen
      crucible_null // sign_init
      (crucible_global "pkey_ec_sign") // sign
      crucible_null // sign_message
      crucible_null // verify_init
      (crucible_global "pkey_ec_verify") // verify
      crucible_null // verify_message
      crucible_null // verify_recover
      crucible_null // encrypt
      crucible_null // decrypt
      (crucible_global "pkey_ec_derive") // derive
      (crucible_global "pkey_ec_paramgen") // paramgen
      (crucible_global "pkey_ec_ctrl") // ctrl
      ;

let points_to_EVP_PKEY_hkdf_pkey_meth ptr = points_to_evp_pkey_method_st
      ptr
      EVP_PKEY_HKDF // pkey_id
      (crucible_global "pkey_hkdf_init") // init
      (crucible_global "pkey_hkdf_copy") // copy
      (crucible_global "pkey_hkdf_cleanup") // cleanup
      crucible_null // keygen
      crucible_null // sign_init
      crucible_null // sign
      crucible_null // sign_message
      crucible_null // verify_init
      crucible_null // verify
      crucible_null // verify_message
      crucible_null // verify_recover
      crucible_null // encrypt
      crucible_null // decrypt
      (crucible_global "pkey_hkdf_derive") // derive
      crucible_null // paramgen
      (crucible_global "pkey_hkdf_ctrl") // ctrl
;

let points_to_EVP_PKEY_hmac_pkey_meth ptr = points_to_evp_pkey_method_st
      ptr
      EVP_PKEY_HMAC // pkey_id
      (crucible_global "hmac_init") // init
      (crucible_global "hmac_copy") // copy
      (crucible_global "hmac_cleanup") // cleanup
      crucible_null // keygen
      crucible_null // sign_init
      crucible_null // sign
      crucible_null // sign_message
      crucible_null // verify_init
      crucible_null // verify
      crucible_null // verify_message
      crucible_null // verify_recover
      crucible_null // encrypt
      crucible_null // decrypt
      crucible_null // derive
      crucible_null // paramgen
      (crucible_global "hmac_ctrl") // ctrl
;


// Specification of `EVP_PKEY_rsa_pkey_meth_init`, the initialization
// function for `EVP_PKEY_rsa_pkey_meth_storage`.
let EVP_PKEY_rsa_pkey_meth_init_spec = do {
  crucible_alloc_global "EVP_PKEY_rsa_pkey_meth_storage";
  crucible_execute_func [];
  points_to_EVP_PKEY_rsa_pkey_meth (crucible_global "EVP_PKEY_rsa_pkey_meth_storage");
};
let EVP_PKEY_rsa_pkey_meth_spec = do {
  crucible_alloc_global "EVP_PKEY_rsa_pkey_meth_storage";
  crucible_alloc_global "EVP_PKEY_rsa_pkey_meth_once";
  crucible_execute_func
    [ (crucible_global "EVP_PKEY_rsa_pkey_meth_once")
    , (crucible_global "EVP_PKEY_rsa_pkey_meth_init")
    ];
  points_to_EVP_PKEY_rsa_pkey_meth (crucible_global "EVP_PKEY_rsa_pkey_meth_storage");
};

// Specification of `EVP_PKEY_rsa_pss_pkey_meth_init`, the initialization
// function for `EVP_PKEY_rsa_pss_pkey_meth_storage`.
let EVP_PKEY_rsa_pss_pkey_meth_init_spec = do {
  crucible_alloc_global "EVP_PKEY_rsa_pss_pkey_meth_storage";
  crucible_execute_func [];
  points_to_EVP_PKEY_rsa_pss_pkey_meth (crucible_global "EVP_PKEY_rsa_pss_pkey_meth_storage");
};
let EVP_PKEY_rsa_pss_pkey_meth_spec = do {
  crucible_alloc_global "EVP_PKEY_rsa_pss_pkey_meth_storage";
  crucible_alloc_global "EVP_PKEY_rsa_pss_pkey_meth_once";
  crucible_execute_func
    [ (crucible_global "EVP_PKEY_rsa_pss_pkey_meth_once")
    , (crucible_global "EVP_PKEY_rsa_pss_pkey_meth_init")
    ];
  points_to_EVP_PKEY_rsa_pss_pkey_meth (crucible_global "EVP_PKEY_rsa_pss_pkey_meth_storage");
};

// Specification of `EVP_PKEY_ec_pkey_meth_init`, the initialization function
// for `EVP_PKEY_ec_pkey_meth_storage`.
let EVP_PKEY_ec_pkey_meth_init_spec = do {
  crucible_alloc_global "EVP_PKEY_ec_pkey_meth_storage";
  crucible_execute_func [];
  points_to_EVP_PKEY_ec_pkey_meth (crucible_global "EVP_PKEY_ec_pkey_meth_storage");
};
let EVP_PKEY_ec_pkey_meth_spec = do {
  crucible_alloc_global "EVP_PKEY_ec_pkey_meth_storage";
  crucible_alloc_global "EVP_PKEY_ec_pkey_meth_once";
  crucible_execute_func
    [ (crucible_global "EVP_PKEY_ec_pkey_meth_once")
    , (crucible_global "EVP_PKEY_ec_pkey_meth_init")
    ];
  points_to_EVP_PKEY_ec_pkey_meth (crucible_global "EVP_PKEY_ec_pkey_meth_storage");
};

// Specification of `EVP_PKEY_hkdf_pkey_meth_init`, the initialization function
// for `EVP_PKEY_hkdf_pkey_meth_storage`.
let EVP_PKEY_hkdf_pkey_meth_init_spec = do {
  crucible_alloc_global "EVP_PKEY_hkdf_pkey_meth_storage";
  crucible_execute_func [];
  points_to_EVP_PKEY_hkdf_pkey_meth (crucible_global "EVP_PKEY_hkdf_pkey_meth_storage");
};
let EVP_PKEY_hkdf_pkey_meth_spec = do {
  crucible_alloc_global "EVP_PKEY_hkdf_pkey_meth_storage";
  crucible_alloc_global "EVP_PKEY_hkdf_pkey_meth_once";
  crucible_execute_func
  [ (crucible_global "EVP_PKEY_hkdf_pkey_meth_once")
  , (crucible_global "EVP_PKEY_hkdf_pkey_meth_init")
  ];
  points_to_EVP_PKEY_hkdf_pkey_meth (crucible_global "EVP_PKEY_hkdf_pkey_meth_storage");
};

// Specification of `EVP_PKEY_hmac_pkey_meth_init`, the initialization function
// for `EVP_PKEY_hmac_pkey_meth_storage`.
let EVP_PKEY_hmac_pkey_meth_init_spec = do {
  crucible_alloc_global "EVP_PKEY_hmac_pkey_meth_storage";
  crucible_execute_func [];
  points_to_EVP_PKEY_hmac_pkey_meth (crucible_global "EVP_PKEY_hmac_pkey_meth_storage");
};
let EVP_PKEY_hmac_pkey_meth_spec = do {
  crucible_alloc_global "EVP_PKEY_hmac_pkey_meth_storage";
  crucible_alloc_global "EVP_PKEY_hmac_pkey_meth_once";
  crucible_execute_func
  [ (crucible_global "EVP_PKEY_hmac_pkey_meth_once")
  , (crucible_global "EVP_PKEY_hmac_pkey_meth_init")
  ];
  points_to_EVP_PKEY_hmac_pkey_meth (crucible_global "EVP_PKEY_hmac_pkey_meth_storage");
};

////////////////////////////////////////////////////////////////////////////////
// Proof commands

llvm_verify m "EVP_PKEY_rsa_pkey_meth_init" [] true EVP_PKEY_rsa_pkey_meth_init_spec (w4_unint_z3 []);
EVP_PKEY_rsa_pkey_meth_ov <- llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  EVP_PKEY_rsa_pkey_meth_spec;

llvm_verify m "EVP_PKEY_rsa_pss_pkey_meth_init" [] true EVP_PKEY_rsa_pss_pkey_meth_init_spec (w4_unint_z3 []);
EVP_PKEY_rsa_pss_pkey_meth_ov <- llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  EVP_PKEY_rsa_pss_pkey_meth_spec;

llvm_verify m "EVP_PKEY_ec_pkey_meth_init" [] true EVP_PKEY_ec_pkey_meth_init_spec (w4_unint_z3 []);
EVP_PKEY_ec_pkey_meth_ov <- llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  EVP_PKEY_ec_pkey_meth_spec;

llvm_verify m "EVP_PKEY_hkdf_pkey_meth_init" [] true EVP_PKEY_hkdf_pkey_meth_init_spec (w4_unint_z3 []);
EVP_PKEY_hkdf_pkey_meth_ov <- llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  EVP_PKEY_hkdf_pkey_meth_spec;

llvm_verify m "EVP_PKEY_hmac_pkey_meth_init" [] true EVP_PKEY_hmac_pkey_meth_init_spec (w4_unint_z3 []);
EVP_PKEY_hmac_pkey_meth_ov <- llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  EVP_PKEY_hmac_pkey_meth_spec;
