/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

// Specs and proofs related to functions in internal.h (constant time code, reference counting, locks, etc.)

// Using experimental proof command "crucible_llvm_verify_x86"
enable_experimental;

// The value_barrier_w function is used to prevent compiler optimizations that might
// break constant-time implementations. The functional spec is that it takes a value
// and returns it with no side effects.
let value_barrier_w_spec = do {

  a <- crucible_fresh_var "a" (llvm_int 64);
  crucible_execute_func [crucible_term a];
  crucible_return (crucible_term a);
};

let value_barrier_u32_spec = do {

  a <- crucible_fresh_var "a" (llvm_int 32);
  crucible_execute_func [crucible_term a];
  crucible_return (crucible_term a);
};


let CRYPTO_REFCOUNT_MAX = 0xffffffff;

let CRYPTO_refcount_inc_spec = do {
  (count, count_ptr) <- ptr_to_fresh "count" i32;
  crucible_execute_func [count_ptr];
  crucible_points_to count_ptr (crucible_term {{ if count < `CRYPTO_REFCOUNT_MAX then count + 1 else count }});
};

let CRYPTO_refcount_dec_and_test_zero_spec = do {
  (count, count_ptr) <- ptr_to_fresh "count" i32;
  crucible_precond {{ count != 0 }};
  crucible_execute_func [count_ptr];
  let count' = {{ if count < `CRYPTO_REFCOUNT_MAX then count - 1 else count }};
  crucible_points_to count_ptr (crucible_term count');
  crucible_return (crucible_term {{ if count' == 0 then (1 : [32]) else 0 }});
};

let ERR_put_error_spec = do {
  library <- crucible_fresh_var "library" i32;
  unused <- crucible_fresh_var "unused" i32;
  reason <- crucible_fresh_var "reason" i32;
  file_ptr <- crucible_fresh_pointer i8;
  line <- crucible_fresh_var "line" i32;

  crucible_execute_func
    [ (crucible_term library)
    , (crucible_term unused)
    , (crucible_term reason)
    , file_ptr
    , (crucible_term line)
    ];
};

// TODO: Override the functions that call into these CRYPTO_MUTEX functions,
// rather than the CRYPTO_MUTEX functions themselves
let CRYPTO_MUTEX_lock_spec = do {
  lock_ptr <- crucible_alloc (llvm_struct "union.crypto_mutex_st");
  crucible_execute_func [lock_ptr];
};

let CRYPTO_get_fork_generation_spec = do {
  crucible_execute_func [];
  ret <- crucible_fresh_var "ret" i64;
  crucible_return (crucible_term ret);
};

CRYPTO_get_fork_generation_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_get_fork_generation"
  (CRYPTO_get_fork_generation_spec);


// Proof commands

// Prove value_barrier_w correct and save the override.
value_barrier_w_ov <- llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "value_barrier_w"
  []
  true
  value_barrier_w_spec
  (do {
    w4_unint_yices [];
  });

value_barrier_u32_ov <- llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "value_barrier_u32"
  []
  true
  value_barrier_u32_spec
  (do {
    w4_unint_yices [];
  });


CRYPTO_refcount_inc_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_refcount_inc"
  CRYPTO_refcount_inc_spec;

CRYPTO_refcount_dec_and_test_zero_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_refcount_dec_and_test_zero"
  CRYPTO_refcount_dec_and_test_zero_spec;

ERR_put_error_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ERR_put_error"
  ERR_put_error_spec;

CRYPTO_MUTEX_lock_read_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_MUTEX_lock_read"
  CRYPTO_MUTEX_lock_spec;

CRYPTO_MUTEX_unlock_read_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_MUTEX_unlock_read"
  CRYPTO_MUTEX_lock_spec;

CRYPTO_MUTEX_lock_write_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_MUTEX_lock_write"
  CRYPTO_MUTEX_lock_spec;

CRYPTO_MUTEX_unlock_write_ov <- crucible_llvm_unsafe_assume_spec
  m
  "CRYPTO_MUTEX_unlock_write"
  CRYPTO_MUTEX_lock_spec;

