/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


/*
 * This file contains specs for OpenSSL memory management functions.
 */

import "../../../cryptol-specs/Common/ByteArray.cry";

////////////////////////////////////////////////////////////////////////////////
// Specifications

/*
 * Specification of OPENSSL memory management functions
 */
// if `is_init` is true then the allocated memory is initialized with fresh
// symbolic bytes
let OPENSSL_malloc_spec is_init = do {
  // Precondition: `size` is a non-zero 64-bit integer
  size <- crucible_fresh_var "size" i64;
  crucible_precond {{ size != 0 }};

  // Call function with argument `size`.
  // `crucible_term` converts `size` to a symbol so that SAW may reason about
  // it during symbolic execution.
  crucible_execute_func [(crucible_term size)];

  // Postcondition: returns a pointer to a 16 byte aligned array of `size`
  // bytes
  ptr <- crucible_symbolic_alloc false 16 size;
  if is_init then do {
    bytes <- crucible_fresh_cryptol_var "malloc_bytes" {| ByteArray |};
    crucible_points_to_array_prefix ptr bytes size;
  } else do {
    return ();
  };
  crucible_return ptr;
};

let OPENSSL_malloc_null_spec = do {
  crucible_execute_func [(crucible_term {{ 0 : [64] }})];
  crucible_return crucible_null;
};

let OPENSSL_realloc_spec orig_size size = do {
  (data, ptr) <- ptr_to_fresh "data" (llvm_array orig_size i8);
  crucible_execute_func [ptr, (crucible_term {{ `size : [64] }})];
  ret <- crucible_alloc (llvm_array size i8);
  crucible_points_to_untyped ret (crucible_term data);
  crucible_return ret;
};

let OPENSSL_realloc_null_spec = do {
  size <- crucible_fresh_var "size" i64;
  crucible_execute_func [crucible_null, (crucible_term size)];
  ret <- crucible_symbolic_alloc false 16 size;
  crucible_return ret;
};

let OPENSSL_free_nonnull_spec size = do {
  // Precondition: `ptr` is a pointer to an array of `size` bytes
  ptr <- crucible_alloc (llvm_array size i8);

  // Call function with argument `ptr`
  crucible_execute_func [ptr];

  // Postcondition: true
};

let OPENSSL_free_null_spec = do {
  // Precondition: true

  // Call function with NULL as the argument
  crucible_execute_func [crucible_null];

  // Postcondition: true
};

let OPENSSL_cleanse_spec = do {
  len <- crucible_fresh_var "size" i64;
  ptr <- crucible_symbolic_alloc false 1 len;
  // Precondition: `ptr` is a pointer to an array of `len` bytes

  // Call function with arguments `ptr` and `len`
  crucible_execute_func [ptr, (crucible_term len)];

  // Postcondition: Data pointed to by `ptr` has been invalidated
};

let memcmp_spec count = do {
  (lhs, lhs_ptr) <- ptr_to_fresh_readonly "lhs" (llvm_array count i8);
  (rhs, rhs_ptr) <- ptr_to_fresh_readonly "rhs" (llvm_array count i8);
  crucible_execute_func [lhs_ptr, rhs_ptr, (crucible_term {{ `count : [64] }})];
  crucible_return (crucible_term {{ if (join lhs) < (join rhs) then (0 - 1) : [32] else if (join lhs) == (join rhs) then 0 else 1 }});
};

// This spec is very similar to that of memcmp, as that function directly
// invokes bcmp. When compiled with optimizations, memcmp will be inlined away,
// exposing a call site to bcmp.
let bcmp_spec count = do {
  (lhs, lhs_ptr) <- ptr_to_fresh_readonly "lhs" (llvm_array count i8);
  (rhs, rhs_ptr) <- ptr_to_fresh_readonly "rhs" (llvm_array count i8);

  llvm_execute_func [lhs_ptr, rhs_ptr, (llvm_term {{ `count : [64] }})];

  bcmp_res <- llvm_fresh_var "bcmp_res" i32;
  llvm_postcond {{ bcmp_res != 0 }};
  llvm_return (llvm_term {{ if (join lhs) == (join rhs) then 0 else bcmp_res }});
};


////////////////////////////////////////////////////////////////////////////////
// Proof commands


// Assume `OPENSSL_malloc` satisfies `OPENSSL_malloc_spec`
// the allocated memory is uninitialized, and a read before a write would cause
// a verification failure
OPENSSL_malloc_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_malloc"
  (OPENSSL_malloc_spec false);
// the allocated memory is initialized with fresh symbolic bytes, and a read
// before a write would succeed
OPENSSL_malloc_init_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_malloc"
  (OPENSSL_malloc_spec true);
// Assume `OPENSSL_malloc` satisfies `OPENSSL_malloc_null_spec`
OPENSSL_malloc_null_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_malloc"
  OPENSSL_malloc_null_spec;

OPENSSL_realloc_null_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_realloc"
  OPENSSL_realloc_null_spec;

// Assume `OPENSSL_free` satisfies `OPENSSL_free_null_spec`
OPENSSL_free_null_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_free"
  OPENSSL_free_null_spec;

OPENSSL_cleanse_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_cleanse"
  OPENSSL_cleanse_spec;

// Other specs need a size, so proofs need to assume them for the right size.

