/* 
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

enable_experimental;

// Size of the hmac_ctx_st struct
let HMAC_CTX_SIZE = llvm_sizeof m (llvm_struct "struct.hmac_ctx_st");

// Recursively specify that the fields of an `hmac_ctx_st` are null
let zeroed_hmac_ctx_st ptr = do {
  crucible_points_to (crucible_field ptr "md") crucible_null;
  points_to_env_md_ctx_st (crucible_field ptr "i_ctx") crucible_null crucible_null;
  points_to_env_md_ctx_st (crucible_field ptr "o_ctx") crucible_null crucible_null;
  points_to_env_md_ctx_st (crucible_field ptr "md_ctx") crucible_null crucible_null;
};

// Allocate state structs for `i_ctx`, `o_ctx`, and `md_ctx` fields in an
// `hmac_ctx_st`
let alloc_sha512_state_sts = do {
  i_ctx_ptr <- crucible_alloc (llvm_struct "struct.sha512_state_st");
  o_ctx_ptr <- crucible_alloc (llvm_struct "struct.sha512_state_st");
  md_ctx_ptr <- crucible_alloc (llvm_struct "struct.sha512_state_st");
  return (i_ctx_ptr, o_ctx_ptr, md_ctx_ptr);
};

// Specify the relation between  hmac_ctx_st and HMACState
let points_to_hmac_ctx_st ptr md_ptr context num i_ctx_ptr o_ctx_ptr md_ctx_ptr = do {
  // Check that `i_ctx`, `o_ctx`, and `md_ctx` match the spec.  We set the
  // `num` argument for `i_ctx` and `o_ctx` to 0 because HMAC_Init_ex pads or
  // hashes the key to make it exactly 128 bytes, so the `block` field of these
  // structs is uninitialized by the SHA384 update function.  No other function
  // modifies `i_ctx` or `o_ctx`.
  points_to_sha512_state_st i_ctx_ptr {{ context.i_ctx }} 0;
  points_to_sha512_state_st o_ctx_ptr {{ context.o_ctx }} 0;
  points_to_sha512_state_st md_ctx_ptr {{ context.md_ctx }} num;

  // Specify that the struct pointed by `ptr` references `i_ctx`, `o_ctx`, and
  // `md_ctx`.  The `md_data` field of these structs are all the same.
  points_to_env_md_ctx_st (crucible_field ptr "i_ctx") md_ptr i_ctx_ptr;
  points_to_env_md_ctx_st (crucible_field ptr "o_ctx") md_ptr o_ctx_ptr;
  points_to_env_md_ctx_st (crucible_field ptr "md_ctx") md_ptr md_ctx_ptr;

  // Specify that `ptr.md` matches `md_ptr`
  crucible_points_to (crucible_field ptr "md") md_ptr;
};

// Create a Cryptol HMACState
let fresh_hmac_state_st name num = do {
  // Create Cryptol SHAStates.  We set `n` to 0 for `i_ctx` and `o_ctx`
  // because the init function always sets `n` to 0.
  i_ctx <- fresh_sha512_state_st (str_concat name ".i_ctx") 0;
  o_ctx <- fresh_sha512_state_st (str_concat name ".o_ctx") 0;
  md_ctx <- fresh_sha512_state_st (str_concat name ".md_ctx") num;

  // Build the HMACState record
  return {{ { i_ctx = i_ctx, o_ctx = o_ctx, md_ctx = md_ctx } }};
};

// Specification of the HMAC_CTX_init function
let HMAC_CTX_init_spec = do {
  // Precondition: `hmac_ctx_ptr` points to an `hmac_ctx_st` struct
  hmac_ctx_ptr <- crucible_alloc (llvm_struct "struct.hmac_ctx_st");

  // Call function with `hmac_ctx_ptr`
  crucible_execute_func [hmac_ctx_ptr];

  // Postcondition: The struct pointed to by `hmac_ctx_ptr` has been zeroed out
  zeroed_hmac_ctx_st hmac_ctx_ptr;
};

// Specification of the HMAC_Init_ex function
let HMAC_Init_ex_spec key_len = do {
  // Precondition: The function uses the AVX+shrd code path
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Precondition: `hmac_ctx_ptr` points to a zeroed out `hmac_ctx_st`
  hmac_ctx_ptr <- crucible_alloc (llvm_struct "struct.hmac_ctx_st");
  zeroed_hmac_ctx_st hmac_ctx_ptr;

  // Precondition: `key` is an array of `key_len` bytes.  `key_ptr` points to
  // `key`.
  (key, key_ptr) <- ptr_to_fresh_readonly "key" (llvm_array key_len (llvm_int 8));

  // Precondition: `md_ptr` points to a const `env_md_st` struct satisfying the
  // `env_md_st` specification.
  md_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st md_ptr;

  // Call function with `hmac_ctx_ptr`, `key_ptr`, `key_len`, `md_ptr`, and NULL
  crucible_execute_func
    [ hmac_ctx_ptr
    , key_ptr
    , crucible_term {{ `key_len : [64] }}
    , md_ptr
    , crucible_null
    ];

  // Postcondition: The function has not changed the variable that decides the
  // AVX+shrd code path
  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Postcondition: `i_ctx_ptr`, `o_ctx_ptr`, and `md_ctx_ptr` are
  // `sha512_state_st` structs
  (i_ctx_ptr, o_ctx_ptr, md_ctx_ptr) <- alloc_sha512_state_sts;
  // Postcondition: The data pointed to by `hmac_ctx_ptr` matches the context
  // returned by the cryptol function `HMACInit` when applied to `key`.
  points_to_hmac_ctx_st hmac_ctx_ptr md_ptr {{ HMACInit key }} 0 i_ctx_ptr o_ctx_ptr md_ctx_ptr;

  // Postcondition: The function returns 1
  crucible_return (crucible_term {{ 1 : [32] }});
};

// Specification of the HMAC_Update function
let HMAC_Update_spec num len = do {
  // Precondition: The function uses the AVX+shrd code path
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Precondition: `digest_ptr` is a pointer to a const `env_md_st` satisfying the
  // `points_to_env_md_st` specification
  digest_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st digest_ptr;

  // Precondition: `hmac_ctx_ptr` is a pointer to an `hmac_ctx_st`
  hmac_ctx_ptr <- crucible_alloc (llvm_struct "struct.hmac_ctx_st");
  // Precondition: `hmac_ctx` is a fresh Cryptol HMACState
  hmac_ctx <- fresh_hmac_state_st "hmac_ctx" num;
  // Precondition: `i_ctx_ptr`, `o_ctx_ptr`, and `md_ctx_ptr` are
  // `sha512_state_st` structs
  (i_ctx_ptr, o_ctx_ptr, md_ctx_ptr) <- alloc_sha512_state_sts;
  // Precondition: `hmac_ctx_ptr` matches `hmac_ctx`
  points_to_hmac_ctx_st hmac_ctx_ptr digest_ptr hmac_ctx num i_ctx_ptr o_ctx_ptr md_ctx_ptr;

  // Precondition: `data` is an array of `len` bytes.  `data_ptr` points
  // to `data`.
  (data, data_ptr) <- ptr_to_fresh_readonly "data" (llvm_array len (llvm_int 8));

  // Call function with `hmac_ctx_ptr`, `data_ptr`, and `len`
  crucible_execute_func [ hmac_ctx_ptr , data_ptr , crucible_term {{ `len : [64] }} ];

  // Postcondition: The function has not changed the variable that decides the
  // AVX+shrd code path
  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Postcondition: The data pointed to by `hmac_ctx_ptr` matches the context
  // returned by the cryptol function `HMACInit` when applied to `hmac_ctx` and
  // `data`.
  points_to_hmac_ctx_st hmac_ctx_ptr digest_ptr {{ HMACUpdate hmac_ctx data }} (eval_size {| (num + len) % SHA512_CBLOCK |}) i_ctx_ptr o_ctx_ptr md_ctx_ptr;

  // Postcondition: The function returns 1
  crucible_return (crucible_term {{ 1 : [32] }});
};

// Specification of the HMAC_Final function
let HMAC_Final_spec withLength num = do {
  // Precondition: The function uses the AVX+shrd code path
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Precondition: `digest_ptr` is a pointer to a const `env_md_st` satisfying the
  // `points_to_env_md_st` specification
  digest_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st digest_ptr;

  // Precondition: `hmac_ctx_ptr` is a pointer to an `hmac_ctx_st`
  hmac_ctx_ptr <- crucible_alloc (llvm_struct "struct.hmac_ctx_st");
  // Precondition: `hmac_ctx` is a fresh Cryptol HMACState
  hmac_ctx <- fresh_hmac_state_st "hmac_ctx" num;
  // Precondition: `i_ctx_ptr`, `o_ctx_ptr`, and `md_ctx_ptr` are
  // `sha512_state_st` structs
  (i_ctx_ptr, o_ctx_ptr, md_ctx_ptr) <- alloc_sha512_state_sts;
  // Precondition: `hmac_ctx_ptr` matches `hmac_ctx`
  points_to_hmac_ctx_st hmac_ctx_ptr digest_ptr hmac_ctx num i_ctx_ptr o_ctx_ptr md_ctx_ptr;

  // Precondition: out_ptr is allocated and correct length, and 
  // out_len_ptr is null or points to an int.
  (out_ptr, out_len_ptr) <- digestOut_pre withLength;

  // Call function with `hmac_ctx_ptr`, `out_ptr`, and `out_len_ptr`
  crucible_execute_func [ hmac_ctx_ptr , out_ptr , out_len_ptr ];

  // Postcondition: The function has not changed the variable that decides the
  // AVX+shrd code path
  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Postcondition: The contents of the array pointed to by `out_ptr` match the
  // result returned by the HMACFinal cryptol spec.
  // If length output is used, out_len_ptr points to correct length.
  digestOut_post withLength out_ptr out_len_ptr (crucible_term {{ HMACFinal hmac_ctx }});

  // Postcondition: The function returns 1
  crucible_return (crucible_term {{ 1 : [32] }});
};

// Specification of the HMAC function
let HMAC_spec withLength key_len data_len = do {
  // Precondition: The function uses the AVX+shrd code path
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Precondition: `type_ptr` is a pointer to a const `env_md_ctx_st` struct
  // satisfying the `points_to_env_md_st` specification
  type_ptr <- crucible_alloc_readonly (llvm_struct "struct.env_md_st");
  points_to_env_md_st type_ptr;

  // Precondition: `key` is a fresh const array of `key_len` bytes, and
  // `key_ptr` points to `key`
  (key, key_ptr) <- ptr_to_fresh_readonly "key" (llvm_array key_len i8);

  // Precondition: `data` is a fresh const array of `data_len` bytes, and
  // `data_ptr` points to `data`.
  (data, data_ptr) <- ptr_to_fresh_readonly "data" (llvm_array data_len i8);

  // Precondition: md_out_ptr is allocated and correct length, and 
  // md_out_len_ptr is null or points to an int.
  (md_out_ptr, md_out_len_ptr) <- digestOut_pre withLength;

  // Call function with arguments `type_ptr`, `key_ptr`, `key_len`, `data_ptr`,
  // `data_len`, `md_out_ptr`, and `md_out_len_ptr`
  crucible_execute_func
    [ type_ptr
    , key_ptr
    , crucible_term {{ `key_len : [64] }}
    , data_ptr
    , crucible_term {{ `data_len : [64] }}
    , md_out_ptr
    , md_out_len_ptr
    ];

  // Postcondition: The function has not changed the variable that decides the AVX+shrd code path
  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  // Postcondition: The contents of the array pointed to by `md_out_ptr` match
  // the result returned by the HMACFinal cryptol spec.
  // If length output is used, md_out_len_ptr points to correct length
  digestOut_post withLength md_out_ptr md_out_len_ptr (crucible_term {{ HMAC key data }});
  
  // Postcondition: The function returns `md_out_ptr`
  crucible_return md_out_ptr;
};

// Verify the `HMAC_CTX_init` C function satisfies the `HMAC_CTX_init_spec`
// specification
crucible_llvm_verify m "HMAC_CTX_init"
  []
  true
  HMAC_CTX_init_spec
  (w4_unint_yices []);

let verify_HMAC_Init_ex_spec key_len = do {
  print (str_concat "Verifying HMAC_Init_ex_spec at key_len=" (show key_len));
  crucible_llvm_verify m "HMAC_Init_ex"
    [ sha512_block_data_order_spec
    , OPENSSL_malloc_ov
    , OPENSSL_free_nonnull_ov
    , OPENSSL_free_null_ov
    , OPENSSL_cleanse_ov
    ]
    true
    (HMAC_Init_ex_spec key_len)
    (w4_unint_yices []);
};

// Verify the `HMAC_Init_ex` C function satisfies the `HMAC_Init_ex_spec` specification.  
if HMAC_quick_check then do {
  // There are two cases to consider.
  // Case 1: key_len=128 covers the case where the key is less than or equal to 128
  // bytes long and will be used as-is when XORed to create the pad inputs to
  // the SHA384 update function calls
  // Case 2: key_len=129 covers the case where the key is greater than 128 bytes long
  // and will be hashed before being XORed to create the pad inputs to the
  // SHA384 update function calls
  for [128, 129] verify_HMAC_Init_ex_spec;
  return ();
} else do {
  key_lens <- for (eval_list {{ [0 .. (SHA512_CBLOCK + 1)] : [SHA512_CBLOCK + 2][64] }})
    (\x -> (return (eval_int x)) : (TopLevel Int));
  for key_lens verify_HMAC_Init_ex_spec;
  return ();
};

// Verify the `HMAC_Update` C function satisfies the `HMAC_Update_spec`
// specification.  There are 3 cases to consider to ensure the proof covers all
// possible code paths through the update function.
crucible_llvm_verify m "HMAC_Update"
  [ sha512_block_data_order_spec
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ]
  true
  // num=0, len=240 covers the case with one call to the block function, on one
  // block from data, and the rest of data copied in hmac_ctx->md_ctx->data
  (HMAC_Update_spec 0 240)
  (w4_unint_yices ["processBlock_Common"]);
crucible_llvm_verify m "HMAC_Update"
  [ sha512_block_data_order_spec
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ]
  true
  // num=0, len=127 covers the case without any calls to the block function,
  // and data copied in ctx->md_ctx->data
  (HMAC_Update_spec 0 127)
  (w4_unint_yices ["processBlock_Common"]);
crucible_llvm_verify m "HMAC_Update"
  [sha512_block_data_order_spec]
  true
  // num=127, len=241 covers the case with two calls to the block function,
  // the first one on ctx->md_ctx->data, the second one on one block from data,
  // and the rest of data copied in ctx->md_ctx->data
  (HMAC_Update_spec 127 241)
  (w4_unint_yices ["processBlock_Common"]);

// Verify the `HMAC_Final` C function satisfies the `HMAC_Final_spec`
// specification.
let HMAC_Final_ovs =
  [ sha512_block_data_order_spec
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ];

let verify_HMAC_Final_spec withLength num = do {
  print (str_concat "Verifying HMAC_Final_spec at num=" (show num));
  crucible_llvm_verify m "HMAC_Final"
    HMAC_Final_ovs
    true
    (HMAC_Final_spec withLength num)
    (w4_unint_yices ["processBlock_Common"]);
};

let verify_final_with_length withLength = do {
  // There are 2 cases to consider to ensure the proof covers all possible code
  // paths through the update function
  // Case 1: num=111 covers the case with one call to the block function
  (verify_HMAC_Final_spec withLength 111);
  // Case 2: num=112 covers the case with two calls to the block function
  (verify_HMAC_Final_spec withLength 112);
};

let verify_final_with_num target_num = do {
  (verify_HMAC_Final_spec false target_num);
  (verify_HMAC_Final_spec true target_num);
};

if HMAC_quick_check then do {
  for [false, true] verify_final_with_length;
  return();
} else do {
  // range of valid indices in the internal block ([0 .. (SHA512_CBLOCK - 1)])
  nums <- for (eval_list {{ [0 .. (SHA512_CBLOCK - 1)] : [SHA512_CBLOCK][64] }})
    (\x -> (return (eval_int x)) : (TopLevel Int));
  for nums verify_final_with_num;
  return();
};

// Assume `OPENSSL_cleanse` satisfies `OPENSSL_cleanse_spec` for the
// hmac_ctx_st struct
OPENSSL_cleanse_hmac_ov <- crucible_llvm_unsafe_assume_spec
  m
  "OPENSSL_cleanse"
  (OPENSSL_cleanse_spec HMAC_CTX_SIZE);

let verify_hmac_with_length withLength = do {
  // Verify the `HMAC` C function satisfies the `HMAC_spec` specification
  crucible_llvm_verify m "HMAC"
    [ sha512_block_data_order_spec
    , OPENSSL_malloc_ov
    , OPENSSL_free_nonnull_ov
    , OPENSSL_free_null_ov
    , OPENSSL_cleanse_ov
    , OPENSSL_cleanse_hmac_ov
    ]
    true
    (HMAC_spec withLength 240 240)
    (w4_unint_yices ["processBlock_Common"]);
};
for [false, true] verify_hmac_with_length;
