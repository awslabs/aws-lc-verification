/* 
* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
* SPDX-License-Identifier: Apache-2.0
*/

enable_experimental;

include "HMAC.saw";

// Prove that the init function used to produce each MD struct is correct.
let evp_methods_init_ov index = do { 
  llvm_verify m (md_init index)
  []
  true
  (evp_md_methods_init_spec index)
  (w4_unint_z3 []);
};
for MD_INDICES evp_methods_init_ov;

// Assume that MD struct produced/returned by CRYPTO_once is correct.
let evp_methods_ov index = do { 
  llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  (evp_md_methods_spec index);
};
evp_methods_ovs <- for MD_INDICES evp_methods_ov;

// Prove that the init function that produces the HMAC in place methods struct
// is correct.
llvm_verify m HMAC_METHODS_INIT
  evp_methods_ovs
  true
  hmac_in_place_methods_init_spec
  (w4_unint_z3 []);

// Assume that the the HMAC in place methods struct produced/returned by
// CRYPTO_once is correct.
hmac_in_place_methods_ov <- llvm_unsafe_assume_spec
  m
  "CRYPTO_once"
  hmac_in_place_methods_spec;

GetInPlaceMethods_ov <- llvm_verify
  m
  "GetInPlaceMethods"
  [hmac_in_place_methods_ov]
  true
  GetInPlaceMethods_spec
  (w4_unint_z3 []);

// Verify the `HMAC_CTX_init` C function satisfies the `HMAC_CTX_init_spec`
// specification
llvm_verify m "HMAC_CTX_init"
  []
  true
  HMAC_CTX_init_spec
  (w4_unint_yices []);

let verify_HMAC_Init_ex_spec key_len = do {
  print (str_concat "Verifying HMAC_Init_ex_spec at key_len=" (show key_len));
  llvm_verify m "HMAC_Init_ex"
    [ sha512_block_data_order_ov
    , OPENSSL_malloc_ov
    , OPENSSL_free_nonnull_ov
    , OPENSSL_free_null_ov
    , OPENSSL_cleanse_ov
    , GetInPlaceMethods_ov
    ]
    true
    (HMAC_Init_ex_spec key_len)
    (w4_unint_yices []);
};

// Verify the `HMAC_Init_ex` C function satisfies the `HMAC_Init_ex_spec` specification.  
// There are two cases to consider.
// Case 1: key_len=128 covers the case where the key is less than or equal to 128
// bytes long and will be used as-is when XORed to create the pad inputs to
// the SHA384 update function calls
// Case 2: key_len=129 covers the case where the key is greater than 128 bytes long
// and will be hashed before being XORed to create the pad inputs to the
// SHA384 update function calls
for [128, 129] verify_HMAC_Init_ex_spec;

// Verify the `HMAC_Update` C function satisfies the `HMAC_Update_spec`
// specification.  There are 3 cases to consider to ensure the proof covers all
// possible code paths through the update function.
// Input length and buffer position are not exercised exhaustively, because this
// is done in the proof of the underlying hash function.
llvm_verify m "HMAC_Update"
  [ sha512_block_data_order_ov
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ]
  true
  // num=0, len=240 covers the case with one call to the block function, on one
  // block from data, and the rest of data copied in hmac_ctx->md_ctx->data
  (HMAC_Update_spec 0 240)
  (w4_unint_yices ["processBlock_Common"]);
llvm_verify m "HMAC_Update"
  [ sha512_block_data_order_ov
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ]
  true
  // num=0, len=127 covers the case without any calls to the block function,
  // and data copied in ctx->md_ctx->data
  (HMAC_Update_spec 0 127)
  (w4_unint_yices ["processBlock_Common"]);
llvm_verify m "HMAC_Update"
  [sha512_block_data_order_ov]
  true
  // num=127, len=241 covers the case with two calls to the block function,
  // the first one on ctx->md_ctx->data, the second one on one block from data,
  // and the rest of data copied in ctx->md_ctx->data
  (HMAC_Update_spec 127 241)
  (w4_unint_yices ["processBlock_Common"]);

// Verify the `HMAC_Final` C function satisfies the `HMAC_Final_spec`
// specification.
let HMAC_Final_ovs =
  [ sha512_block_data_order_ov
  , OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  ];

let verify_HMAC_Final_spec withLength num = do {
  print (str_concat "Verifying HMAC_Final_spec at num=" (show num));
  llvm_verify m "HMAC_Final"
    HMAC_Final_ovs
    true
    (HMAC_Final_spec withLength num)
    (w4_unint_yices ["processBlock_Common"]);
};

let verify_final_with_length withLength = do {
  // There are 2 cases to consider to ensure the proof covers all possible code
  // paths through the update function
  // Case 1: num=111 covers the case with one call to the block function
  (verify_HMAC_Final_spec withLength 111);
  // Case 2: num=112 covers the case with two calls to the block function
  (verify_HMAC_Final_spec withLength 112);
};

let verify_final_with_num target_num = do {
  (verify_HMAC_Final_spec false target_num);
  (verify_HMAC_Final_spec true target_num);
};

// Checking all buffer positions does not take that long, so this is done
// in select check, even though similar checks are done when verifying the
// underlying hash function.
if HMAC_quick_check then do {
  for [false, true] verify_final_with_length;
  return();
} else do {
  // range of valid indices in the internal block ([0 .. (SHA512_CBLOCK - 1)])
  nums <- for (eval_list {{ [0 .. (SHA512_CBLOCK - 1)] : [SHA512_CBLOCK][64] }})
    (\x -> (return (eval_int x)) : (TopLevel Int));
  for nums verify_final_with_num;
  return();
};

let verify_hmac_with_length withLength = do {
  // Verify the `HMAC` C function satisfies the `HMAC_spec` specification
  llvm_verify m "HMAC"
    [ sha512_block_data_order_ov
    , OPENSSL_malloc_ov
    , OPENSSL_free_nonnull_ov
    , OPENSSL_free_null_ov
    , OPENSSL_cleanse_ov
    , GetInPlaceMethods_ov
    ]
    true
    (HMAC_spec withLength 240 240)
    (w4_unint_yices ["processBlock_Common"]);
};
for [false, true] verify_hmac_with_length;
