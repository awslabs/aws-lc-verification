/*
* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
* SPDX-License-Identifier: Apache-2.0
*/

// -------------------------------------------------------
//                 Array lemmas

print "Proving ite_of_arrayRangeEq_equivalence_thm";
ite_of_arrayRangeEq_equivalence_thm <- prove_print
(w4_unint_z3 [])
{{ \x y m n p q c ->
  (arrayRangeEq x 0 m 0 128) /\ (arrayRangeEq y 0 n 0 128) ==>
  (if c then (arrayRangeEq x 0 p 0 128) else (arrayRangeEq y 0 q 0 128)) ==
  (if c then (arrayRangeEq m 0 p 0 128) else (arrayRangeEq n 0 q 0 128))
}};

print "Proving arrayUpdate_maintains_arrayRangeEq_thm";
arrayUpdate_maintains_arrayRangeEq_thm <- prove_print
(w4_unint_z3 [])
{{ \block' block n ->
   (arrayRangeEq block' 0 block 0 128) ==>
   (arrayRangeEq (arrayUpdate block' n 128) 0
                 (arrayUpdate block n 128) 0
                 128)
}};

print "Proving arraySet_maintains_arrayRangeEq_thm";
arraySet_maintains_arrayRangeEq_thm <- prove_print
(w4_unint_z3 [])
{{ \block' block n ->
  (arrayRangeEq block' 0 block 0 128) ==>
  (arrayRangeEq (arraySet block' (n + 1) 0 (127-n)) 0
                (arraySet block (n + 1) 0 (127-n)) 0
                128)
}};

print "Proving arrayRangeUpdate_maintains_arrayRangeEq_thm";
arrayRangeUpdate_maintains_arrayRangeEq_thm <- prove_print
(w4_unint_z3 [])
{{ \block' block sz ->
    (arrayRangeEq block' 0 block 0 128) ==>
    (arrayRangeEq (arrayRangeUpdate`{n=16} block' 112 sz) 0 (arrayRangeUpdate`{n=16} block 112 sz) 0 128)
}};


print "Proving arrayRangeEq_of_arrayRangeUpdate_thm";
arrayRangeEq_of_arrayRangeUpdate_thm <- prove_print
(w4_unint_z3 [])
{{ \seq1 seq2 ->
  (seq1 == seq2) ==>
  (arrayRangeEq (arrayRangeUpdate`{n=128} (arrayConstant 0) 0 seq1) 0
                (arrayRangeUpdate`{n=128} (arrayConstant 0) 0 seq2) 0 128)
}};

print "Proving ArrayCopy_of_arrayConstant_0_thm";
ArrayCopy_of_arrayConstant_0_thm <- prove_print
(w4_unint_z3 [])
(rewrite (cryptol_ss ())
{{ \x y -> arrayEq (arrayCopy (arrayConstant 0) x (arrayConstant 0) y 128) (arrayConstant 0) }});

// -------------------------------------------------------
//                 processBlock lemmas

print "Proving arrayRangeEq_processBlock_equivalence_thm";
arrayRangeEq_processBlock_equivalence_thm <- prove_print
(do { goal_eval_unint ["processBlock_Common"];
      simplify (addsimps [arrayRangeEq_arrayRangeLookup_eq_thm] empty_ss);
      w4_unint_z3 ["processBlock_Common"];
})
{{ \h1 h2 block' block ->
(arrayRangeEq block' 0 block 0 128) /\ (h1 == h2) ==>
(processBlock h1 block' 0) == (processBlock h2 block 0)
}};


// -------------------------------------------------------
//                 SHA lemmas

print "Proving arrayRangeEq_SHAFinal_Array_equivalence_thm";
arrayRangeEq_SHAFinal_Array_equivalence_thm <- prove_print
(do { goal_eval_unint ["processBlock"];
      goal_insert ite_of_arrayRangeEq_equivalence_thm;
      goal_insert arrayUpdate_maintains_arrayRangeEq_thm;
      goal_insert arraySet_maintains_arrayRangeEq_thm;
      goal_insert arrayRangeEq_processBlock_equivalence_thm;
      goal_insert arrayRangeUpdate_maintains_arrayRangeEq_thm;
      w4_unint_z3 ["processBlock"];
      })
{{ \block' block h n sz ->
      (arrayRangeEq block' 0 block 0 128) ==>
      ( (SHAFinal_Array {block = block', h = h, n = n, sz = sz}) ==
        (SHAFinal_Array {block = block, h = h, n = n, sz = sz}) ) }};

print "Proving SHAUpdate_Array_maintains_SHAState_Array_eq_thm";
SHAUpdate_Array_maintains_SHAState_Array_eq_thm <- prove_print
(do {
  goal_eval_unint ["processBlock", "processBlocks"];
  goal_insert arrayRangeEq_processBlock_equivalence_thm;
  w4_unint_z3 ["processBlock", "processBlocks"];
})
(rewrite (cryptol_ss ())
{{ \state1 state2 data data_len ->
  (SHAState_Array_eq state1 state2) ==>
  (SHAState_Array_eq (SHAUpdate_Array state1 data data_len) (SHAUpdate_Array state2 data data_len))
}});

print "Proving SHAState_Array_eq_implies_SHAFinal_Array_equal_thm";
SHAState_Array_eq_implies_SHAFinal_Array_equal_thm <- prove_print
(do {
  goal_eval_unint ["SHAFinal_Array"];
  goal_insert arrayRangeEq_SHAFinal_Array_equivalence_thm;
  w4_unint_z3 ["SHAFinal_Array"];
})
{{ \state1 state2 ->
  ((SHAState_Array_eq state1 state2) ==> ((SHAFinal_Array state1) == (SHAFinal_Array state2)))
}};

print "Proving SHAUpdate_maintains_SHAState_eq_thm";
SHAUpdate_maintains_SHAState_eq_thm <- prove_print
(w4_unint_z3 ["processBlock_Common"])
{{ \state1 state2 (data1 : [384]) data2 ->
  ((SHAState_eq state1 state2) /\ (data1 == data2)
  ==> (SHAState_eq (SHAUpdate state1 (split`{48} data1)) (SHAUpdate state2 (split`{48} data2))))
}};

print "Proving SHAState_eq_implies_SHAFinal_equal_thm";
SHAState_eq_implies_SHAFinal_equal_thm <- prove_print
(w4_unint_z3 ["processBlock_Common"])
{{ \state1 state2 ->
  ((SHAState_eq state1 state2) ==> (SHAFinal state1) == (SHAFinal state2))
}};

print "Proving n_equal_of_SHAUpdate_Array_thm";
n_equal_of_SHAUpdate_Array_thm <- prove_print
(do {
  goal_eval_unint ["processBlock", "processBlocks"];
  goal_insert arrayRangeEq_processBlock_equivalence_thm;
  w4_unint_z3 ["processBlock", "processBlocks"];
})
(rewrite (cryptol_ss ())
{{ \block1 block2 h sz n data data_len ->
  (arrayRangeEq block1 0 block2 0 128) ==>
  (res1.n == res2.n
  where res1 = (SHAUpdate_Array {block = block1, h = h, sz = sz, n = n} data data_len)
        res2 = (SHAUpdate_Array {block = block2, h = h, sz = sz, n = n} data data_len))
}});

print "Proving h_equal_of_SHAUpdate_Array_thm";
h_equal_of_SHAUpdate_Array_thm <- prove_print
(do {
  goal_eval_unint ["processBlock", "processBlocks"];
  goal_insert arrayRangeEq_processBlock_equivalence_thm;
  w4_unint_z3 ["processBlock", "processBlocks"];
})
(rewrite (cryptol_ss ())
{{ \block1 block2 h sz n data data_len ->
  (arrayRangeEq block1 0 block2 0 128) ==>
  (res1.h == res2.h
   where res1 = (SHAUpdate_Array {block = block1, h = h, sz = sz, n = n} data data_len)
         res2 = (SHAUpdate_Array {block = block2, h = h, sz = sz, n = n} data data_len))
}});

print "Proving sz_equal_of_SHAUpdate_Array_thm";
sz_equal_of_SHAUpdate_Array_thm <- prove_print
(do {
  goal_eval_unint ["processBlock", "processBlocks"];
  goal_insert arrayRangeEq_processBlock_equivalence_thm;
  w4_unint_z3 ["processBlock", "processBlocks"];
})
(rewrite (cryptol_ss ())
{{ \block1 block2 h sz n data data_len ->
  (arrayRangeEq block1 0 block2 0 128) ==>
  (res1.sz == res2.sz
   where res1 = (SHAUpdate_Array {block = block1, h = h, sz = sz, n = n} data data_len)
         res2 = (SHAUpdate_Array {block = block2, h = h, sz = sz, n = n} data data_len))
}});

print "Proving block_arrayRangeEq_of_SHAUpdate_Array_thm";
block_arrayRangeEq_of_SHAUpdate_Array_thm <- prove_print
(do {
  goal_eval_unint ["processBlock", "processBlocks"];
  goal_insert arrayRangeEq_processBlock_equivalence_thm;
  w4_unint_z3 ["processBlock", "processBlocks"];
})
(rewrite (cryptol_ss ())
{{ \block1 block2 h sz n data data_len ->
  (arrayRangeEq block1 0 block2 0 128) ==>
  ((arrayRangeEq res1.block 0 res2.block 0 128)
   where res1 = (SHAUpdate_Array {block = block1, h = h, sz = sz, n = n} data data_len)
         res2 = (SHAUpdate_Array {block = block2, h = h, sz = sz, n = n} data data_len))
}});

print "Proving SHAFinal_Array_of_SHAUpdate_Array_equivalence_thm";
SHAFinal_Array_of_SHAUpdate_Array_equivalence_thm <- prove_print
(do {
  goal_eval_unint ["SHAUpdate_Array", "SHAFinal_Array"];
  goal_insert n_equal_of_SHAUpdate_Array_thm;
  goal_insert h_equal_of_SHAUpdate_Array_thm;
  goal_insert sz_equal_of_SHAUpdate_Array_thm;
  goal_insert block_arrayRangeEq_of_SHAUpdate_Array_thm;
  goal_insert SHAState_Array_eq_implies_SHAFinal_Array_equal_thm;
  w4_unint_z3 ["SHAUpdate_Array", "SHAFinal_Array"];
})
(rewrite (cryptol_ss ())
{{ \block1 block2 block3 h n sz data data_len ->
(((arrayRangeEq block1 0 block2 0 128) /\ (arrayRangeEq block3 0 impl_state1.block 0 128) ==>
  ((SHAFinal_Array spec_state) == (SHAFinal_Array impl_state2)))
where
  spec_state = (SHAUpdate_Array {block = block1, h = h, n = n, sz = sz} data data_len)
  impl_state1 = (SHAUpdate_Array {block = block2, h = h, n = n, sz = sz} data data_len)
  impl_state2 = {block = block3, h = impl_state1.h, n = impl_state1.n, sz = impl_state1.sz})
}});
