/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


/*
 * Verifying that the X86_64 implementation of `sha512_block_data_order` is
 * equivalent with the Cryptol specification by sending the goal to an SMT
 * solver is not feasible because of the complexity of the algorithm. Instead,
 * low-level operations (left shift, right shift, bitwise and, bitwise or, xor)
 * are gradually rewritten to high-level operations (Sigma0, Sigma1, sigma0,
 * sigma1, Ch, Maj), until the goal becomes a conjunction of equalities between
 * terms consisting only of addition and high-level operations. For each
 * equality, its two terms are syntactically equal, modulo the associativity
 * and commutativity of addition.
 */

// bvShl<N> functions take a 64 bit vector and shift left by N
let bvShl3  = parse_core "\\(x : Vec 64 Bool) -> bvShl 64 x 3";
let bvShl7  = parse_core "\\(x : Vec 64 Bool) -> bvShl 64 x 7";
let bvShl42 = parse_core "\\(x : Vec 64 Bool) -> bvShl 64 x 42";
let bvShl56 = parse_core "\\(x : Vec 64 Bool) -> bvShl 64 x 56";

// bvShr<N> functions take a 64 bit vector and shift right by N
let bvShr1  = parse_core "\\(x : Vec 64 Bool) -> bvShr 64 x 1";
let bvShr7  = parse_core "\\(x : Vec 64 Bool) -> bvShr 64 x 7";
let bvShr6  = parse_core "\\(x : Vec 64 Bool) -> bvShr 64 x 6";
let bvShr19 = parse_core "\\(x : Vec 64 Bool) -> bvShr 64 x 19";
let bvShr42 = parse_core "\\(x : Vec 64 Bool) -> bvShr 64 x 42";

// slice_<A>_<B>_<C> functions take a 64 bit vector x and return the slice of
// size B that immediately follows the first A bits of x and that immediately
// precedes the final C bits of x.
let slice_8_56_0  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 8 56 0 x";
let slice_0_8_56  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 8 56 x";
let slice_36_28_0 = parse_core "\\(x : Vec 64 Bool) -> slice Bool 36 28 0 x";
let slice_0_36_28 = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 36 28 x";
let slice_41_23_0 = parse_core "\\(x : Vec 64 Bool) -> slice Bool 41 23 0 x";
let slice_0_41_23 = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 41 23 x";
let slice_50_14_0 = parse_core "\\(x : Vec 64 Bool) -> slice Bool 50 14 0 x";
let slice_0_50_14 = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 50 14 x";
let slice_58_6_0  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 58 6 0 x";
let slice_0_58_6  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 58 6 x";
let slice_59_5_0  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 59 5 0 x";
let slice_0_59_5  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 59 5 x";
let slice_60_4_0  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 60 4 0 x";
let slice_0_60_4  = parse_core "\\(x : Vec 64 Bool) -> slice Bool 0 60 4 x";


// Helper function for proving theorems
let prove_folding_theorem t = prove_print z3 (rewrite (cryptol_ss ()) t);

// rotate<N>_thm proves that left rotations of size N are equivalent to two
// slices concatenated together
rotate8_thm  <- prove_folding_theorem {{ \x -> (slice_8_56_0  x) # (slice_0_8_56  x) == x <<<  8 }};
rotate36_thm <- prove_folding_theorem {{ \x -> (slice_36_28_0 x) # (slice_0_36_28 x) == x <<< 36 }};
rotate41_thm <- prove_folding_theorem {{ \x -> (slice_41_23_0 x) # (slice_0_41_23 x) == x <<< 41 }};
rotate50_thm <- prove_folding_theorem {{ \x -> (slice_50_14_0 x) # (slice_0_50_14 x) == x <<< 50 }};
rotate58_thm <- prove_folding_theorem {{ \x -> (slice_58_6_0  x) # (slice_0_58_6  x) == x <<< 58 }};
rotate59_thm <- prove_folding_theorem {{ \x -> (slice_59_5_0  x) # (slice_0_59_5  x) == x <<< 59 }};
rotate60_thm <- prove_folding_theorem {{ \x -> (slice_60_4_0  x) # (slice_0_60_4  x) == x <<< 60 }};

// These variants of rotate59_thm apply in cases when SAW built-in
// simplifications prevent rotate59_thm from applying.
rotate59_slice_add_thm <- prove_folding_theorem
  {{ \x y -> (slice_59_5_0 x) # (slice_0_59_5 y) == (y <<< 59) + ((slice_59_5_0 (x - y)) # 0) }};

// This pushes XOR under concatenation.
xor_append_64_64_thm <- prove_folding_theorem
  {{ \(x : [64]) (y : [64]) u v -> (x # y) ^ (u # v) == (x ^ u) # (y ^ v) }};

// These prove that the various sigma functions are equivalent to sequences of
// ANDs, rotations, and shifts.
Sigma0_thm   <- prove_folding_theorem
  (normalize_term_opaque ["S0"] {{ \x -> (x ^ ((x ^ (x <<< 59)) <<< 58)) <<< 36 == S0 x }});
Sigma0_1_thm <- prove_folding_theorem
  (normalize_term_opaque ["S0"] {{ \x -> ((((x <<< 59) ^ x) <<< 58) ^ x) <<< 36 == S0 x }});
Sigma1_thm   <- prove_folding_theorem
  (normalize_term_opaque ["S1"] {{ \x -> (x ^ ((x ^ (x <<< 41)) <<< 60)) <<< 50 == S1 x }});
Sigma1_1_thm <- prove_folding_theorem
  (normalize_term_opaque ["S1"] {{ \x -> ((((x <<< 41) ^ x) <<< 60) ^ x) <<< 50 == S1 x }});
sigma0_thm <- prove_folding_theorem
  {{ \x -> (bvShr1 x) ^ (bvShr7 x) ^ (bvShl56 x) ^ (bvShr7 (bvShr1 x)) ^ (bvShl7 (bvShl56 x)) == s0 x }};
sigma1_thm <- prove_folding_theorem
  {{ \x -> (bvShr6 x) ^ (bvShl3 x) ^ (bvShr19 x) ^ (bvShl42 (bvShl3 x)) ^ (bvShr42 (bvShr19 x)) == s1 x }};

// Prove that the Ch function is equivalent to various combinations of XOR and
// AND
Ch_thm   <- prove_folding_theorem {{ \x y z -> z ^ (x && (z ^ y)) == Ch x y z }};
Ch_1_thm <- prove_folding_theorem {{ \x y z -> z ^ (x && (y ^ z)) == Ch x y z }};
Ch_2_thm <- prove_folding_theorem {{ \x y z -> z ^ ((y ^ z) && x) == Ch x y z }};
Ch_3_thm <- prove_folding_theorem {{ \x y z -> z ^ ((y ^ z) && x) == Ch x y z }};
Ch_4_thm <- prove_folding_theorem {{ \x y z -> ((y ^ z) && x) ^ z == Ch x y z }};
Ch_5_thm <- prove_folding_theorem {{ \x y z -> ((z ^ y) && x) ^ z == Ch x y z }};
Ch_6_thm <- prove_folding_theorem {{ \x y z -> (x && (y ^ z)) ^ z == Ch x y z }};
Ch_7_thm <- prove_folding_theorem {{ \x y z -> (x && (z ^ y)) ^ z == Ch x y z }};

// Prove relationships between Ch and Maj
Maj_thm   <- prove_folding_theorem {{ \x y z -> Ch (x ^ y) z y == Maj x y z }};
Maj_1_thm <- prove_folding_theorem {{ \x y z -> Ch (y ^ x) z y == Maj x y z }};

// replace (bvult x y) with (x - y <$ 0) in order for the semiring and abstract
// domain to work. This simplifies goals related to the 64-byte alignment of
// the stack.
let bvult = parse_core "\\(x y : Vec 64 Bool) -> bvult 64 x y";
cmp_sub_thm <- prove_folding_theorem
  {{ \x y -> bvult x y == if (x @ 0 == y @ 0) then (x - y <$ 0) else (x @ 0 < y @ 0) }};

let thms =
  [ rotate8_thm
  , rotate36_thm
  , rotate41_thm
  , rotate50_thm
  , rotate58_thm
  , rotate59_thm
  , rotate60_thm
  , rotate59_slice_add_thm
  , xor_append_64_64_thm
  , Sigma0_thm
  , Sigma0_1_thm
  , Sigma1_thm
  , Sigma1_1_thm
  , sigma0_thm
  , sigma1_thm
  , Ch_thm
  , Ch_1_thm
  , Ch_2_thm
  , Ch_3_thm
  , Ch_4_thm
  , Ch_5_thm
  , Ch_6_thm
  , Ch_7_thm
  , Maj_thm
  , Maj_1_thm
  , cmp_sub_thm
  ];

// Prove concatenation is associative
concat_assoc_thm <- prove_folding_theorem
  {{ \(x0 : [8]) (x1 : [8]) (x2 : [8]) (x3 : [8]) (x4 : [8]) (x5 : [8]) (x6 : [8]) (x7 : [8]) -> x0 # (x1 # (x2 # (x3 # (x4 # (x5 # (x6 # x7)))))) == (((((((x0 # x1) # x2) # x3) # x4) # x5) # x6) # x7) }};

