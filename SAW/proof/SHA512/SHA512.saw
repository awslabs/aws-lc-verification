/* 
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/
// Include SHA512 helper functions
include "SHA512-common.saw"; 

// Verify the `EVP_SHA_INIT` C function satisfies the `EVP_sha_init_spec`
// specification
crucible_llvm_verify m EVP_SHA_INIT [] true EVP_sha_init_spec (w4_unint_yices []);

// Verify the `EVP_DigestInit` C function satisfies the `EVP_DigestInit_spec`
// specification
crucible_llvm_verify m "EVP_DigestInit"
  [ OPENSSL_malloc_ov
  , OPENSSL_free_null_ov
  ]
  true
  EVP_DigestInit_spec
  (w4_unint_yices []);


// range of valid indices in the internal block ([0 .. (SHA512_CBLOCK - 1)])
nums <- for (eval_list {{ [0 .. (SHA512_CBLOCK - 1)] : [SHA512_CBLOCK][64] }})
  (\x -> (return (eval_int x)) : (TopLevel Int));

// Verify the `EVP_DigestUpdate` C function satisfies the
// `EVP_DigestUpdate_spec` specification.
if quick_check then do {
  // There are 3 cases to consider to ensure the proof covers all possible code
  // paths through the update function
  crucible_llvm_verify m "EVP_DigestUpdate"
    [sha512_block_data_order_spec]
    true
    // num=0, len=240 covers the case with one call to the block function,
    // on one block from data, and the rest of data copied in c->data
    (EVP_DigestUpdate_spec 0 240)
    (w4_unint_yices ["processBlock_Common"]);
  crucible_llvm_verify m "EVP_DigestUpdate"
    [sha512_block_data_order_spec]
    true
    // num=0, len=127 covers the case without any calls to the block function,
    // and data copied in c->data
    (EVP_DigestUpdate_spec 0 127)
    (w4_unint_yices ["processBlock_Common"]);
  crucible_llvm_verify m "EVP_DigestUpdate"
    [sha512_block_data_order_spec]
    true
    // num=127, len=241 covers the case with two calls to the block function,
    // the first one on c->data, the second one on one block from data,
    // and the rest of data copied in c->data
    (EVP_DigestUpdate_spec 127 241)
    (w4_unint_yices ["processBlock_Common"]);
  return ();
} else do {
  // this covers the case with all lengths given a target_num.
  print (str_concat "Verifying EVP_DigestUpdate at target_num=" (show target_num));
  let verify_update_at_len len = do {
    print (str_concat "Verifying EVP_DigestUpdate at len=" (show len));
    crucible_llvm_verify m "EVP_DigestUpdate"
        [sha512_block_data_order_spec]
        true
        (EVP_DigestUpdate_spec target_num len)
        (w4_unint_yices ["processBlock_Common"]);
  };
  // Given a fixed `num`, the `lens` cover all possible parameters especially below cases:
  // When len = (SHA512_CBLOCK - 1), this covers the case without any calls to the block function, 
  //   and data copied in c->data.
  // When len = (SHA512_CBLOCK + 1), this covers the case with one call to the block function, 
  //   on one block from data, and the rest of data copied in c->data.
  // When len = (SHA512_CBLOCK + 1), this covers the case with two calls to the block function,
  //   the first one on c->data,  the second one on one block from data, and the rest of data copied in c->data.
  // Note: when num = 0, 'len = 256' check fails due to 'sha512_block_data_order' limit. See https://github.com/awslabs/aws-lc-verification/issues/25
  if eval_bool {{ `target_num == 0 }} then do {
    lens <- for (eval_list {{ [0 .. (2 * SHA512_CBLOCK - 1)] : [2 * SHA512_CBLOCK][64] }})
      (\x -> (return (eval_int x)) : (TopLevel Int));
    for lens verify_update_at_len;
  } else do {
    lens <- for (eval_list {{ [0 .. (2 * SHA512_CBLOCK + 1 - target_num)] : [2 * SHA512_CBLOCK + 2 - target_num][64] }})
      (\x -> (return (eval_int x)) : (TopLevel Int));
    for lens verify_update_at_len;
  };
  return ();
};

// Verify the `EVP_DigestFinal` C function satisfies the
// `EVP_DigestFinal_spec` specification.
let EVP_DigestFinal_ovs =
  [ sha512_block_data_order_spec
  , OPENSSL_free_nonnull_ov
  , OPENSSL_cleanse_ov
  ];
if quick_check then do {
  // There are 2 cases to consider to ensure the proof covers all possible code
  // paths through the update function
  
  let verify_final_with_length withLength = do {
    print (str_concat "Verifying EVP_DigestFinal withLength=" (show withLength));
    crucible_llvm_verify m "EVP_DigestFinal"
      EVP_DigestFinal_ovs
      true
      // num=111 covers the case with one call to the block function
      (EVP_DigestFinal_spec withLength 111)
      (w4_unint_yices ["processBlock_Common"]);
    crucible_llvm_verify m "EVP_DigestFinal"
      EVP_DigestFinal_ovs
      true
      // num=112 covers the case with two calls to the block function
      (EVP_DigestFinal_spec withLength 112)
      (w4_unint_yices ["processBlock_Common"]);
  };
  for [false, true] verify_final_with_length;
  return ();
} else do {
  let verify_final_with_length withLength = do {
    let verify_final_at_num num = do {
      print (str_concat "Verifying EVP_DigestFinal at num=" (show num));
      crucible_llvm_verify m "EVP_DigestFinal"
        EVP_DigestFinal_ovs
        true
        (EVP_DigestFinal_spec withLength num)
        (w4_unint_yices ["processBlock_Common"]);
    };
    for nums verify_final_at_num;
  };
  for [false, true] verify_final_with_length;
  return ();
};


// Verify the `EVP_Digest` C function satisfies the `EVP_Digest_spec`
// specification
let verify_digest_with_length withLength = do {
  crucible_llvm_verify m "EVP_Digest"
    [ sha512_block_data_order_spec
    , OPENSSL_malloc_ov
    , OPENSSL_free_nonnull_ov
    , OPENSSL_free_null_ov
    , OPENSSL_cleanse_ov
    ]
    true
    (EVP_Digest_spec withLength 240)
    (w4_unint_yices ["processBlock_Common"]);
};
for [false, true] verify_digest_with_length;
