// ---------------------------------------------------------------
// point_mul_public

let bn_is_bit_set_words_spec = do {
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  bit <- crucible_fresh_var "bit" i64;

  crucible_execute_func [a_ptr, (crucible_term {{ `p384_felem_limbs : [64]}}), (crucible_term bit)];

  crucible_return (crucible_term {{ bn_is_bit_set_words a bit }});
  crucible_postcond {{ (bn_is_bit_set_words a bit == 0) || (bn_is_bit_set_words a bit == 1) }};
};

bn_is_bit_set_words_ov <- llvm_verify m "bn_is_bit_set_words"
  []
  true
  bn_is_bit_set_words_spec
  (w4_unint_z3 []);

ec_compute_wNAF_in_range_lemma <-
  prove_print
    (w4_unint_z3 [])
    (rewrite (cryptol_ss ()) {{ \scalar -> ec_compute_wNAF_in_range (ec_compute_wNAF scalar) }});

let ec_compute_wNAF_out = "ec_compute_wNAF.out";
let ec_compute_wNAF_range = "ec_compute_wNAF.range";

let ec_compute_wNAF_spec w order_width = do {

  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  crucible_points_to (crucible_field (crucible_field group_ptr "order") "width") (crucible_term {{ `order_width : [32] }});
  out_ptr <- crucible_alloc (llvm_array 385 i8);
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "scalar" i384;

  crucible_execute_func [group_ptr, out_ptr, scalar_ptr, (crucible_term {{384:[64]}}), (crucible_term {{`w:[32]}})];

  llvm_setup_with_tag ec_compute_wNAF_out (crucible_points_to out_ptr (crucible_term {{ ec_compute_wNAF scalar }}));
  llvm_setup_with_tag ec_compute_wNAF_range (crucible_postcond {{ ec_compute_wNAF_in_range (ec_compute_wNAF scalar) }});
};

// The memory safety checks are taking a significant amount of time.
// Specifically, they come from integer arithmetic in the source code.
// There are 385*4 = 1540 safety check lemmas.
disable_safety_proofs;
ec_compute_wNAF_ov <- llvm_verify m "ec_compute_wNAF"
  [ bn_is_bit_set_words_ov ]
  false // Disabling path satisfiability checks because they become expensive as `window_val` expression grows.
  (ec_compute_wNAF_spec wsize p384_felem_limbs)
  (do {
    out_goal <- goal_has_some_tag [ec_compute_wNAF_out];
    range_goal <- goal_has_some_tag [ec_compute_wNAF_range];

    if range_goal then do {
      goal_eval_unint ["ec_compute_wNAF", "ec_compute_wNAF_in_range"];
      goal_insert ec_compute_wNAF_in_range_lemma;
      w4_unint_z3 ["ec_compute_wNAF", "ec_compute_wNAF_in_range"];
    } else do {
      print_goal_summary;
      goal_eval_unint ["bn_is_bit_set_words"];
      w4_unint_z3 ["bn_is_bit_set_words"];
    };
  });
enable_safety_proofs;

// let p384_double_add_public_spec = do {

//   global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

//   digitp <- crucible_fresh_var "digitp" i8;
//   digitg <- crucible_fresh_var "digitg" i8;
//   (p_pre_comp, p_pre_comp_ptr) <- ptr_to_fresh_readonly "p_pre_comp" (llvm_array tsize (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length))));
//   (res_is_inf, res_is_inf_ptr) <- ptr_to_fresh "res_is_inf" i16;
//   (res, res_ptr) <- ptr_to_fresh "res" (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length)));
//   crucible_precond {{ digitp >=$ -31 /\ digitp <=$ 31 }};
//   crucible_precond {{ digitg >=$ -31 /\ digitg <=$ 31 }};

//   crucible_execute_func [(crucible_term digitp), (crucible_term digitg), p_pre_comp_ptr, res_is_inf_ptr, res_ptr];

//   global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

//   crucible_points_to res_is_inf_ptr
//     (crucible_term {{ (double_add_public p_pre_comp (res_is_inf, res) (digitp, digitg)).0 }});
//   crucible_points_to res_ptr
//     (crucible_term {{ (double_add_public p_pre_comp (res_is_inf, res) (digitp, digitg)).1 }});
// };

// p384_double_add_public_ov <- llvm_verify m "ec_GFp_nistp384_double_add_public"
//   [ p384_point_add_jac_ov
//   , p384_point_add_same_l_jac_ov
//   , p384_point_add_same_l_mixed_ov
//   , p384_point_double_ov
//   , p384_point_double_same_ov
//   , bignum_neg_p384_wrapper_ov
//   , p384_felem_copy_ov
//   ]
//   true
//   p384_double_add_public_spec
//   (do {
//     simplify (addsimps [felem_opp_wrapper_felem_opp_equiv] empty_ss);
//     w4_unint_z3 ["point_double", "point_add", "felem_opp"];
//   });


let p384_point_mul_public_spec order_width = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  crucible_points_to (crucible_field (crucible_field group_ptr "order") "width") (crucible_term {{ `order_width : [32] }});
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_JACOBIAN");
  (g_scalar, g_scalar_ptr) <- ptr_to_fresh_readonly "g_scalar" i384;
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_JACOBIAN");
  p <- points_to_fresh_EC_JACOBIAN p_ptr;
  (p_scalar, p_scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;

  crucible_execute_func [group_ptr, r_ptr, g_scalar_ptr, p_ptr, p_scalar_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_EC_JACOBIAN r_ptr {{ point_mul_public_generic g_scalar p p_scalar }};
};

// 1. Override is taking a super long time.
disable_safety_proofs;
p384_point_mul_public_ov <- llvm_verify m "ec_GFp_nistp384_point_mul_public"
  [ ec_compute_wNAF_ov
  , p384_point_add_jac_ov
  , p384_point_add_same_l_jac_ov
  , p384_point_add_same_l_mixed_ov
  , p384_point_double_ov
  , p384_point_double_same_ov
  , bignum_neg_p384_wrapper_ov
  , p384_felem_copy_ov
  , bignum_fromlebytes_6_ov
  , bignum_tolebytes_6_ov
  ]
  true
  (p384_point_mul_public_spec p384_felem_limbs)
  (do {
     print_goal;
     w4_unint_z3 ["felem_sqr", "felem_add", "felem_sub", "felem_mul", "felem_opp", "felem_cmovznz", "felem_to_bytes", "felem_from_bytes", "ec_compute_wNAF"];
  });
enable_safety_proofs;
