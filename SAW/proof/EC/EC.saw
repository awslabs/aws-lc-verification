/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


/*
 * Verification parameters.
 */
let ec_bits = eval_size {| P384_w |};
let ec_bytes = eval_size {| (ec_bits + 7) / 8 |};
let ec_words = eval_size {| (ec_bytes + 7) / 8 |};
let EC_MAX_BYTES = 66;
let EC_MAX_WORDS = eval_size {| ((EC_MAX_BYTES + 7) / 8) |};

let NID_secp384r1 = 715;
let NID_X9_62_id_ecPublicKey = 408;
let EVP_PKEY_EC = NID_X9_62_id_ecPublicKey;
let EVP_PKEY_OP_UNDEFINED = 0;
let EVP_PKEY_OP_KEYGEN = eval_int {{ (1 << 2) : [64] }};
let EVP_PKEY_OP_PARAMGEN = eval_int {{ (1 << 9) : [64] }};


include "memory.saw";


let points_to_p384_bignum_st ptr d_ptr flags = points_to_bignum_st ptr d_ptr ec_words ec_words flags;


let points_to_ec_method_st ptr = do {
  crucible_points_to (crucible_field ptr "group_init") (crucible_global "ec_GFp_mont_group_init");
  crucible_points_to (crucible_field ptr "group_finish") (crucible_global "ec_GFp_mont_group_finish");
  crucible_points_to (crucible_field ptr "group_set_curve") (crucible_global "ec_GFp_mont_group_set_curve");
  crucible_points_to (crucible_field ptr "point_get_affine_coordinates") (crucible_global "ec_GFp_mont_point_get_affine_coordinates");
  crucible_points_to (crucible_field ptr "jacobian_to_affine_batch") (crucible_global "ec_GFp_mont_jacobian_to_affine_batch");
  crucible_points_to (crucible_field ptr "add") (crucible_global "ec_GFp_mont_add");
  crucible_points_to (crucible_field ptr "dbl") (crucible_global "ec_GFp_mont_dbl");
  crucible_points_to (crucible_field ptr "mul") (crucible_global "ec_GFp_mont_mul");
  crucible_points_to (crucible_field ptr "mul_base") (crucible_global "ec_GFp_mont_mul_base");
  crucible_points_to (crucible_field ptr "mul_batch") (crucible_global "ec_GFp_mont_mul_batch");
  crucible_points_to (crucible_field ptr "mul_public") crucible_null;
  crucible_points_to (crucible_field ptr "mul_public_batch") (crucible_global "ec_GFp_mont_mul_public_batch");
  crucible_points_to (crucible_field ptr "init_precomp") (crucible_global "ec_GFp_mont_init_precomp");
  crucible_points_to (crucible_field ptr "mul_precomp") (crucible_global "ec_GFp_mont_mul_precomp");
  crucible_points_to (crucible_field ptr "felem_mul") (crucible_global "ec_GFp_mont_felem_mul");
  crucible_points_to (crucible_field ptr "felem_sqr") (crucible_global "ec_GFp_mont_felem_sqr");
  crucible_points_to (crucible_field ptr "felem_to_bytes") (crucible_global "ec_GFp_mont_felem_to_bytes");
  crucible_points_to (crucible_field ptr "felem_from_bytes") (crucible_global "ec_GFp_mont_felem_from_bytes");
  crucible_points_to (crucible_field ptr "felem_reduce") (crucible_global "ec_GFp_mont_felem_reduce");
  crucible_points_to (crucible_field ptr "felem_exp") (crucible_global "ec_GFp_mont_felem_exp");
  crucible_points_to (crucible_field ptr "scalar_inv0_montgomery") (crucible_global "ec_simple_scalar_inv0_montgomery");
  crucible_points_to (crucible_field ptr "scalar_to_montgomery_inv_vartime") (crucible_global "ec_simple_scalar_to_montgomery_inv_vartime");
  crucible_points_to (crucible_field ptr "cmp_x_coordinate") (crucible_global "ec_GFp_mont_cmp_x_coordinate");
};

let points_to_built_in_curve ptr ec_method_ptr = do {
  crucible_points_to (crucible_elem ptr 0) (crucible_term {{ `NID_secp384r1 : [32] }});
  crucible_points_to (crucible_elem ptr 1) (crucible_global "OPENSSL_built_in_curves_do_init.kOIDP384");
  crucible_points_to (crucible_elem ptr 2) (crucible_term {{ 5 : [8] }});
  crucible_points_to (crucible_elem ptr 4) (crucible_term {{ 48 : [8] }});
  crucible_points_to (crucible_elem ptr 5) (crucible_global "kP384Params");
  crucible_points_to (crucible_elem ptr 6) ec_method_ptr;
  points_to_ec_method_st ec_method_ptr;
};


let EC_GFp_mont_method_spec = do {
  crucible_alloc_global "EC_GFp_mont_method_storage";
  crucible_execute_func [];
  points_to_ec_method_st (crucible_global "EC_GFp_mont_method_storage");
  crucible_return (crucible_global "EC_GFp_mont_method_storage");
};

let EC_GFp_nistz256_method_spec = do {
  crucible_alloc_global "EC_GFp_nistz256_method_storage";
  crucible_execute_func [];
  crucible_return (crucible_global "EC_GFp_nistz256_method_storage");
};

let EC_GFp_nistp224_method_spec = do {
  crucible_alloc_global "EC_GFp_nistp224_method_storage";
  crucible_execute_func [];
  crucible_return (crucible_global "EC_GFp_nistp224_method_storage");
};

let OPENSSL_built_in_curves_init_spec = do {
  crucible_alloc_global "OPENSSL_built_in_curves_storage";
  crucible_alloc_global "EC_GFp_mont_method_storage";
  crucible_alloc_global "EC_GFp_nistz256_method_storage";
  crucible_alloc_global "EC_GFp_nistp224_method_storage";
  crucible_execute_func [];
  points_to_built_in_curve
    (crucible_elem (crucible_field (crucible_global "OPENSSL_built_in_curves_storage") "curves") 1)
    (crucible_global "EC_GFp_mont_method_storage");
};


let points_to_EC_WRAPPED_SCALAR ptr scalar = do {
  points_to_p384_bignum_st (crucible_field ptr "bignum") (crucible_field ptr "scalar") BN_FLG_STATIC_DATA;
  crucible_points_to_untyped (crucible_field ptr "scalar") (crucible_term scalar);
};

let points_to_EC_RAW_POINT ptr point = do {
  crucible_points_to_untyped (crucible_field ptr "X") (crucible_term {{ point.X }});
  crucible_points_to_untyped (crucible_field ptr "Y") (crucible_term {{ point.Y }});
  crucible_points_to_untyped (crucible_field ptr "Z") (crucible_term {{ point.Z }});
};

let points_to_fresh_EC_RAW_POINT ptr = do {
  X <- crucible_fresh_var "raw.X" i384;
  crucible_points_to_untyped (crucible_field ptr "X") (crucible_term X);
  Y <- crucible_fresh_var "raw.Y" i384;
  crucible_points_to_untyped (crucible_field ptr "Y") (crucible_term Y);
  Z <- crucible_fresh_var "raw.Z" i384;
  crucible_points_to_untyped (crucible_field ptr "Z") (crucible_term Z);
  return {{ { X = X, Y = Y, Z = Z } : JacobianBVPoint }};
};

let points_to_ec_point_st ptr group_ptr point = do {
  crucible_points_to (crucible_field ptr "group") group_ptr;
  points_to_EC_RAW_POINT (crucible_field ptr "raw") point;
};

let points_to_fresh_ec_point_st ptr group_ptr = do {
  crucible_points_to (crucible_field ptr "group") group_ptr;
  points_to_fresh_EC_RAW_POINT (crucible_field ptr "raw");
};

let pointer_to_fresh_ec_group_st_with_curve_name curve_name = do {
  ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");

  meth_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_method_st");
  points_to_ec_method_st meth_ptr;
  crucible_points_to (crucible_field ptr "meth") meth_ptr;

  generator_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_point_st");
  points_to_ec_point_st generator_ptr ptr {{ jacobianToMontBV P384_G_Jacobian }};
  crucible_points_to (crucible_field ptr "generator") generator_ptr;

  order_d_ptr <- crucible_alloc_readonly i384;
  crucible_points_to order_d_ptr (crucible_term {{ fromInteger`{[P384_w]} `P384_n }});
  points_to_p384_bignum_st (crucible_field ptr "order") order_d_ptr {{ 0 : [32] }};

  crucible_points_to (crucible_field ptr "curve_name") (crucible_term {{ `curve_name : [32] }});

  order_mont_ptr <- pointer_to_bn_mont_ctx_st ec_words {| P384_n |};
  crucible_points_to (crucible_field ptr "order_mont") order_mont_ptr;

  field_d_ptr <- crucible_alloc_readonly i384;
  crucible_points_to field_d_ptr (crucible_term {{ fromInteger`{[P384_w]} `P384_p }});
  points_to_p384_bignum_st (crucible_field ptr "field") field_d_ptr {{ 0 : [32] }};

  crucible_points_to_untyped (crucible_field ptr "a") (crucible_term {{ fieldElementToBV ((P384_a * P384_R_p) % `P384_p) }});
  crucible_points_to_untyped (crucible_field ptr "b") (crucible_term {{ fieldElementToBV ((P384_b * P384_R_p) % `P384_p) }});
  crucible_points_to (crucible_field ptr "a_is_minus3") (crucible_term {{ 1 : [32] }});
  crucible_points_to (crucible_field ptr "field_greater_than_order") (crucible_term {{ 1 : [32] }});
  crucible_points_to_untyped (crucible_field ptr "field_minus_order") (crucible_term {{ fromInteger`{[P384_w]} (`P384_p - `P384_n) }});

  mont_ptr <- pointer_to_bn_mont_ctx_st ec_words {| P384_p |};
  crucible_points_to (crucible_field ptr "mont") mont_ptr;

  crucible_points_to_untyped (crucible_field ptr "one") (crucible_term {{ fieldElementToBV P384_R_p }});

  return ptr;
};
let pointer_to_fresh_ec_group_st = pointer_to_fresh_ec_group_st_with_curve_name NID_secp384r1;


let points_to_evp_pkey_ctx_st_common ptr = do {
  crucible_points_to (crucible_field ptr "pmeth") (crucible_global "ec_pkey_meth");
  crucible_points_to (crucible_field ptr "engine") crucible_null;
};

let points_to_evp_pkey_ctx_st ptr pkey_ptr peerkey_ptr op data_ptr = do {
  points_to_evp_pkey_ctx_st_common ptr;
  crucible_points_to (crucible_field ptr "pkey") pkey_ptr;
  crucible_points_to (crucible_field ptr "peerkey") peerkey_ptr;
  crucible_points_to (crucible_field ptr "operation") (crucible_term {{ `op : [32] }});
  crucible_points_to (crucible_field ptr "data") data_ptr;
};

let points_to_evp_pkey_st_with_references ptr references pkey_ptr = do {
  crucible_points_to (crucible_field ptr "references") (crucible_term references);
  crucible_points_to (crucible_field ptr "type") (crucible_term {{ `EVP_PKEY_EC : [32] }});
  crucible_points_to (crucible_field ptr "pkey") pkey_ptr;
  crucible_points_to (crucible_field ptr "ameth") (crucible_global "ec_asn1_meth");
};

let points_to_evp_pkey_st ptr pkey_ptr = do {
  references <- crucible_fresh_var "references" i32;
  crucible_precond {{ references != 0 }};
  points_to_evp_pkey_st_with_references ptr references pkey_ptr;
};

let POINT_CONVERSION_UNCOMPRESSED = 4;

let points_to_ec_key_st ptr group_ptr pub_key_ptr priv_key_ptr = do {
  crucible_points_to (crucible_field ptr "group") group_ptr;
  crucible_points_to (crucible_field ptr "pub_key") pub_key_ptr;
  crucible_points_to (crucible_field ptr "priv_key") priv_key_ptr;
  crucible_points_to (crucible_field ptr "enc_flag") (crucible_term {{ 0 : [32] }});
  crucible_points_to (crucible_field ptr "conv_form") (crucible_term {{ `POINT_CONVERSION_UNCOMPRESSED : [32] }});
  references <- crucible_fresh_var "references" i32;
  crucible_points_to (crucible_field ptr "references") (crucible_term references);
  crucible_points_to (crucible_field ptr "ecdsa_meth") crucible_null;
};

let pointer_to_fresh_ec_key_st group_ptr is_priv = do {
  ec_key_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_key_st");

  pub_key_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_point_st");
  pub_key <- points_to_fresh_ec_point_st pub_key_ptr group_ptr;

  (priv_key_ptr, priv_key) <- if is_priv then do {
    priv_key_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_WRAPPED_SCALAR");
    priv_key <- crucible_fresh_var "priv_key" i384;
    points_to_EC_WRAPPED_SCALAR priv_key_ptr priv_key;
    crucible_precond {{ (scalarFromBV priv_key) % `P384_n == scalarFromBV priv_key }};
    return (priv_key_ptr, priv_key);
  } else do {
    priv_key_ptr <- crucible_fresh_pointer (llvm_struct "struct.EC_WRAPPED_SCALAR");
    return (priv_key_ptr, {{ undefined : [384] }});
  };

  points_to_ec_key_st ec_key_ptr group_ptr pub_key_ptr priv_key_ptr;

  return (ec_key_ptr, pub_key, priv_key);
};

let points_to_EC_PKEY_CTX ptr md_ptr = do {
  crucible_points_to (crucible_field ptr "md") md_ptr;
};


let ec_group_new_from_data_spec = do {
  curve_ptr <- crucible_alloc_readonly (llvm_struct "struct.built_in_curve");
  ec_method_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_method_st");
  points_to_built_in_curve curve_ptr ec_method_ptr;

  crucible_execute_func [curve_ptr];

  ec_group_ptr <- pointer_to_fresh_ec_group_st_with_curve_name 0;
  crucible_return ec_group_ptr;
};

let EC_GROUP_new_by_curve_name_spec = do {
  crucible_execute_func [(crucible_term {{ `NID_secp384r1 : [32] }})];
  ec_group_ptr <- pointer_to_fresh_ec_group_st;
  crucible_return ec_group_ptr;
};


let BN_num_bits_spec num_bits = do {
  bn_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (bn, bn_d_ptr) <- ptr_to_fresh_readonly "bn" i384;
  flags <- crucible_fresh_var "flags" i32;
  points_to_p384_bignum_st bn_ptr bn_d_ptr flags;
  crucible_precond {{ is_num_bits_bn`{num_bits} bn }};
  crucible_execute_func [bn_ptr];
  crucible_return (crucible_term {{ `num_bits : [32] }});
};

let BN_is_zero_spec = do {
  bn_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (bn, bn_d_ptr) <- ptr_to_fresh_readonly "bn" i384;
  flags <- crucible_fresh_var "flags" i32;
  points_to_p384_bignum_st bn_ptr bn_d_ptr flags;
  crucible_execute_func [bn_ptr];
  crucible_return (crucible_term {{ if scalarFromBV bn == 0 then 1 : [32] else 0 }});
};

let BN_is_zero_false_spec = do {
  bn_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (bn, bn_d_ptr) <- ptr_to_fresh_readonly "bn" i384;
  flags <- crucible_fresh_var "flags" i32;
  points_to_p384_bignum_st bn_ptr bn_d_ptr flags;
  crucible_precond {{ scalarFromBV bn != 0 }};
  crucible_execute_func [bn_ptr];
  crucible_return (crucible_term {{ 0 : [32] }});
};

let ec_scalar_is_zero_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  crucible_execute_func [group_ptr, a_ptr];
  crucible_return (crucible_term {{ if scalarFromBV a == 0 then 1 : [32] else 0 }});
};

let ec_scalar_is_zero_false_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  crucible_precond {{ scalarFromBV a != 0 }};
  crucible_execute_func [group_ptr, a_ptr];
  crucible_return (crucible_term {{ 0 : [32] }});
};

let ec_bignum_to_scalar_spec = do {
  ec_group_ptr <- pointer_to_fresh_ec_group_st;
  out_ptr <- crucible_alloc i384;
  in_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (in_, in_d_ptr) <- ptr_to_fresh_readonly "in" i384;
  flags <- crucible_fresh_var "flags" i32;
  points_to_p384_bignum_st in_ptr in_d_ptr flags;

  crucible_execute_func [ec_group_ptr, out_ptr, in_ptr];

  crucible_points_to out_ptr (crucible_term in_);
  crucible_return (crucible_term {{ if scalarFromBV in_ < `P384_n then 1 : [32] else 0 }});
};

let ec_scalar_to_montgomery_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc i384;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;

  crucible_execute_func [group_ptr, r_ptr, a_ptr];

  crucible_points_to r_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * P384_R_n) % `P384_n) }});
};

let ec_scalar_to_montgomery_same_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh "a" i384;

  crucible_execute_func [group_ptr, a_ptr, a_ptr];

  crucible_points_to a_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * P384_R_n) % `P384_n) }});
};

let ec_scalar_from_montgomery_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc i384;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;

  crucible_execute_func [group_ptr, r_ptr, a_ptr];

  crucible_points_to r_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * P384_R_n_inv) % `P384_n) }});
};

let ec_scalar_from_montgomery_same_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh "a" i384;

  crucible_execute_func [group_ptr, a_ptr, a_ptr];

  crucible_points_to a_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * P384_R_n_inv) % `P384_n) }});
};

let ec_scalar_add_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc i384;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" i384;
  crucible_precond {{ (scalarFromBV a) % `P384_n == scalarFromBV a }};
  crucible_precond {{ (scalarFromBV b) % `P384_n == scalarFromBV b }};

  crucible_execute_func [group_ptr, r_ptr, a_ptr, b_ptr];

  crucible_points_to r_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) + (scalarFromBV b)) % `P384_n) }});
};

let ec_scalar_add_same_l_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" i384;
  crucible_precond {{ (scalarFromBV a) % `P384_n == scalarFromBV a }};
  crucible_precond {{ (scalarFromBV b) % `P384_n == scalarFromBV b }};

  crucible_execute_func [group_ptr, a_ptr, a_ptr, b_ptr];

  crucible_points_to a_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) + (scalarFromBV b)) % `P384_n) }});
};

let ec_scalar_mul_montgomery_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc i384;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" i384;

  crucible_execute_func [group_ptr, r_ptr, a_ptr, b_ptr];

  crucible_points_to r_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * (scalarFromBV b) * P384_R_n_inv) % `P384_n) }});
};

let ec_scalar_mul_montgomery_same_r_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  (b, b_ptr) <- ptr_to_fresh "b" i384;

  crucible_execute_func [group_ptr, b_ptr, a_ptr, b_ptr];

  crucible_points_to b_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * (scalarFromBV b) * P384_R_n_inv) % `P384_n) }});
};

let ec_scalar_mul_montgomery_same_l_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  (a, a_ptr) <- ptr_to_fresh "a" i384;
  (b, b_ptr) <- ptr_to_fresh_readonly "b" i384;

  crucible_execute_func [group_ptr, a_ptr, a_ptr, b_ptr];

  crucible_points_to a_ptr (crucible_term {{ scalarToBV (((scalarFromBV a) * (scalarFromBV b) * P384_R_n_inv) % `P384_n) }});
};

let ec_simple_scalar_inv0_montgomery_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc i384;
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;

  crucible_execute_func [group_ptr, r_ptr, a_ptr];

  crucible_points_to r_ptr (crucible_term {{ scalarToBV (((inv0 (scalarFromBV a)) * P384_R_n * P384_R_n) % `P384_n) }});
};


ec_random_nonzero_scalar_out <- crucible_declare_ghost_state "ec_random_nonzero_scalar_out";

let ec_random_nonzero_scalar_spec = do {
  out <- crucible_fresh_cryptol_var "out" {| Integer |};
  crucible_ghost_value ec_random_nonzero_scalar_out out;

  group_ptr <- pointer_to_fresh_ec_group_st;
  out_ptr <- crucible_alloc i384;
  (_additional_data, additional_data_ptr) <- ptr_to_fresh_readonly "a" (llvm_array 32 i8);

  crucible_execute_func [group_ptr, out_ptr, additional_data_ptr];

  crucible_points_to out_ptr (crucible_term {{ scalarToBV (out % `P384_n) }});
  crucible_return (crucible_term {{ 1 : [32] }});
};


let ec_point_mul_scalar_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_RAW_POINT");
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_RAW_POINT");
  p <- points_to_fresh_EC_RAW_POINT p_ptr;
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;
  crucible_precond {{ (scalarFromBV scalar) % `P384_n == scalarFromBV scalar }};

  crucible_execute_func [group_ptr, r_ptr, p_ptr, scalar_ptr];

  points_to_EC_RAW_POINT r_ptr
    {{ jacobianToMontBV (ec_point_jacobian_scalar_mul (scalarFromBV scalar) (jacobianFromMontBV p)) }};
  crucible_return (crucible_term {{ 1 : [32] }});
};

let ec_point_mul_scalar_base_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_RAW_POINT");
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "scalar" i384;
  crucible_precond {{ (scalarFromBV scalar) % `P384_n == scalarFromBV scalar }};

  crucible_execute_func [group_ptr, r_ptr, scalar_ptr];

  points_to_EC_RAW_POINT r_ptr {{ jacobianToMontBV (ec_point_jacobian_scalar_mul (scalarFromBV scalar) P384_G_Jacobian) }};
  crucible_return (crucible_term {{ 1 : [32] }});
};

let ec_point_mul_scalar_public_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_RAW_POINT");
  (g_scalar, g_scalar_ptr) <- ptr_to_fresh_readonly "g_scalar" i384;
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_RAW_POINT");
  p <- points_to_fresh_EC_RAW_POINT p_ptr;
  (p_scalar, p_scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;
  crucible_precond {{ (scalarFromBV g_scalar) % `P384_n == scalarFromBV g_scalar }};
  crucible_precond {{ (scalarFromBV p_scalar) % `P384_n == scalarFromBV p_scalar }};

  crucible_execute_func [group_ptr, r_ptr, g_scalar_ptr, p_ptr, p_scalar_ptr];

  points_to_EC_RAW_POINT r_ptr
    {{ jacobianToMontBV (ec_point_jacobian_add (ec_point_jacobian_scalar_mul (scalarFromBV g_scalar) P384_G_Jacobian) (ec_point_jacobian_scalar_mul (scalarFromBV p_scalar) (jacobianFromMontBV p))) }};
  crucible_return (crucible_term {{ 1 : [32] }});
};

let ec_cmp_x_coordinate_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_RAW_POINT");
  p <- points_to_fresh_EC_RAW_POINT p_ptr;
  (r, r_ptr) <- ptr_to_fresh_readonly "r" i384;

  crucible_execute_func [group_ptr, p_ptr, r_ptr];

  crucible_return (crucible_term {{ if (fromJacobian (jacobianFromMontBV p)).x % `P384_n == (scalarFromBV r) % `P384_n then 1 : [32] else 0 }});
};

let ec_get_x_coordinate_as_scalar_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  out_ptr <- crucible_alloc i384;
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_RAW_POINT");
  p <- points_to_fresh_EC_RAW_POINT p_ptr;

  crucible_execute_func [group_ptr, out_ptr, p_ptr];

  crucible_points_to out_ptr (crucible_term {{ scalarToBV (((fromJacobian (jacobianFromMontBV p)).x) % `P384_n) }});
  crucible_return (crucible_term {{ 1 : [32] }});
};

let ec_get_x_coordinate_as_bytes_spec = do {
  group_ptr <- pointer_to_fresh_ec_group_st;
  out_ptr <- crucible_alloc (llvm_array EC_MAX_BYTES i8);
  out_len_ptr <- crucible_alloc i64;
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_RAW_POINT");
  p <- points_to_fresh_EC_RAW_POINT p_ptr;

  crucible_execute_func [group_ptr, out_ptr, out_len_ptr, (crucible_term {{ `EC_MAX_BYTES : [64] }}), p_ptr];

  crucible_points_to_untyped out_ptr (crucible_term {{ split`{each=8} (fieldElementToBV (((fromJacobian (jacobianFromMontBV p)).x) % `P384_p)) }});
  crucible_points_to out_len_ptr (crucible_term {{ `ec_bytes : [64] }});
  crucible_return (crucible_term {{ 1 : [32] }});
};


////////////////////////////////////////////////////////////////////////////////
// Proof commands

EC_GFp_mont_method_ov <- crucible_llvm_unsafe_assume_spec
  m
  "EC_GFp_mont_method"
  EC_GFp_mont_method_spec;
EC_GFp_nistz256_method_ov <- crucible_llvm_unsafe_assume_spec
  m
  "EC_GFp_nistz256_method"
  EC_GFp_nistz256_method_spec;
EC_GFp_nistp224_method_ov <- crucible_llvm_unsafe_assume_spec
  m
  "EC_GFp_nistp224_method"
  EC_GFp_nistp224_method_spec;


bn_add_words_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_add_words"
  (bn_add_words_spec ec_words);
bn_add_words_same_res_left_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_add_words"
  (bn_add_words_same_res_left_spec ec_words);

bn_sub_words_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_sub_words"
  (bn_sub_words_spec ec_words);

bn_mul_mont_p_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_mul_mont"
  (bn_mul_mont_spec ec_words {| P384_p |});
bn_mul_mont_same_res_left_p_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_mul_mont"
  (bn_mul_mont_same_res_left_spec ec_words {| P384_p |});
bn_mul_mont_n_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_mul_mont"
  (bn_mul_mont_spec ec_words {| P384_n |});
bn_mul_mont_same_res_left_n_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_mul_mont"
  (bn_mul_mont_same_res_left_spec ec_words {| P384_n |});
bn_mul_mont_same_res_right_n_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_mul_mont"
  (bn_mul_mont_same_res_right_spec ec_words {| P384_n |});
bn_mul_mont_same_res_left_n_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_mul_mont"
  (bn_mul_mont_same_res_left_spec ec_words {| P384_n |});

bn_select_words_true_ov <- llvm_verify
  m
  "bn_select_words"
  [constant_time_select_w_true_ov]
  true
  (bn_select_words_true_spec ec_words)
  (do {
    w4_unint_z3 [];
  });
bn_select_words_same_res_left_true_ov <- llvm_verify
  m
  "bn_select_words"
  [constant_time_select_w_true_ov]
  true
  (bn_select_words_same_res_left_true_spec ec_words)
  (do {
    w4_unint_z3 [];
  });
bn_select_words_false_ov <- llvm_verify
  m
  "bn_select_words"
  [constant_time_select_w_false_ov]
  true
  (bn_select_words_false_spec ec_words)
  (do {
    w4_unint_z3 [];
  });
bn_select_words_same_res_left_false_ov <- llvm_verify
  m
  "bn_select_words"
  [constant_time_select_w_false_ov]
  true
  (bn_select_words_same_res_left_false_spec ec_words)
  (do {
    w4_unint_z3 [];
  });

bn_reduce_once_in_place_true_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bn_reduce_once_in_place"
  (bn_reduce_once_in_place_spec true ec_words);
bn_reduce_once_in_place_false_ov <- llvm_verify
  m
  "bn_reduce_once_in_place"
  [ bn_sub_words_ov
  , bn_select_words_same_res_left_true_ov
  , bn_select_words_same_res_left_false_ov
  ]
  true
  (bn_reduce_once_in_place_spec false ec_words)
  (do {
    goal_eval_unint ["integerToBV", "integerFromBV"];
    simplify (addsimp integerBV_thm empty_ss);
    simplify (addsimp ite_integerToBV_thm empty_ss);
    w4_unint_z3 ["integerToBV", "integerFromBV"];
  });


BN_div_ov <- crucible_llvm_unsafe_assume_spec
  m
  "BN_div"
  (BN_div_spec (eval_size {| 2 * ec_words + 1 |}) ec_words);


llvm_verify m "ec_group_new_from_data"
  [ OPENSSL_malloc_ov
  , OPENSSL_free_nonnull_bignum_st_ov
  , OPENSSL_free_nonnull_ec_bytes_ov
  , OPENSSL_free_null_ov
  , OPENSSL_cleanse_ov
  , CRYPTO_refcount_inc_ov
  , CRYPTO_refcount_dec_and_test_zero_ov
  , BN_div_ov
  , BN_value_one_ov
  , bn_add_words_ov
  , bn_add_words_same_res_left_ov
  , bn_sub_words_ov
  , bn_mul_mont_p_ov
  , bn_mul_mont_same_res_left_p_ov
  , value_barrier_w_ov
  ]
  true
  ec_group_new_from_data_spec
  (w4_unint_yices []);

EC_GROUP_new_by_curve_name_ov <- crucible_llvm_unsafe_assume_spec
  m
  "EC_GROUP_new_by_curve_name"
  EC_GROUP_new_by_curve_name_spec;


BN_is_zero_ov <- llvm_verify
  m
  "BN_is_zero"
  [ value_barrier_w_ov
  ]
  true
  BN_is_zero_spec
  (w4_unint_z3 []);
BN_is_zero_false_ov <- llvm_verify
  m
  "BN_is_zero"
  [ value_barrier_w_ov
  ]
  true
  BN_is_zero_false_spec
  (w4_unint_z3 []);

ec_scalar_is_zero_ov <- llvm_verify
  m
  "ec_scalar_is_zero"
  []
  true
  ec_scalar_is_zero_spec
  (w4_unint_z3 []);
ec_scalar_is_zero_false_ov <- llvm_verify
  m
  "ec_scalar_is_zero"
  []
  true
  ec_scalar_is_zero_false_spec
  (w4_unint_z3 []);

ec_bignum_to_scalar_ov <- llvm_verify
  m
  "ec_bignum_to_scalar"
  [ value_barrier_w_ov
  , ERR_put_error_ov
  ]
  true
  ec_bignum_to_scalar_spec
  (w4_unint_z3 []);

ec_scalar_to_montgomery_ov <- llvm_verify
  m
  "ec_scalar_to_montgomery"
  [bn_mul_mont_n_ov]
  true
  ec_scalar_to_montgomery_spec
  (do {
    goal_eval_unint [];
    w4_unint_z3 [];
  });
ec_scalar_to_montgomery_same_ov <- llvm_verify
  m
  "ec_scalar_to_montgomery"
  [bn_mul_mont_same_res_left_n_ov]
  true
  ec_scalar_to_montgomery_same_spec
  (do {
    goal_eval_unint [];
    w4_unint_z3 [];
  });

ec_scalar_from_montgomery_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_scalar_from_montgomery"
  ec_scalar_from_montgomery_spec;
ec_scalar_from_montgomery_same_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_scalar_from_montgomery"
  ec_scalar_from_montgomery_same_spec;

ec_scalar_add_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_scalar_add"
  ec_scalar_add_spec;

ec_scalar_add_same_l_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_scalar_add"
  ec_scalar_add_same_l_spec;

ec_scalar_mul_montgomery_ov <- llvm_verify
  m
  "ec_scalar_mul_montgomery"
  [bn_mul_mont_n_ov]
  true
  ec_scalar_mul_montgomery_spec
  (do {
    goal_eval_unint [];
    w4_unint_z3 [];
  });

ec_scalar_mul_montgomery_same_r_ov <- llvm_verify
  m
  "ec_scalar_mul_montgomery"
  [bn_mul_mont_same_res_right_n_ov]
  true
  ec_scalar_mul_montgomery_same_r_spec
  (do {
    goal_eval_unint [];
    w4_unint_z3 [];
  });

ec_scalar_mul_montgomery_same_l_ov <- llvm_verify
  m
  "ec_scalar_mul_montgomery"
  [bn_mul_mont_same_res_left_n_ov]
  true
  ec_scalar_mul_montgomery_same_l_spec
  (do {
    goal_eval_unint [];
    w4_unint_z3 [];
  });

ec_simple_scalar_inv0_montgomery_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_simple_scalar_inv0_montgomery"
  ec_simple_scalar_inv0_montgomery_spec;

ec_random_nonzero_scalar_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_random_nonzero_scalar"
  ec_random_nonzero_scalar_spec;


ec_point_mul_scalar_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_point_mul_scalar"
  ec_point_mul_scalar_spec;

ec_point_mul_scalar_base_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_point_mul_scalar_base"
  ec_point_mul_scalar_base_spec;

ec_point_mul_scalar_public_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_point_mul_scalar_public"
  ec_point_mul_scalar_public_spec;

ec_cmp_x_coordinate_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_cmp_x_coordinate"
  ec_cmp_x_coordinate_spec;

ec_get_x_coordinate_as_scalar_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_get_x_coordinate_as_scalar"
  ec_get_x_coordinate_as_scalar_spec;

ec_get_x_coordinate_as_bytes_ov <- crucible_llvm_unsafe_assume_spec
  m
  "ec_get_x_coordinate_as_bytes"
  ec_get_x_coordinate_as_bytes_spec;

