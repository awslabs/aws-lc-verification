
include "../common/memory.saw";

// Verify the validation functions that are used to check certain hard-coded
// values. After combining these SAW proofs with Coq proofs on the (extracted)
// Cryptol specs, we can concluded that the values are correct if the validation
// succeeded.

let felem_ne_spec = do {
  
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (f1, f1_ptr) <- ptr_to_fresh_readonly "f1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (f2, f2_ptr) <- ptr_to_fresh_readonly "f2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [f1_ptr, f2_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ felem_ne f1 f2 }});
};

let felem_ne_constant_spec = do {
  
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (f1, f1_ptr) <- ptr_to_fresh_readonly "f1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (f2, f2_ptr) <- ptr_to_fresh_readonly "f2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [f1_ptr, f2_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ felem_ne_wrapper u f1 f2}});
};

let test_jacobian_affine_eq_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (x, x_ptr) <- ptr_to_fresh_readonly "x" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y, y_ptr) <- ptr_to_fresh_readonly "y" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z, z_ptr) <- ptr_to_fresh_readonly "z" (llvm_array p384_felem_limbs (llvm_int limb_length));

  (ax, ax_ptr) <- ptr_to_fresh_readonly "ax" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (ay, ay_ptr) <- ptr_to_fresh_readonly "ay" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x_ptr, y_ptr, z_ptr, ax_ptr, ay_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ (zero:[31]) # [jacobian_affine_eq [x, y, z] [ax, ay]] }});
};

felem_ne_ov <- llvm_verify m "p384_felem_ne"
  [ p384_sub_ov
  , bignum_nonzero_6_ov
  ]
  true
  felem_ne_spec
  (do {
    w4_unint_z3 ["felem_sub", "felem_nz"];
  });

felem_ne_wrapper_felem_ne_equiv <-
  prove_print
  (w4_unint_z3 ["felem_ne"])
  (rewrite (cryptol_ss ()) {{ \x y z -> (felem_ne_wrapper x y z) == (felem_ne y z) }});

felem_ne_constant_ov <- crucible_llvm_unsafe_assume_spec
  m
  "p384_felem_ne"
  felem_ne_constant_spec;

test_jacobian_affine_eq_ov <- llvm_verify m "test_jacobian_affine_eq"
  [ p384_square_ov
  , p384_mul_ov
  , p384_mul_same_l_ov
  , felem_ne_ov
  , bignum_nonzero_6_ov
  ]
  true
  test_jacobian_affine_eq_spec
  (do {
    w4_unint_z3 ["felem_sqr", "felem_mul", "felem_ne", "felem_nz"];
  });

let p384_validate_base_table_row_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  (row, row_ptr) <- ptr_to_fresh_readonly "row" (llvm_array 16 (llvm_array 2 (llvm_array p384_felem_limbs (llvm_int limb_length))));

  (x, x_ptr) <- ptr_to_fresh_readonly "x" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y, y_ptr) <- ptr_to_fresh_readonly "y" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z, z_ptr) <- ptr_to_fresh_readonly "z" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [row_ptr, x_ptr, y_ptr, z_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ (zero:[31]) # [validate_base_row [x, y, z] row] }});
};

p384_validate_base_table_row_ov <- llvm_verify m "p384_validate_base_table_row"
  [ p384_felem_methods_ov
  , test_jacobian_affine_eq_ov 
  , ec_nistp_point_add_p384_same_l_jac_ov
  , ec_nistp_point_double_p384_ov
  ]
  true
  p384_validate_base_table_row_spec
  (do {
    w4_unint_z3 ["jacobian_affine_eq", "point_add", "point_double"];
  });

let point_double_n_20_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  (x, x_ptr) <- ptr_to_fresh "x" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y, y_ptr) <- ptr_to_fresh "y" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z, z_ptr) <- ptr_to_fresh "z" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x_ptr, y_ptr, z_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_points_to x_ptr (crucible_term {{(point_double_base_tsize [x, y, z])@0}});
  crucible_points_to y_ptr (crucible_term {{(point_double_base_tsize [x, y, z])@1}});
  crucible_points_to z_ptr (crucible_term {{(point_double_base_tsize [x, y, z])@2}});
};

point_double_n_20_ov <- llvm_verify m "point_double_n_20"
  [ p384_felem_methods_ov
  , ec_nistp_point_double_p384_same_ov
  ]
  true
  (point_double_n_20_spec)
  (do {
    w4_unint_z3 ["point_double"];
  });

let p384_validate_base_table_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  pre_comp_table <- crucible_fresh_var "pre_comp_table" (llvm_array 20 (llvm_array 16 (llvm_array 2 (llvm_array p384_felem_limbs (llvm_int limb_length)))));
  global_points_to "p384_g_pre_comp" pre_comp_table;

  crucible_execute_func [];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ (zero:[31]) # [validate_base_table pre_comp_table] }});
};

let p384_validate_one_constant_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_execute_func [];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ (zero:[31]) # [validate_one_wrapper u p384_felem_one] }});
};

let p384_validate_constants_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  pre_comp_table <- crucible_fresh_var "pre_comp_table" (llvm_array 20 (llvm_array 16 (llvm_array 2 (llvm_array p384_felem_limbs (llvm_int limb_length)))));
  global_points_to "p384_g_pre_comp" pre_comp_table;

  crucible_execute_func [];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  crucible_return (crucible_term {{ (zero:[31]) # [(validate_base_table pre_comp_table) && (validate_one p384_felem_one)] }});
};


p384_validate_base_table_ov <- llvm_verify m "p384_validate_base_table"
  [ p384_validate_base_table_row_ov,
	point_double_n_20_ov
  ]
  true
  p384_validate_base_table_spec
  (do {
    w4_unint_z3 ["validate_base_row", "point_double_base_tsize"];
  });

validate_one_wrapper_validate_one_equiv <-
  prove_print
  (w4_unint_z3 ["validate_one"])
  (rewrite (cryptol_ss ()) {{ \x y -> (validate_one_wrapper x y) == (validate_one y) }});


p384_validate_one_ov <- llvm_verify m "p384_validate_one"
  [bignum_tomont_p384_same_constant_ov, felem_ne_constant_ov]
  true
  p384_validate_one_constant_spec
  (do {
    simplify (addsimps [felem_ne_wrapper_felem_ne_equiv, felem_to_mont_wrapper_felem_to_mont_equiv, validate_one_wrapper_validate_one_equiv] empty_ss);
    w4_unint_z3 ["felem_to_mont", "felem_ne"];
  });

p384_validate_constants_ov <- llvm_verify m "p384_validate_constants"
  [p384_validate_base_table_ov, p384_validate_one_ov]
  true
  p384_validate_constants_spec
  (do {
    simplify (addsimps [validate_one_wrapper_validate_one_equiv] empty_ss);
    w4_unint_z3 ["validate_base_table", "validate_one"];
  });


