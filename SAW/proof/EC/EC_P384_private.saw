/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

import "../../spec/EC/EC_P384_5.cry";

include "../common/helpers.saw";
include "../common/internal.saw";
include "EC_P384_primitives.saw";
include "../BN/BN.saw";

let limb_length = 64;
let p384_felem_limbs = 6;
let wsize = 5;
let numWindows = 77;
let tsize = 16;

let {{ ia32cap = [0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff] : [4][32] }};

let p384_select_point_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length)));
  id <- crucible_fresh_var "id" (llvm_int 64);
  (points, points_ptr) <- ptr_to_fresh_readonly "points" (llvm_array tsize (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length))));
 
  crucible_execute_func [outarg_ptr, (crucible_term id), points_ptr, (crucible_term {{`tsize}})];

  crucible_points_to outarg_ptr (crucible_term {{ select_point id points }});
};

let p384_select_point_affine_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array 2 (llvm_array p384_felem_limbs (llvm_int limb_length)));
  id <- crucible_fresh_var "id" (llvm_int 64);
  (points, points_ptr) <- ptr_to_fresh_readonly "points" (llvm_array tsize (llvm_array 2 (llvm_array p384_felem_limbs (llvm_int limb_length))));

  crucible_execute_func [outarg_ptr, (crucible_term id), points_ptr, (crucible_term {{`tsize}})];

  crucible_points_to outarg_ptr (crucible_term {{ select_point_affine id points }});
};



let p384_mul_scalar_rwnaf_spec = do {
  rnaf_ptr <- crucible_alloc (llvm_array numWindows (llvm_int 16));
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "scalar" i384;
 
  crucible_execute_func [rnaf_ptr, scalar_ptr];

  crucible_points_to rnaf_ptr (crucible_term {{ mul_scalar_rwnaf scalar}});
};



let p384_point_mul_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_JACOBIAN");
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_JACOBIAN");
  p <- points_to_fresh_EC_JACOBIAN p_ptr;
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;

  crucible_execute_func [group_ptr, r_ptr, p_ptr, scalar_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_EC_JACOBIAN r_ptr 
    {{ point_mul_generic p scalar }};
};

p384_select_point_ov <- llvm_verify m
  "p384_select_point" [p384_felem_cmovznz_same_r_ov] true
  p384_select_point_spec (w4_unint_z3 []);

p384_select_point_affine_ov <- llvm_verify m
  "p384_select_point_affine" [p384_felem_cmovznz_same_r_ov] true
  p384_select_point_affine_spec (w4_unint_z3 []);

mul_scalar_rwnaf_ct_equiv <- prove_folding_theorem {{ \a -> (mul_scalar_rwnaf a) == (mul_scalar_rwnaf_ct a) }};

p384_mul_scalar_rwnaf_ov <- llvm_verify m
  "p384_felem_mul_scalar_rwnaf"
  [p384_get_bit_ov] 
  true
  p384_mul_scalar_rwnaf_spec
  (do{
  goal_eval_unint["scalar_get_bit", "mul_scalar_rwnaf"];
  simplify (addsimps [mul_scalar_rwnaf_ct_equiv] basic_ss);
  w4_unint_z3 ["scalar_get_bit"];
  });

p384_point_mul_ov <- llvm_verify m "ec_GFp_nistp384_point_mul"
  [ p384_felem_methods_ov
  , ec_nistp_point_add_p384_jac_ov
  , ec_nistp_point_add_p384_same_r_jac_ov
  , ec_nistp_point_add_p384_same_l_jac_ov
  , ec_nistp_point_double_p384_ov
  , ec_nistp_point_double_p384_same_ov
  , bignum_fromlebytes_6_ov
  , bignum_tolebytes_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_l_ov
  , p384_felem_cmovznz_same_r_ov
  , p384_select_point_ov
  , p384_mul_scalar_rwnaf_ov
  , bignum_neg_p384_ov
  , p384_felem_copy_ov
  ]
  true
  p384_point_mul_spec
  (do{
  w4_unint_z3 ["select_point", "felem_sqr", "felem_add", "felem_sub", 
  "felem_mul",
  "mul_scalar_rwnaf", "felem_opp",
  "felem_cmovznz",
  "felem_to_bytes", "felem_from_bytes"
  ];
  });

// ---------------------------------------------------------------
// point_mul_base

// Establishing the equivalence between felem_opp_wrapper and felem_opp.
// This will rewrite the felem_opp_wrapper in point_mul_base into felem_opp.
felem_opp_wrapper_felem_opp_equiv <-
  prove_print
  (w4_unint_z3 ["felem_opp"])
  (rewrite (cryptol_ss ()) {{ \x y -> (felem_opp_wrapper x y) == (felem_opp y) }});

let p384_point_mul_base_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_JACOBIAN");
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;

  crucible_execute_func [group_ptr, r_ptr, scalar_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_EC_JACOBIAN r_ptr {{ point_mul_base_generic scalar }};
};

// SAW eagerly do concrete evaluation when inputs to a function are concrete values.
// This happens in the override matching step, causing concrete evaluation of
// user-defined primitive function `felem_opp` to fail.
// To work around this issue, we define a function called `felem_opp_wrapper`
// that takes an additional input, which we assign it to be a fresh symbolic value.
// This prohibits SAW from performing concrete evaluation over the term
// `felem_opp_wrapper u x`. In the proof script, we rewrite `felem_opp_wrapper u x`
// to be `felem_opp x` and then perform SMT proofs treating felem_opp as uninterpreted.
// For more context, see discussion in https://github.com/GaloisInc/saw-script/pull/1903
p384_point_mul_base_ov <- llvm_verify m "ec_GFp_nistp384_point_mul_base"
  [ p384_felem_methods_ov
  , ec_nistp_point_add_p384_same_r_mixed_ov
  , ec_nistp_point_add_p384_same_l_mixed_ov
  , ec_nistp_point_double_p384_same_ov
  , bignum_tolebytes_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_l_ov
  , p384_felem_cmovznz_same_r_ov
  , p384_select_point_affine_ov
  , p384_mul_scalar_rwnaf_ov
  , bignum_neg_p384_wrapper_ov
  , p384_felem_copy_ov
  ]
  true
  p384_point_mul_base_spec
  (do {
    simplify (addsimps [felem_opp_wrapper_felem_opp_equiv] empty_ss);
    w4_unint_z3 ["select_point_affine", "felem_sqr", "felem_add", "felem_sub",
                 "felem_mul", "mul_scalar_rwnaf", "felem_opp", "felem_cmovznz",
                 "felem_to_bytes", "felem_from_bytes"];
  });


// ---------------------------------------------------------------
// point_mul_public

let bn_is_bit_set_words_spec = do {
  (a, a_ptr) <- ptr_to_fresh_readonly "a" i384;
  bit <- crucible_fresh_var "bit" i64;

  crucible_execute_func [a_ptr, (crucible_term {{ `p384_felem_limbs : [64]}}), (crucible_term bit)];

  crucible_return (crucible_term {{ bn_is_bit_set_words a bit }});
  crucible_postcond {{ (bn_is_bit_set_words a bit >= 0) /\ (bn_is_bit_set_words a bit <= 1) }};
};

bn_is_bit_set_words_ov <- llvm_verify m "bn_is_bit_set_words"
  []
  true
  bn_is_bit_set_words_spec
  (w4_unint_z3 []);

ec_compute_wNAF_in_range_lemma <-
  prove_print
    (w4_unint_z3 [])
    (rewrite (cryptol_ss ()) {{ \scalar -> ec_compute_wNAF_in_range (ec_compute_wNAF scalar) }});


let ec_compute_wNAF_out = "ec_compute_wNAF.out";
let ec_compute_wNAF_range = "ec_compute_wNAF.range";

let ec_compute_wNAF_spec w order_width = do {

  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  points_to_bn_mont_ctx_st (crucible_field group_ptr "order") order_width {| P384_n |};
  out_ptr <- crucible_alloc (llvm_array 385 i8);
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "scalar" i384;

  crucible_execute_func [group_ptr, out_ptr, scalar_ptr, (crucible_term {{384:[64]}}), (crucible_term {{`w:[32]}})];

  llvm_setup_with_tag ec_compute_wNAF_out
    (crucible_points_to out_ptr (crucible_term {{ ec_compute_wNAF scalar }}));
  llvm_setup_with_tag ec_compute_wNAF_range
    (crucible_postcond {{ ec_compute_wNAF_in_range (ec_compute_wNAF scalar) }});
};

ec_compute_wNAF_ov <- llvm_verify m "ec_compute_wNAF"
  [ bn_is_bit_set_words_ov ]
  false // Disabling path satisfiability checks because they become expensive as `window_val` expression grows.
  (ec_compute_wNAF_spec wsize p384_felem_limbs)
  (do {
    out_goal <- goal_has_some_tag [ec_compute_wNAF_out];
    range_goal <- goal_has_some_tag [ec_compute_wNAF_range];

    if range_goal then do {
      goal_eval_unint ["ec_compute_wNAF", "ec_compute_wNAF_in_range"];
      goal_insert ec_compute_wNAF_in_range_lemma;
      w4_unint_z3 ["ec_compute_wNAF", "ec_compute_wNAF_in_range"];
    } else if out_goal then do {
      goal_eval_unint ["bn_is_bit_set_words"];
      w4_unint_z3 ["bn_is_bit_set_words"];
    } else do {
      // The safety checks take 2 mins
      // Yices performs slightly better than z3 (3 mins)
      w4_unint_yices [];
    };
  });

// The loop inside ec_GFp_nistp384_point_mul_public when fully expanded causes
// performance issue with SAW. To solve this issue, we use the breakpoint feature
// provided in SAW. This feature allows one to state and prove an invariant for
// the loop inside of a function.

// The following specification is for the second loop in the function
// ec_GFp_nistp384_point_mul_public.
// For all local variables appearing in the loop (not including ones that are
// intermediate), state what preconditions they must satisfy. These preconditions
// are also part of the invariant. In the postcondition, we specify the equivalence
// between the C and the Cryptol specification. The postcondition is later used
// for assuming the inductive hypothesis in the invariant proof.
let ec_GFp_nistp384_point_mul_public_loop_spec = do {
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  // pointer to p_wnaf
  (p_wnaf, p_wnaf_ptr) <- ptr_to_fresh "p_wnaf" (llvm_array 385 i8);
  crucible_precond {{ ec_compute_wNAF_in_range p_wnaf }};

  // pointer to g_wnaf
  (g_wnaf, g_wnaf_ptr) <- ptr_to_fresh "g_wnaf" (llvm_array 385 i8);
  crucible_precond {{ ec_compute_wNAF_in_range g_wnaf }};

  // pointer to p_pre_comp
  let p384_felem = llvm_array p384_felem_limbs (llvm_int limb_length);
  (p_pre_comp, p_pre_comp_ptr) <- ptr_to_fresh "p_pre_comp" (llvm_array 16 (llvm_array 3 p384_felem));

  // pointer to i
  (i, i_ptr) <- ptr_to_fresh "i" i32;
  crucible_precond {{ i >=$ -1 /\ i <$ 385 }};
  // pointer to res_is_inf
  (res_is_inf, res_is_inf_ptr) <- ptr_to_fresh "res_is_inf" i16;
  crucible_precond {{ res_is_inf == 1 \/ res_is_inf == 0 }};
  // pointer to d
  d_ptr <- llvm_alloc i16;
  // pointer to is_neg
  is_neg_ptr <- llvm_alloc i16;
  // pointer to idx
  idx_ptr <- llvm_alloc i16;

  // pointer to ftmp
  ftmp_ptr <- llvm_alloc p384_felem;

  // pointer to two_p
  (two_p, two_p_ptr) <- ptr_to_fresh "res" (llvm_array 3 p384_felem);

  // pointer to group
  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  points_to_bn_mont_ctx_st (crucible_field group_ptr "order") p384_felem_limbs {| P384_n |};
  group_pp <- llvm_alloc (llvm_int 64);
  llvm_points_to group_pp group_ptr;

  // pointer to g_scalar
  (g_scalar, g_scalar_ptr) <- ptr_to_fresh_readonly "g_scalar" i384;
  g_scalar_pp <- llvm_alloc (llvm_int 64);
  llvm_points_to g_scalar_pp g_scalar_ptr;

  // pointer to p_scalar
  (p_scalar, p_scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;
  p_scalar_pp <- llvm_alloc (llvm_int 64);
  llvm_points_to p_scalar_pp p_scalar_ptr;

  // pointer to res
  (res, res_ptr) <- ptr_to_fresh "res" (llvm_array 3 p384_felem);

  // pointer to r
  r_ptr <- llvm_alloc (llvm_struct "struct.EC_JACOBIAN");
  r_pp <- llvm_alloc (llvm_int 64);
  llvm_points_to r_pp r_ptr;

  llvm_execute_func [ p_wnaf_ptr
    , g_wnaf_ptr
    , p_pre_comp_ptr
    , i_ptr, res_is_inf_ptr
    , d_ptr, is_neg_ptr
    , idx_ptr
    , ftmp_ptr
    , two_p_ptr
    , group_pp, g_scalar_pp, p_scalar_pp
    , res_ptr
    , r_pp
    ];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_EC_JACOBIAN r_ptr {{ (point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i) }};

};

// The following lemma is part of a trick for expanding one occurrence of a function
// inside of a proof term.
// Specifically, say we want to expand just the left-hand side of the following term:
//  (point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i).X == A
// where A could also contain calls to `point_mul_public_breakpoint`
// We define a function `point_mul_public_breakpoint_unfold` that has the exact same body
// as `point_mul_public_breakpoint`.
// Then we use this lemma to replace the call with `point_mul_public_breakpoint_unfold`.
// Now we can safely use unfolding hint to expand just that call.
breakpoint_unfolding_X_lemma <-
prove_print
do {
  unfolding ["point_mul_public_breakpoint"];
  // fix_unfold unfolds the definition of a fix point for once
  // (fix f) = (f (fix f))
  simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
  simplify (cryptol_ss ());
  unfolding ["point_mul_public_breakpoint_unfold","point_mul_public_breakpoint"];
  simplify (addsimp (core_thm "boolEq_same") (cryptol_ss ()));
  trivial;
}
(rewrite (cryptol_ss ()) (unfold_term ["ecEq", "pairEq"]
{{ \p_wnaf g_wnaf p_pre_comp res_is_inf res i (A:[384]) ->
  (((res2 == A) == (res2_unfold == A))
  where
    res2 = (point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i).X
    res2_unfold = (point_mul_public_breakpoint_unfold p_wnaf g_wnaf p_pre_comp res_is_inf res i).X)
}}));

breakpoint_unfolding_Y_lemma <-
prove_print
do {
  unfolding ["point_mul_public_breakpoint"];
  // fix_unfold unfolds the definition of a fix point for once
  // (fix f) = (f (fix f))
  simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
  simplify (cryptol_ss ());
  unfolding ["point_mul_public_breakpoint_unfold","point_mul_public_breakpoint"];
   simplify (addsimp (core_thm "boolEq_same") (cryptol_ss ()));
  trivial;
}
(rewrite (cryptol_ss ()) (unfold_term ["ecEq", "pairEq"]
{{ \p_wnaf g_wnaf p_pre_comp res_is_inf res i (A:[384]) ->
  (((res2 == A) == (res2_unfold == A))
  where
    res2 = (point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i).Y
    res2_unfold = (point_mul_public_breakpoint_unfold p_wnaf g_wnaf p_pre_comp res_is_inf res i).Y)
}}));

breakpoint_unfolding_Z_lemma <-
prove_print
do {
  unfolding ["point_mul_public_breakpoint"];
  // fix_unfold unfolds the definition of a fix point for once
  // (fix f) = (f (fix f))
  simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
  simplify (cryptol_ss ());
  unfolding ["point_mul_public_breakpoint_unfold","point_mul_public_breakpoint"];
  simplify (addsimp (core_thm "boolEq_same") (cryptol_ss ()));
  trivial;
}
(rewrite (cryptol_ss ()) (unfold_term ["ecEq", "pairEq"]
{{ \p_wnaf g_wnaf p_pre_comp res_is_inf res i (A:[384]) ->
  (((res2 == A) == (res2_unfold == A))
  where
    res2 = (point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res i).Z
    res2_unfold = (point_mul_public_breakpoint_unfold p_wnaf g_wnaf p_pre_comp res_is_inf res i).Z)
}}));

// Naming convention:
// __breakpoint__ is the prefix to the loop function that will be recognized by SAW
// The name before "#" is the loop function name, i.e. __breakpoint__inv
// The name after "#" is the function in which the loop function resides in,
// i.e. ec_GFp_nistp384_point_mul_public. It is also the function we are going to verify.
// First, we assume the specification for `__breakpoint__inv#ec_GFp_nistp384_point_mul_public`
breakpoint_ov <- llvm_unsafe_assume_spec m "__breakpoint__inv#ec_GFp_nistp384_point_mul_public" ec_GFp_nistp384_point_mul_public_loop_spec;

// Second, assuming that the specification holds for the recursive call,
// prove that the specification holds inductively.

// Note: this is the proof for the inductive invariant of the loop.
// This is the most time consuming part for point_mul_public.
// The points-to goals take 3 mins, 1 min for each dimension of the point.
// The safety checks take around 1.5 min. Total 4.5 mins.
llvm_verify m "__breakpoint__inv#ec_GFp_nistp384_point_mul_public"
[   p384_felem_methods_ov
  , ec_nistp_point_add_p384_jac_ov
  , ec_nistp_point_add_p384_same_l_jac_ov
  , ec_nistp_point_add_p384_same_l_mixed_ov
  , ec_nistp_point_double_p384_ov
  , ec_nistp_point_double_p384_same_ov
  , bignum_fromlebytes_6_ov
  , bignum_tolebytes_6_ov
  , bignum_neg_p384_wrapper_ov
  , p384_felem_copy_ov
  , ec_compute_wNAF_ov
  , breakpoint_ov
  ]
true
ec_GFp_nistp384_point_mul_public_loop_spec
(do {
   simplify (addsimps [felem_opp_wrapper_felem_opp_equiv] empty_ss);
   goal_eval_unint ["point_mul_public_breakpoint", "point_add", "point_double", "felem_sqr"
                  , "felem_add", "felem_sub", "felem_mul", "felem_opp", "felem_cmovznz"
                  , "felem_to_bytes", "felem_from_bytes", "ec_compute_wNAF"];
   simplify (addsimps [ breakpoint_unfolding_X_lemma
                      , breakpoint_unfolding_Y_lemma
                      , breakpoint_unfolding_Z_lemma] empty_ss);
   unfolding ["point_mul_public_breakpoint_unfold"];
   w4_unint_z3 ["point_mul_public_breakpoint", "point_add", "point_double", "felem_sqr"
              , "felem_add", "felem_sub", "felem_mul", "felem_opp", "felem_cmovznz"
              , "felem_to_bytes", "felem_from_bytes", "ec_compute_wNAF"];
 });

let p384_point_mul_public_r = "p384_point_mul_public.r";

let p384_point_mul_public_spec order_width = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};
  alloc_p384_felem_methods_globals;

  group_ptr <- crucible_alloc_readonly (llvm_struct "struct.ec_group_st");
  points_to_bn_mont_ctx_st (crucible_field group_ptr "order") order_width {| P384_n |};
  r_ptr <- crucible_alloc (llvm_struct "struct.EC_JACOBIAN");
  (g_scalar, g_scalar_ptr) <- ptr_to_fresh_readonly "g_scalar" i384;
  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.EC_JACOBIAN");
  p <- points_to_fresh_EC_JACOBIAN p_ptr;
  (p_scalar, p_scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;

  crucible_execute_func [group_ptr, r_ptr, g_scalar_ptr, p_ptr, p_scalar_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  llvm_setup_with_tag p384_point_mul_public_r
    (points_to_EC_JACOBIAN r_ptr {{ point_mul_public_generic g_scalar p p_scalar }});
};

// Note that the breakpoint feature requires that the specification be written
// as a recursive function. However, we need the all functions to be written
// in folds or scans to be able to translate into Coq.
// Therefore we define another version of point_mul_public_breakpoint using foldl.
// We prove the equivalence between the recursive version and the foldl version.
point_mul_public_breakpoint_foldl_top_equiv_lemma <-
prove_print
do {
  goal_eval_unint ["double_add_public", "felem_to_bytes"];
  w4_unint_z3 ["double_add_public", "felem_to_bytes"];
}
(rewrite (cryptol_ss ()) (unfold_term []
{{ \p_wnaf g_wnaf p_pre_comp res_is_inf res ->
   point_mul_public_breakpoint p_wnaf g_wnaf p_pre_comp res_is_inf res 384 ==
   point_mul_public_breakpoint_foldl_top p_wnaf g_wnaf p_pre_comp res_is_inf res 384
}}));

p384_point_mul_public_ov <- llvm_verify m "ec_GFp_nistp384_point_mul_public"
  [ p384_felem_methods_ov
  , ec_compute_wNAF_ov
  , ec_nistp_point_add_p384_jac_ov
  , ec_nistp_point_add_p384_same_l_jac_ov
  , ec_nistp_point_add_p384_same_l_mixed_ov
  , ec_nistp_point_double_p384_ov
  , ec_nistp_point_double_p384_same_ov
  , bignum_neg_p384_wrapper_ov
  , p384_felem_copy_ov
  , bignum_fromlebytes_6_ov
  , bignum_tolebytes_6_ov
  , breakpoint_ov
  ]
  true
  (p384_point_mul_public_spec p384_felem_limbs)
  (do {
     goal <- goal_has_some_tag [p384_point_mul_public_r];

     if goal then do {
       simplify (addsimps [ felem_opp_wrapper_felem_opp_equiv
                          , point_mul_public_breakpoint_foldl_top_equiv_lemma] empty_ss);
       goal_eval_unint ["point_mul_public_breakpoint_foldl_top", "point_add", "point_double"
                      , "felem_sqr", "felem_add", "felem_sub", "felem_mul", "felem_opp"
                      , "felem_cmovznz", "felem_to_bytes", "felem_from_bytes", "ec_compute_wNAF"];
       w4_unint_z3 ["point_mul_public_breakpoint_foldl_top", "point_add", "point_double"
                  , "felem_sqr", "felem_add", "felem_sub", "felem_mul", "felem_opp"
                  , "felem_cmovznz", "felem_to_bytes", "felem_from_bytes", "ec_compute_wNAF"];
     } else do {
       simplify (addsimps [felem_opp_wrapper_felem_opp_equiv] empty_ss);
       w4_unint_z3 ["felem_sqr", "felem_add", "felem_sub", "felem_mul", "felem_opp"
                  , "felem_cmovznz", "felem_to_bytes", "felem_from_bytes", "ec_compute_wNAF"];
     };
  });

