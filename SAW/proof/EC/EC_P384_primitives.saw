/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

import "../../spec/EC/EC_primitives.cry";
import "../../spec/EC/EC_impl.cry";
import "../../../cryptol-specs/Common/EC/EC_P384.cry";

let limb_length = 64;
let p384_felem_limbs = 6;

let {{ ia32cap = [0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff] : [4][32] }};

u <- fresh_symbolic "u" {| () |};

let points_to_point x_ptr y_ptr z_ptr point = do {
  crucible_points_to x_ptr (crucible_term {{ point@0 }});
  crucible_points_to y_ptr (crucible_term {{ point@1 }});
  crucible_points_to z_ptr (crucible_term {{ point@2 }});
};

let p384_field_square_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_sqr inarg}});
};

let p384_field_square_same_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, outarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_sqr outarg}});
};

let p384_field_mul_same_l_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_mul outarg inarg}});
};

let p384_field_mul_same_r_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg_ptr, outarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_mul inarg outarg}});
};

let p384_field_mul_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg1, inarg1_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg2, inarg2_ptr) <- ptr_to_fresh_readonly "inarg2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg1_ptr, inarg2_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_mul inarg1 inarg2}});
};

let p384_field_add_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg1, inarg1_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg2, inarg2_ptr) <- ptr_to_fresh_readonly "inarg2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg1_ptr, inarg2_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_add inarg1 inarg2}});
};

let p384_field_add_same_in_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_add inarg inarg}});
};

let p384_field_add_same_l_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_add outarg inarg}});
};

let p384_field_add_same_all_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, outarg_ptr, outarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_add outarg outarg}});
};

let p384_field_sub_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg1, inarg1_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg2, inarg2_ptr) <- ptr_to_fresh_readonly "inarg2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg1_ptr, inarg2_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_sub inarg1 inarg2}});
};

let p384_field_sub_same_l_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_sub outarg inarg}});
};

let p384_nz_spec = do {
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [inarg_ptr];

  crucible_return (crucible_term {{ felem_nz inarg }});
};

let p384_cmovznz_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  test <- crucible_fresh_var "test" (llvm_int limb_length);
  (inarg1, inarg1_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg2, inarg2_ptr) <- ptr_to_fresh_readonly "inarg2" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, (crucible_term test), inarg1_ptr, inarg2_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_cmovznz test inarg1 inarg2}});
};

let p384_cmovznz_same_r_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  test <- crucible_fresh_var "test" (llvm_int limb_length);
  (inarg1, inarg1_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, (crucible_term test), inarg1_ptr, outarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_cmovznz test inarg1 outarg}});
};

let p384_cmovznz_same_l_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  test <- crucible_fresh_var "test" (llvm_int limb_length);
  (inarg2, inarg2_ptr) <- ptr_to_fresh_readonly "inarg2" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, (crucible_term test), outarg_ptr, inarg2_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_cmovznz test outarg inarg2}});
};

let p384_cmovznz_same_r_spec = do {
  (outarg, outarg_ptr) <- ptr_to_fresh "outarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
  test <- crucible_fresh_var "test" (llvm_int limb_length);
  (inarg1, inarg1_ptr) <- ptr_to_fresh_readonly "inarg1" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, (crucible_term test), inarg1_ptr, outarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_cmovznz test inarg1 outarg}});
};

let p384_get_bit_spec = do {

  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "scalar" (llvm_int 384);
  i <- crucible_fresh_var "i" (llvm_int 32);

  crucible_execute_func [scalar_ptr, (crucible_term i)];

  crucible_return (crucible_term {{ scalar_get_bit scalar i}});
};

let constant_time_is_zero_w_spec = do {
  inarg <- crucible_fresh_var "inarg" (llvm_int limb_length);
 
  crucible_execute_func [(crucible_term inarg)];

  crucible_return (crucible_term {{ constant_time_is_zero_w inarg }});
};
let p384_from_bytes_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_int 384);
 
  crucible_execute_func [outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_from_bytes inarg}});
};

let p384_to_bytes_spec = do {
  outarg_ptr <- crucible_alloc (llvm_int 384);
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_to_bytes inarg}});
};

let p384_opp_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_opp inarg }});
};

let p384_opp_wrapper_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term {{ felem_opp_wrapper u inarg }});
};

let p384_copy_spec = do {
  outarg_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  (inarg, inarg_ptr) <- ptr_to_fresh_readonly "inarg" (llvm_array p384_felem_limbs (llvm_int limb_length));
 
  crucible_execute_func [outarg_ptr, inarg_ptr];

  crucible_points_to outarg_ptr (crucible_term inarg);
};


p384_square_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_montsqr_p384"
  p384_field_square_spec;

p384_square_same_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_montsqr_p384"
  p384_field_square_same_spec;

p384_mul_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_montmul_p384"
  p384_field_mul_spec;

p384_mul_same_l_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_montmul_p384"
  p384_field_mul_same_l_spec;

p384_mul_same_r_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_montmul_p384"
  p384_field_mul_same_r_spec;

p384_add_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_add_p384"
  p384_field_add_spec;

p384_add_same_l_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_add_p384"
  p384_field_add_same_l_spec;

p384_add_same_in_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_add_p384"
  p384_field_add_same_in_spec;

p384_add_same_all_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_add_p384"
  p384_field_add_same_all_spec;

p384_sub_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_sub_p384"
  p384_field_sub_spec;

p384_sub_same_l_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_sub_p384"
  p384_field_sub_same_l_spec;

p384_get_bit_ov <- llvm_verify
  m
  "p384_get_bit"
  []
  true
  p384_get_bit_spec
  (do {
    (goal_eval_unint []);
    (w4_unint_z3 []);
  });

let p384_point_double_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  x_out_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  y_out_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  z_out_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));

  (x_in, x_in_ptr) <- ptr_to_fresh_readonly "x_in" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y_in, y_in_ptr) <- ptr_to_fresh_readonly "y_in" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z_in, z_in_ptr) <- ptr_to_fresh_readonly "z_in" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x_out_ptr, y_out_ptr, z_out_ptr, x_in_ptr, y_in_ptr, z_in_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_point x_out_ptr y_out_ptr z_out_ptr {{ point_double [x_in, y_in, z_in] }};
};

let p384_point_double_same_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (x, x_ptr) <- ptr_to_fresh "x" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y, y_ptr) <- ptr_to_fresh "y" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z, z_ptr) <- ptr_to_fresh "z" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x_ptr, y_ptr, z_ptr, x_ptr, y_ptr, z_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_point x_ptr y_ptr z_ptr {{ point_double [x, y, z] }};
};

let p384_point_add_spec mixed = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  x3_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  y3_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));
  z3_ptr <- crucible_alloc (llvm_array p384_felem_limbs (llvm_int limb_length));

  (x1, x1_ptr) <- ptr_to_fresh_readonly "x1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y1, y1_ptr) <- ptr_to_fresh_readonly "y1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z1, z1_ptr) <- ptr_to_fresh_readonly "z1" (llvm_array p384_felem_limbs (llvm_int limb_length));

  (x2, x2_ptr) <- ptr_to_fresh_readonly "x2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y2, y2_ptr) <- ptr_to_fresh_readonly "y2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z2, z2_ptr) <- ptr_to_fresh_readonly "z2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x3_ptr, y3_ptr, z3_ptr, x1_ptr, y1_ptr, z1_ptr, (crucible_term {{`mixed:[32]}}), x2_ptr, y2_ptr, z2_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_point x3_ptr y3_ptr z3_ptr {{ point_add (`mixed != zero) [x1, y1, z1] [x2, y2, z2] }};
};

let p384_point_add_same_r_spec mixed = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (x1, x1_ptr) <- ptr_to_fresh_readonly "x1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y1, y1_ptr) <- ptr_to_fresh_readonly "y1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z1, z1_ptr) <- ptr_to_fresh_readonly "z1" (llvm_array p384_felem_limbs (llvm_int limb_length));

  (x2, x2_ptr) <- ptr_to_fresh "x2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y2, y2_ptr) <- ptr_to_fresh "y2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z2, z2_ptr) <- ptr_to_fresh "z2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x2_ptr, y2_ptr, z2_ptr, x1_ptr, y1_ptr, z1_ptr, (crucible_term {{`mixed:[32]}}), x2_ptr, y2_ptr, z2_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_point x2_ptr y2_ptr z2_ptr {{ point_add (`mixed != zero) [x1, y1, z1] [x2, y2, z2] }};
};

let p384_point_add_same_l_spec mixed = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (x1, x1_ptr) <- ptr_to_fresh "x1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y1, y1_ptr) <- ptr_to_fresh "y1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z1, z1_ptr) <- ptr_to_fresh "z1" (llvm_array p384_felem_limbs (llvm_int limb_length));

  (x2, x2_ptr) <- ptr_to_fresh_readonly "x2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y2, y2_ptr) <- ptr_to_fresh_readonly "y2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z2, z2_ptr) <- ptr_to_fresh_readonly "z2" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x1_ptr, y1_ptr, z1_ptr, x1_ptr, y1_ptr, z1_ptr, (crucible_term {{`mixed:[32]}}), x2_ptr, y2_ptr, z2_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_point x1_ptr y1_ptr z1_ptr {{ point_add (`mixed != zero) [x1, y1, z1] [x2, y2, z2] }};
};

let p384_point_add_same_r_mixed_spec = do {

  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (x1, x1_ptr) <- ptr_to_fresh_readonly "x1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y1, y1_ptr) <- ptr_to_fresh_readonly "y1" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z1, z1_ptr) <- ptr_to_fresh_readonly "z1" (llvm_array p384_felem_limbs (llvm_int limb_length));

  (x2, x2_ptr) <- ptr_to_fresh "x2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (y2, y2_ptr) <- ptr_to_fresh "y2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (z2, z2_ptr) <- ptr_to_fresh "z2" (llvm_array p384_felem_limbs (llvm_int limb_length));
  (one, one_ptr) <- ptr_to_fresh_readonly "p384_felem_one" (llvm_array p384_felem_limbs (llvm_int limb_length));

  crucible_execute_func [x2_ptr, y2_ptr, z2_ptr, x1_ptr, y1_ptr, z1_ptr, (crucible_term {{1:[32]}}), x2_ptr, y2_ptr, one_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  points_to_point x2_ptr y2_ptr z2_ptr {{ point_add 1 [x1, y1, z1] [x2, y2, one] }};
};


let points_to_EC_JACOBIAN ptr point = do {
  crucible_points_to_untyped (crucible_field ptr "X") (crucible_term {{ point.X }});
  crucible_points_to_untyped (crucible_field ptr "Y") (crucible_term {{ point.Y }});
  crucible_points_to_untyped (crucible_field ptr "Z") (crucible_term {{ point.Z }});
};

let points_to_fresh_EC_JACOBIAN ptr = do {
  X <- crucible_fresh_var "raw.X" i384;
  crucible_points_to_untyped (crucible_field ptr "X") (crucible_term X);
  Y <- crucible_fresh_var "raw.Y" i384;
  crucible_points_to_untyped (crucible_field ptr "Y") (crucible_term Y);
  Z <- crucible_fresh_var "raw.Z" i384;
  crucible_points_to_untyped (crucible_field ptr "Z") (crucible_term Z);
  return {{ { X = X, Y = Y, Z = Z } : JacobianBVPoint }};
};

p384_point_double_ov <- llvm_verify m "p384_point_double"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  ]
  true
  p384_point_double_spec
  (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub"]);

p384_point_double_same_ov <- llvm_verify m "p384_point_double"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  ]
  true
  p384_point_double_same_spec
  (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub"]);

/*
The testForDouble_ct function closely matches the code, and the
following rewrite rule allows this complicated function to be
replaced with a much simpler form of the function that has the
same behavior.
*/
double_test_equiv <- prove_folding_theorem {{ \w x y z-> (testForDouble w x y z) == (testForDouble_ct w x y z) }};

constant_time_is_zero_w_ov <- llvm_verify m
  "constant_time_is_zero_w" [] true
  constant_time_is_zero_w_spec (w4_unint_z3 []);

bignum_nonzero_6_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_nonzero_6"
  p384_nz_spec;

p384_felem_cmovznz_ov <- llvm_verify m
  "p384_felem_cmovznz" [value_barrier_w_ov] true
  p384_cmovznz_spec (w4_unint_z3 []);

p384_felem_cmovznz_same_r_ov <- llvm_verify m
  "p384_felem_cmovznz" [value_barrier_w_ov] true
  p384_cmovznz_same_r_spec (w4_unint_z3 []);

p384_felem_cmovznz_same_l_ov <- llvm_verify m
  "p384_felem_cmovznz" [value_barrier_w_ov] true
  p384_cmovznz_same_l_spec (w4_unint_z3 []);

p384_felem_cmovznz_same_r_ov <- llvm_verify m
  "p384_felem_cmovznz" [value_barrier_w_ov] true
  p384_cmovznz_same_r_spec (w4_unint_z3 []);

p384_point_add_jac_ov <- llvm_verify m "p384_point_add"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_mul_same_l_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  , bignum_nonzero_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_r_ov
  , constant_time_is_zero_w_ov
  , p384_point_double_ov
  ]
  true
  (p384_point_add_spec 0)
  (do {
    goal_eval_unint 
      ["testForDouble"
      , "felem_sqr"
      , "felem_mul"
      , "felem_add"
      , "felem_sub"
      , "felem_nz"
      , "constant_time_is_zero_w"
      , "felem_cmovznz"];
    simplify (addsimps [double_test_equiv] basic_ss);
    (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub", "felem_nz", "constant_time_is_zero_w", "felem_cmovznz"]);
  });


p384_point_add_mixed_ov <- llvm_verify m "p384_point_add"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_mul_same_l_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  , bignum_nonzero_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_r_ov
  , constant_time_is_zero_w_ov
  , p384_point_double_ov
  ]
  true
  (p384_point_add_spec 1)
  (do {
    goal_eval_unint 
      ["testForDouble"
      , "felem_sqr"
      , "felem_mul"
      , "felem_add"
      , "felem_sub"
      , "felem_nz"
      , "constant_time_is_zero_w"
      , "felem_cmovznz"];
    simplify (addsimps [double_test_equiv] basic_ss);
    (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub", "felem_nz", "constant_time_is_zero_w", "felem_cmovznz"]);
  });

p384_point_add_same_r_jac_ov <- llvm_verify m "p384_point_add"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_mul_same_l_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  , bignum_nonzero_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_r_ov
  , constant_time_is_zero_w_ov
  , p384_point_double_ov
  ]
  true
  (p384_point_add_same_r_spec 0)
  (do {
    goal_eval_unint 
      ["testForDouble"
      , "felem_sqr"
      , "felem_mul"
      , "felem_add"
      , "felem_sub"
      , "felem_nz"
      , "constant_time_is_zero_w"
      , "felem_cmovznz"];
    simplify (addsimps [double_test_equiv] basic_ss);
    (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub", "felem_nz", "constant_time_is_zero_w", "felem_cmovznz"]);
  });

p384_point_add_same_l_jac_ov <- llvm_verify m "p384_point_add"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_mul_same_l_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  , bignum_nonzero_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_r_ov
  , p384_felem_cmovznz_same_l_ov
  , constant_time_is_zero_w_ov
  , p384_point_double_same_ov
  ]
  true
  (p384_point_add_same_l_spec 0)
  (do {
    goal_eval_unint 
      ["testForDouble"
      , "felem_sqr"
      , "felem_mul"
      , "felem_add"
      , "felem_sub"
      , "felem_nz"
      , "constant_time_is_zero_w"
      , "felem_cmovznz"];
    simplify (addsimps [double_test_equiv] basic_ss);
    (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub", "felem_nz", "constant_time_is_zero_w", "felem_cmovznz"]);
  });

p384_point_add_same_l_mixed_ov <- llvm_verify m "p384_point_add"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_mul_same_l_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  , bignum_nonzero_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_r_ov
  , p384_felem_cmovznz_same_l_ov
  , constant_time_is_zero_w_ov
  , p384_point_double_same_ov
  ]
  true
  (p384_point_add_same_l_spec 1)
  (do {
    goal_eval_unint 
    ["testForDouble"
   , "felem_sqr"
   , "felem_mul"
   , "felem_add"
   , "felem_sub"
   , "felem_nz"
   , "constant_time_is_zero_w"
   , "felem_cmovznz"];
   simplify (addsimps [double_test_equiv] basic_ss);
   (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub", "felem_nz", "constant_time_is_zero_w", "felem_cmovznz"]);
  });

p384_point_add_same_r_mixed_ov <- llvm_verify m "p384_point_add"
  [ p384_square_ov
  , p384_square_same_ov
  , p384_mul_ov
  , p384_mul_same_r_ov
  , p384_mul_same_l_ov
  , p384_add_ov
  , p384_add_same_l_ov
  , p384_add_same_in_ov
  , p384_add_same_all_ov
  , p384_sub_ov
  , p384_sub_same_l_ov
  , bignum_nonzero_6_ov
  , p384_felem_cmovznz_ov
  , p384_felem_cmovznz_same_r_ov
  , p384_felem_cmovznz_same_l_ov
  , constant_time_is_zero_w_ov
  , p384_point_double_ov
  ]
  true
  p384_point_add_same_r_mixed_spec
  (do {
    goal_eval_unint 
    ["testForDouble"
   , "felem_sqr"
   , "felem_mul"
   , "felem_add"
   , "felem_sub"
   , "felem_nz"
   , "constant_time_is_zero_w"
   , "felem_cmovznz"];
    simplify (addsimps [double_test_equiv] basic_ss);
    (w4_unint_z3 ["felem_sqr", "felem_mul", "felem_add", "felem_sub", "felem_nz", "constant_time_is_zero_w", "felem_cmovznz"]);
  });

let conditional_subtract_if_even_ct_spec = do {
  
  (res, res_ptr) <- ptr_to_fresh "res" (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length)));
  (p, p_ptr) <- ptr_to_fresh_readonly "p" (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length)));
  tmp_ptr <- crucible_alloc (llvm_array 3 (llvm_array p384_felem_limbs (llvm_int limb_length)));
  (scalar, scalar_ptr) <- ptr_to_fresh_readonly "p_scalar" i384;

  crucible_execute_func [res_ptr, p_ptr, scalar_ptr, tmp_ptr];

  crucible_points_to res_ptr (crucible_term {{conditional_subtract_if_even_ct res scalar p}});
};

bignum_fromlebytes_6_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_fromlebytes_6"
  p384_from_bytes_spec;

bignum_tolebytes_6_ov <- crucible_llvm_unsafe_assume_spec
  m
  "bignum_tolebytes_6"
  p384_to_bytes_spec;

bignum_neg_p384_ov <- crucible_llvm_unsafe_assume_spec m
  "bignum_neg_p384" 
  p384_opp_spec;

bignum_neg_p384_wrapper_ov <- crucible_llvm_unsafe_assume_spec m
  "bignum_neg_p384" 
  p384_opp_wrapper_spec;

p384_felem_copy_ov <- llvm_verify m "p384_felem_copy"
  [] true
  p384_copy_spec (w4_unint_z3 []);
