load_sawcore_from_file "LemmaStatements.sawcore";

ghash_6x_unfolding_lemma <-
  prove_print
    do {
      unfolding ["ecEq","gcm_ghash_array_6x"];
      simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
      simplify (cryptol_ss ());
      unfolding ["gcm_ghash_array_6x_unfold","gcm_ghash_array_6x"];
      simplify (addsimp (core_thm "boolEq_same") (cryptol_ss ()));
      trivial;
    }
    (rewrite (cryptol_ss ()) (unfold_term ["ecEq"]
     {{ \A H Xi inp i blocks ->
           (A == gcm_ghash_array_6x H Xi inp i blocks) ==
           (A == gcm_ghash_array_6x_unfold H Xi inp i blocks)
     }}));

ghash_6x_unfolding_lemma2 <-
  prove_print
    do {
      unfolding ["ecEq","gcm_ghash_array_6x"];
      simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
      simplify (cryptol_ss ());
      unfolding ["gcm_ghash_array_6x_unfold","gcm_ghash_array_6x"];
      simplify (addsimp (core_thm "bvEq_refl") (cryptol_ss ()));
      trivial;
    }
    (rewrite (cryptol_ss ()) (unfold_term ["ecEq"]
     {{ \H Xi inp i blocks ->
           gcm_ghash_array_6x H Xi inp i blocks ==
           gcm_ghash_array_6x_unfold H Xi inp i blocks
     }}));


ghash_6x_test_unfold_lemma <-
  prove_print
    do {
      simplify (cryptol_ss ());
      simplify (addsimp_shallow ghash_6x_unfolding_lemma2 empty_ss);
      w4_unint_z3 ["gcm_ghash_array_6x","aesni_gcm_cipher_block6","gcm_init_Htable","gcm_init"];
    }
    (rewrite (cryptol_ss ()) (unfold_term ["ecEq"]
     {{ \H Xi inp i blocks ->
           gcm_ghash_array_6x H Xi inp i blocks ==
           if blocks - i >= 6 then gcm_ghash_array_6x H Xi inp i blocks else Xi
//           if blocks - i >= 6 then gcm_ghash_array_6x_unfold H Xi inp i blocks else Xi
     }}));
      

gcm_enc_blocks_6x_unfolding_lemma <-
  prove_print
    do {
      unfolding ["ecEq","gcm_enc_blocks_6x"];
      simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
      simplify (cryptol_ss ());
      unfolding ["gcm_enc_blocks_6x_unfold","gcm_enc_blocks_6x"];
      simplify (addsimp (core_thm "boolEq_same") (cryptol_ss ()));
      trivial;
    }
    (rewrite (cryptol_ss ())
     {{ \A in iv ctr key buf i blocks ->
           (arrayEq A (gcm_enc_blocks_6x in iv ctr key buf i blocks)) ==
           (arrayEq A (gcm_enc_blocks_6x_unfold in iv ctr key buf i blocks))
     }});

arrayEq_refl_thm <-
  prove_print
   (w4_unint_z3 [])
   (rewrite (cryptol_ss ())
     {{ \ (x : Array [64] [8]) -> arrayEq x x }});

gcm_enc_blocks_6x_unfolding_lemma2 <-
  prove_print
    do {
      unfolding ["ecEq","gcm_enc_blocks_6x"];
      simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
      simplify (cryptol_ss ());
      unfolding ["gcm_enc_blocks_6x_unfold","gcm_enc_blocks_6x"];
      simplify (cryptol_ss ());
      goal_intro "in";
      goal_intro "iv";
      goal_intro "ctr";
      goal_intro "key";
      goal_intro "buf";
      goal_intro "i";
      goal_intro "blocks";
      goal_apply arrayEq_refl_thm;
    }
    (rewrite (cryptol_ss ())
     {{ \in iv ctr key buf i blocks ->
           (arrayEq (gcm_enc_blocks_6x in iv ctr key buf i blocks)
                    (gcm_enc_blocks_6x_unfold in iv ctr key buf i blocks))
     }});

gcm_enc_blocks_6x_test_unfold_lemma <-
  prove_print
  do {
    simplify (addsimp gcm_enc_blocks_6x_unfolding_lemma2 empty_ss);
    w4_unint_z3 ["gcm_enc_blocks_6x","aesenc","aesenclast","ExpandKey"];
  }
  (rewrite (cryptol_ss ())
  {{ \in iv ctr key buf i blocks ->
       arrayEq (gcm_enc_blocks_6x in iv ctr key buf i blocks)
        (if blocks - i >= 6 then (gcm_enc_blocks_6x in iv ctr key buf i blocks) else buf)
  }});


ite_lemma_term <- parse_core " (x : Bool) -> (y : Bool) -> (z : Bool) -> EqTrue (implies x y) -> EqTrue (implies (not x) z) -> EqTrue (ite Bool x y z)";
ite_lemma <- prove_extcore z3 ite_lemma_term;




gcm_ghash_array_unfolding_lemma <-
  prove_print
    do {
      unfolding ["ecEq","gcm_ghash_array_internal"];
      simplify (addsimp_shallow (core_thm "fix_unfold") empty_ss);
      simplify (cryptol_ss ());
      unfolding ["gcm_ghash_array_internal","gcm_ghash_array_internal_unfold"];
      simplify (addsimp (core_thm "boolEq_same") (cryptol_ss ()));
      trivial;
    }
    (rewrite (cryptol_ss ()) (unfold_term ["ecEq"]
     {{ \A H Xi in i blocks ->
           (A == (gcm_ghash_array_internal H Xi in i blocks)) ==
           (A == (gcm_ghash_array_internal_unfold H Xi in i blocks))
     }}));




let prove_lemma nm unfolds =
  prove_extcore (w4_unint_z3 [])
    (beta_reduce_term
      (unfold_term (concat [nm] unfolds) (parse_core_mod "LemmaStatements" nm)));

Xi_ite_decompose_left_thm <-
  prove_lemma "Xi_ite_decompose_left" [];

Xi_ite_decompose_right_thm <-
  prove_lemma "Xi_ite_decompose_right" [];

gcm_ghash_6x_congruence_tm <- congruence_for {{ gcm_ghash_array_6x }};
gcm_ghash_6x_congruence <-
  prove_extcore (w4_unint_z3 ["gcm_ghash_array_6x"]) gcm_ghash_6x_congruence_tm;

gcm_enc_blocks_6x_congruence_tm <- congruence_for {{ gcm_enc_blocks_6x }};
gcm_enc_blocks_6x_congruence <-
  prove_extcore (w4_unint_z3 ["gcm_enc_blocks_6x"]) gcm_enc_blocks_6x_congruence_tm;

arrayUpdate_congruence_tm <- congruence_for {{ arrayUpdate`{[64],[8]} }};
arrayUpdate_congruence <-
  prove_extcore (w4_unint_z3 ["arrayUpdate"])
    (rewrite (cryptol_ss ()) (unfold_term ["ecArrayUpdate"] arrayUpdate_congruence_tm));

slice_0_8_120_congruence_tm <- congruence_for (parse_core "slice Bool 0 8 120");
slice_0_8_120_congruence <-
  prove_extcore (w4_unint_z3 []) slice_0_8_120_congruence_tm;

xor_128_congruence_tm <- congruence_for (parse_core "bvXor 128");
xor_128_congruence <-
  prove_extcore (w4_unint_z3 []) xor_128_congruence_tm;

aesenc_congruence_tm <- congruence_for {{ aesenc }};
aesenc_congruence <-
  prove_extcore (w4_unint_z3 ["aesenc"]) aesenc_congruence_tm;

aesenclast_congruence_tm <- congruence_for {{ aesenclast }};
aesenclast_congruence <-
  prove_extcore (w4_unint_z3 ["aesenclast"]) aesenclast_congruence_tm;

bv128_ite_decompose_left <-
  prove_extcore (w4_unint_z3 [])
    (beta_reduce_term
      (unfold_term ["bv_ite_decompose_left"]
       (parse_core_mod "LemmaStatements" "bv_ite_decompose_left 128")));

bv128_ite_decompose_right <-
  prove_extcore (w4_unint_z3 [])
    (beta_reduce_term
      (unfold_term ["bv_ite_decompose_right"]
       (parse_core_mod "LemmaStatements" "bv_ite_decompose_right 128")));

or_left  <- prove_lemma "or_left" [];
or_right <- prove_lemma "or_right" [];

arrayEq_ite_conguence <- prove_lemma
  "arrayEq_ite_congruence64_8" ["arrayEq_ite_congruence"];

arrayEq_arrayCopy_conguence <- prove_lemma
  "arrayEq_arrayCopy_congruence64_8" ["arrayEq_arrayCopy_congruence"];

arrayEq_ite_decompose_left <- prove_lemma
  "arrayEq_ite_decompose_left64_8" ["arrayEq_ite_decompose_left"];

arrayEq_ite_decompose_right <- prove_lemma
  "arrayEq_ite_decompose_right64_8" ["arrayEq_ite_decompose_right"];

arrayEq_arrayUpdate_congruence <- prove_lemma
  "arrayEq_arrayUpdate_congruence" [];

custom_append_lemma <- prove_lemma
  "custom_append_lemma" [];

or_left  <- prove_lemma "or_left" [];
or_right <- prove_lemma "or_right" [];

bvEq128_trans_left <- prove_lemma
  "bvEq128_trans_left" [];

arrayEq_ite_conguence <- prove_lemma
  "arrayEq_ite_congruence64_8" ["arrayEq_ite_congruence"];

arrayEq_arrayCopy_conguence <- prove_lemma
  "arrayEq_arrayCopy_congruence64_8" ["arrayEq_arrayCopy_congruence"];

arrayEq_ite_decompose_left <- prove_lemma
  "arrayEq_ite_decompose_left64_8" ["arrayEq_ite_decompose_left"];

arrayEq_ite_decompose_right <- prove_lemma
  "arrayEq_ite_decompose_right64_8" ["arrayEq_ite_decompose_right"];

arrayEq_arrayUpdate_congruence <- prove_lemma
  "arrayEq_arrayUpdate_congruence" [];

arrayEq_swap_trans <- prove_lemma
  "arrayEq_swap_trans" [];

aes_hw_ctr32_congruence_tm <- congruence_for {{ aes_hw_ctr32_encrypt_blocks_array }};
aes_hw_ctr32_congruence <-
    prove_extcore (w4_unint_z3 ["aes_hw_ctr32_encrypt_blocks_array"]) aes_hw_ctr32_congruence_tm;

slice_xor_lemma <- prove_lemma
  "bvEq_slice_xor" ["bvEq_slice_xor"];

slice_cong_tm <- congruence_for (parse_core "slice Bool 120 8 0");
slice_cong <- prove_extcore (w4_unint_z3 []) slice_cong_tm;

gcm_polyval_cong_tm <- congruence_for {{ gcm_polyval }};
gcm_polyval_cong <- prove_extcore (w4_unint_z3 ["gcm_polyval"]) gcm_polyval_cong_tm;

at_16_15_bv8_congruence_tm <- congruence_for (parse_core " \\ (xs : Vec 16 (Vec 8 Bool)) -> at 16 (Vec 8 Bool) xs 15");
at_16_15_bv8_congruence <- prove_extcore (w4_unint_z3 []) (beta_reduce_term at_16_15_bv8_congruence_tm);

gcm_ghash_array_congruence_tm <- congruence_for {{ gcm_ghash_array }};
gcm_ghash_array_congruence <-
  prove_extcore (w4_unint_z3 ["gcm_ghash_array"]) gcm_ghash_array_congruence_tm;

bv8_ite_decompose_left <-
  prove_extcore (w4_unint_z3 [])
    (beta_reduce_term
      (unfold_term ["bv_ite_decompose_left"]
       (parse_core_mod "LemmaStatements" "bv_ite_decompose_left 8")));

bv8_ite_decompose_right <-
  prove_extcore (w4_unint_z3 [])
    (beta_reduce_term
      (unfold_term ["bv_ite_decompose_right"]
       (parse_core_mod "LemmaStatements" "bv_ite_decompose_right 8")));

iteprop8 <- parse_core "(x : Vec 8 Bool) -> (z: Vec 8 Bool) -> (c1 : Bool) -> (c2 : Bool) -> EqTrue (vecEq 8 Bool boolEq (ite (Vec 8 Bool) c1 x (ite (Vec 8 Bool) c2 x z)) (ite (Vec 8 Bool) (or c1 c2) x z))";
itethm8 <- prove_extcore z3 iteprop8;

iteprop32 <- parse_core "(x : Vec 32 Bool) -> (z: Vec 32 Bool) -> (c1 : Bool) -> (c2 : Bool) -> EqTrue (vecEq 32 Bool boolEq (ite (Vec 32 Bool) c1 x (ite (Vec 32 Bool) c2 x z)) (ite (Vec 32 Bool) (or c1 c2) x z))";
itethm32 <- prove_extcore z3 iteprop32;

iteprop64 <- parse_core "(x : Vec 64 Bool) -> (z: Vec 64 Bool) -> (c1 : Bool) -> (c2 : Bool) -> EqTrue (vecEq 64 Bool boolEq (ite (Vec 64 Bool) c1 x (ite (Vec 64 Bool) c2 x z)) (ite (Vec 64 Bool) (or c1 c2) x z))";
itethm64 <- prove_extcore z3 iteprop64;

iteprop128 <- parse_core "(x : Vec 128 Bool) -> (z: Vec 128 Bool) -> (c1 : Bool) -> (c2 : Bool) -> EqTrue (vecEq 128 Bool boolEq (ite (Vec 128 Bool) c1 x (ite (Vec 128 Bool) c2 x z)) (ite (Vec 128 Bool) (or c1 c2) x z))";
itethm128 <- prove_extcore z3 iteprop128;

