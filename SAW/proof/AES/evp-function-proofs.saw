
////////////////////////////////////////////////////////////////////////////////
// Proof commands

aes_gcm_from_cipher_ctx_ov <- crucible_llvm_unsafe_assume_spec
  m
  "aes_gcm_from_cipher_ctx"
  aes_gcm_from_cipher_ctx_spec;

llvm_verify m "aes_256_gcm_generic_init" [] true aes_256_gcm_generic_init_spec (w4_unint_yices []);


let evp_cipher_tactic = do {
  w4_unint_yices ["pmult", "pmod", "gcm_polyval", "aes_hw_encrypt","aes_hw_ctr32_encrypt_blocks_array", "cipher_update_Xi_array", "gcm_ghash_array" ];
};


let evp_cipher_ovs =
  [ OPENSSL_malloc_ov
  , aes_gcm_from_cipher_ctx_ov
  , aes_hw_set_encrypt_key_ov
  , aes_hw_encrypt_ov
  , aes_hw_encrypt_in_place_ov
  , aes_hw_ctr32_encrypt_blocks_ov
  , gcm_init_avx_ov
  , gcm_gmult_avx_ov
  , gcm_ghash_avx_ov
  , aesni_gcm_encrypt_ov
  , aesni_gcm_decrypt_ov
  ];


llvm_verify m "EVP_CipherInit_ex"
  evp_cipher_ovs
  true
  (EVP_CipherInit_ex_spec {{ 1 : [32] }})
  evp_cipher_tactic;

llvm_verify m "EVP_CipherInit_ex"
  evp_cipher_ovs
  true
  (EVP_CipherInit_ex_spec {{ 0 : [32] }})
  evp_cipher_tactic;
 
enable_what4_hash_consing;

let arraySolve = 
         w4_unint_z3
	   ["pmult", "pmod", "gcm_polyval", "aes_hw_encrypt","aes_hw_ctr32_encrypt_blocks_array",
	   "cipher_update_Xi_array", "gcm_ghash_array", "arrayCopy",
           "gcm_ghash_array_6x", "gcm_ghash_array_6x_enc_final", "gcm_enc_blocks_6x"
	   ];

let crunchGoal = do
  { unfolding ["cipher_update", "cipher_update_byte", "cipher_final", "cipher_update_array", "get_Yi",
               "update_enc_array", "update_bulk_encrypt", "update_postbulk_encrypt",
	       "update_dec_array", "update_bulk_decrypt", "update_postbulk_decrypt"
	      ];
    simplify (addsimps [gcm_pmult_pmod_thm, itethm8, itethm32, itethm64, itethm128] (cryptol_ss ()));
    goal_eval_unint ["pmult", "pmod", "gcm_pmult_pmod", "gcm_polyval", "aes_hw_encrypt", 
                     "aes_hw_ctr32_encrypt_blocks_array", "cipher_update_Xi_array", "gcm_ghash_array", "arrayCopy",
		     "gcm_ghash_array_6x", "gcm_ghash_array_6x_enc_final",
		     "gcm_enc_blocks_6x", "ExpandKey"
                    ];
   };

llvm_verify m "EVP_EncryptFinal_ex"
  evp_cipher_ovs
  true
  EVP_EncryptFinal_ex_spec
  do {
    hard_goal <- goal_has_some_tag ["cipher final"];
    if hard_goal then do {
      crunchGoal;
      arraySolve;
    } else evp_cipher_tactic;
  };


llvm_verify m "EVP_DecryptFinal_ex"
  evp_cipher_ovs
  true
  EVP_DecryptFinal_ex_spec
  do { crunchGoal;
       arraySolve;
     };

enable_single_override_special_case;
enable_sequent_goals;


llvm_verify m "EVP_EncryptUpdate"
  evp_cipher_ovs
  true
  (EVP_CipherUpdate_spec {{ 1 : [32] }})
  do { n <- goal_num;
       hard_goal <- goal_has_some_tag
                    ["Xi value","update output buffer"];

       if hard_goal then do {
           crunchGoal;
	   arraySolve;
       } else evp_cipher_tactic;
     };

llvm_verify m "EVP_DecryptUpdate"
   evp_cipher_ovs
   true
   (EVP_CipherUpdate_spec {{ 0 : [32] }})
   do { n <- goal_num;
        hard_goal <- goal_has_some_tag
                     ["Xi value","update output buffer"];
        if hard_goal then do {
           crunchGoal;
 	   arraySolve;
        } else evp_cipher_tactic;
      };

disable_what4_hash_consing;
