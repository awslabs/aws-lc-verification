/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


import "../../../cryptol-specs/Common/EC/EC_P384.cry";
import "../../../cryptol-specs/Common/utils.cry";


include "../ECDSA/goal-rewrites.saw";


/*
 * Verification parameters.
 */
let EVP_PKEY_OP_DERIVE = eval_int {{ (1 << 8) : [64] }};


// Disable debug intrinsics to avoid https://github.com/GaloisInc/crucible/issues/778
disable_debug_intrinsics;

m <- llvm_load_module "../../build/llvm/crypto/crypto_test.bc";


include "../common/helpers.saw";
include "../common/internal.saw";
include "../common/memory.saw";
include "../BN/BN.saw";
include "../EC/EC.saw";


let ptr_to_new_evp_pkey_ctx_st pkey_ptr = do {
  ptr <- crucible_alloc (llvm_struct "struct.evp_pkey_ctx_st");
  points_to_EVP_PKEY_ec_pkey_meth (crucible_global "EVP_PKEY_ec_pkey_meth_storage");
  ec_pkey_ctx_ptr <- crucible_alloc (llvm_struct "struct.EC_PKEY_CTX");
  crucible_points_to (crucible_field ec_pkey_ctx_ptr "md") crucible_null;
  crucible_points_to (crucible_field ec_pkey_ctx_ptr "gen_group") crucible_null;
  points_to_evp_pkey_ctx_st ptr (crucible_global "EVP_PKEY_ec_pkey_meth_storage") pkey_ptr crucible_null EVP_PKEY_OP_UNDEFINED ec_pkey_ctx_ptr;
  return ptr;
};


// Specifications of the various EVP functions
include "evp-function-specs.saw";


////////////////////////////////////////////////////////////////////////////////
// Proof commands
/*
ec_point_affine_scalar_mul is an undefined Cryptol function that is used as a variable.
The following theorem is an assumption about the behavior of this function. We assume 
that calling point_mul_generic and then converting the result to affine coordinates
is equivalence to converting to affine and then calling ec_point_affine_scalar_mul.
*/
jacobian_affine_mul_thm <- prove_print
  (do {
    assume_unsat;
  })
  (rewrite (cryptol_ss ()) {{ 
  \p s -> ec_point_affine_scalar_mul (scalarFromBV s) (fromJacobian (jacobianFromMontBV p)) == 
      fromJacobian (jacobianFromMontBV (point_mul_generic p s))
  }});

jacobian_affine_mul_base_thm <- prove_print
  (do {
    assume_unsat;
  })
  (rewrite (cryptol_ss ()) {{
  \s -> ec_point_affine_scalar_mul s G == fromJacobian (jacobianFromMontBV (point_mul_base_generic (scalarToBV s)))
  }});

llvm_verify m "EVP_PKEY_CTX_new_id"
  [ AWSLC_fips_evp_pkey_methods_ov
  , OPENSSL_malloc_ov
  ]
  true
  EVP_PKEY_CTX_new_id_spec
  (w4_unint_z3 []);
llvm_verify m "EVP_PKEY_CTX_new"
  [ AWSLC_fips_evp_pkey_methods_ov
  , OPENSSL_malloc_ov
  , CRYPTO_refcount_inc_ov
  ]
  true
  EVP_PKEY_CTX_new_spec
  (w4_unint_z3 []);


llvm_verify m "EVP_PKEY_paramgen_init"
  []
  true
  (EVP_PKEY_operation_init_spec EVP_PKEY_OP_PARAMGEN)
  (w4_unint_z3 []);

llvm_verify m "EVP_PKEY_CTX_set_ec_paramgen_curve_nid"
  [ EC_GROUP_new_by_curve_name_ov
  ]
  true
  EVP_PKEY_CTX_set_ec_paramgen_curve_nid_spec
  (w4_unint_z3 []);

llvm_verify m "EVP_PKEY_paramgen"
  [ OPENSSL_malloc_ov
  ]
  true
  EVP_PKEY_paramgen_spec
  (w4_unint_z3 []);


llvm_verify m "EVP_PKEY_keygen_init"
  []
  true
  (EVP_PKEY_operation_init_spec EVP_PKEY_OP_KEYGEN)
  (w4_unint_z3 []);

llvm_verify m "EVP_PKEY_keygen"
  [ OPENSSL_malloc_ov
  , bn_rand_range_words_ov
  , ec_point_mul_scalar_base_ov
  , ec_GFp_simple_is_on_curve_ov
  ]
  true
  EVP_PKEY_keygen_spec
  (do {
    unfolding ["EC_keyPrivateToPublic"];
    simplify (cryptol_ss ());
    simplify (addsimp jacobian_affine_mul_base_thm empty_ss);
    simplify (addsimp scalarBV_thm empty_ss);
    goal_eval_unint ["point_mul_base_generic", "fromJacobian", "jacobianFromMontBV"];
    w4_unint_z3 ["point_mul_base_generic", "fromJacobian", "jacobianFromMontBV"];
  });

llvm_verify m "EVP_PKEY_derive_init"
  []
  true
  (EVP_PKEY_operation_init_spec EVP_PKEY_OP_DERIVE)
  (w4_unint_z3 []);

llvm_verify m "EVP_PKEY_derive_set_peer"
  [ CRYPTO_refcount_inc_ov
  ]
  true
  EVP_PKEY_derive_set_peer_spec
  (w4_unint_z3 []);

llvm_verify m "EVP_PKEY_derive"
  [ ec_point_mul_scalar_ov
  , ec_get_x_coordinate_as_bytes_ov
  , OPENSSL_malloc_ov
  , EC_KEY_check_fips_ov
  , EC_KEY_free_ov
  , OPENSSL_cleanse_ov
  ]
  true
  EVP_PKEY_derive_spec
  (do {
    unfolding ["ECDH_derive"];
    simplify (cryptol_ss ());
    simplify (addsimp jacobian_affine_mul_thm empty_ss);
    goal_eval_unint ["point_mul_generic", "fromJacobian", "EC_KEY_check_fips", "jacobianFromMontBV", "scalarFromBV"];
    w4_unint_z3 ["point_mul_generic", "fromJacobian", "EC_KEY_check_fips", "jacobianFromMontBV", "scalarFromBV"];
  });

