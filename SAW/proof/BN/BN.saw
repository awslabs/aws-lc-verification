/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


let bn_add_words_spec n = do {
  let num_bits = eval_size {| n * 64 |};
  rp <- crucible_alloc (llvm_int num_bits);
  (a, ap) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (b, bp) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [rp, ap, bp, (crucible_term {{ `n : [64] }})];
  crucible_points_to rp (crucible_term {{ integerToBV`{num_bits} (if (integerFromBV a) + (integerFromBV b) >= 2 ^^ `num_bits then (integerFromBV a) + (integerFromBV b) - 2 ^^ `num_bits else (integerFromBV a) + (integerFromBV b)) }});
  crucible_return (crucible_term {{ if (integerFromBV a) + (integerFromBV b) >= 2 ^^ `num_bits then 1 : [64] else 0 }});
};
let bn_add_words_same_res_left_spec n = do {
  let num_bits = eval_size {| n * 64 |};
  (a, ap) <- ptr_to_fresh "a" (llvm_int num_bits);
  (b, bp) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [ap, ap, bp, (crucible_term {{ `n : [64] }})];
  crucible_points_to ap (crucible_term {{ integerToBV`{num_bits} (if (integerFromBV a) + (integerFromBV b) >= 2 ^^ `num_bits then (integerFromBV a) + (integerFromBV b) - 2 ^^ `num_bits else (integerFromBV a) + (integerFromBV b)) }});
  crucible_return (crucible_term {{ if (integerFromBV a) + (integerFromBV b) >= 2 ^^ `num_bits then 1 : [64] else 0 }});
};

let bn_sub_words_spec n = do {
  let num_bits = eval_size {| n * 64 |};
  rp <- crucible_alloc (llvm_int num_bits);
  (a, ap) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (b, bp) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [rp, ap, bp, (crucible_term {{ `n : [64] }})];
  crucible_points_to rp (crucible_term {{ integerToBV`{num_bits} (if (integerFromBV a) < (integerFromBV b) then (integerFromBV a) - (integerFromBV b) + 2 ^^ `num_bits else (integerFromBV a) - (integerFromBV b)) }});
  crucible_return (crucible_term {{ if (integerFromBV a) < (integerFromBV b) then 1 : [64] else 0 }});
};

let bn_mul_mont_spec_h num N r_ptr a_ptr b_ptr a b = do {
  let num_bits = eval_size {| num * 64 |};
  n_ptr <- crucible_alloc_readonly (llvm_int num_bits);
  crucible_points_to n_ptr (crucible_term {{ integerToBV`{num_bits} `N }});
  n0_ptr <- crucible_alloc_readonly i64;
  let n0 = eval_int {{ bn_mont_n0`{N} }};
  crucible_points_to n0_ptr (crucible_term {{ `n0 : [64] }});

  crucible_execute_func [r_ptr, a_ptr, b_ptr, n_ptr, n0_ptr, (crucible_term {{ `num : [64] }})];

  let R_inv = eval_int {{ fromInteger`{[width N]} mont_R_inv`{N} }};
  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} (((integerFromBV a) * (integerFromBV b) * `R_inv) % `N) }});
  crucible_return (crucible_term {{ 1 : [32] }});

};

let bn_mul_mont_spec num N = do {
  let num_bits = eval_size {| num * 64 |};
  r_ptr <- crucible_alloc (llvm_int num_bits);
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);

  bn_mul_mont_spec_h num N r_ptr a_ptr b_ptr a b;
};

let bn_mul_mont_same_res_left_spec num N = do {
  let num_bits = eval_size {| num * 64 |};
  (a, a_ptr) <- ptr_to_fresh "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);

  bn_mul_mont_spec_h num N a_ptr a_ptr b_ptr a b;
};
let bn_mul_mont_same_res_right_spec num N = do {
  let num_bits = eval_size {| num * 64 |};
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh "b" (llvm_int num_bits);

  bn_mul_mont_spec_h num N b_ptr a_ptr b_ptr a b;
};

let bn_reduce_once_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  r_ptr <- crucible_alloc (llvm_int num_bits);
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (m, m_ptr) <- ptr_to_fresh_readonly "m" (llvm_int num_bits);
  crucible_precond {{ 0 <= (integerFromBV a) }};
  crucible_precond {{ 0 <= (integerFromBV m) }};
  crucible_precond {{ (integerFromBV a) < 2 * (integerFromBV m) }};
  crucible_execute_func [r_ptr, a_ptr, (crucible_term {{ 0 : [64] }}), m_ptr, (crucible_term {{ `num : [64] }})];
  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} ((integerFromBV a) % (integerFromBV m)) }});
  crucible_return (crucible_term {{ if (integerFromBV a) < (integerFromBV m) then ~0 : [64] else 0 }});
};
let bn_reduce_once_in_place_spec carry num = do {
  let num_bits = eval_size {| num * 64 |};
  (r, r_ptr) <- ptr_to_fresh "r" (llvm_int num_bits);
  (m, m_ptr) <- ptr_to_fresh_readonly "m" (llvm_int num_bits);
  tmp_ptr <- crucible_alloc (llvm_int num_bits);
  let (carry_i64, r_integer) = if carry then ({{ 1 : [64] }}, {{ 2 ^^ `num_bits + (integerFromBV r) }}) else ({{ 0 : [64] }}, {{ integerFromBV r }});
  crucible_precond {{ 0 <= (integerFromBV r) /\ (integerFromBV r) < 2 ^^ `num_bits }};
  crucible_precond {{ 0 < (integerFromBV m) /\ (integerFromBV m) < 2 ^^ `num_bits }};
  crucible_precond {{ r_integer < 2 * (integerFromBV m) }};
  crucible_execute_func [r_ptr, (crucible_term carry_i64), m_ptr, tmp_ptr, (crucible_term {{ `num : [64] }})];
  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} (r_integer % (integerFromBV m)) }});
  crucible_return (crucible_term {{ if r_integer < (integerFromBV m) then ~0 : [64] else 0 }});
};

let bn_select_words_true_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  r_ptr <- crucible_alloc (llvm_int num_bits);
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (_b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [r_ptr, (crucible_term {{ ~0 : [64] }}), a_ptr, b_ptr, (crucible_term {{ `num : [64] }})];
  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} (integerFromBV a) }});
};
let bn_select_words_same_res_left_true_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  (a, a_ptr) <- ptr_to_fresh "a" (llvm_int num_bits);
  (_b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [a_ptr, (crucible_term {{ ~0 : [64] }}), a_ptr, b_ptr, (crucible_term {{ `num : [64] }})];
  crucible_points_to a_ptr (crucible_term {{ integerToBV`{num_bits} (integerFromBV a) }});
};
let bn_select_words_false_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  r_ptr <- crucible_alloc (llvm_int num_bits);
  (_a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [r_ptr, (crucible_term {{ 0 : [64] }}), a_ptr, b_ptr, (crucible_term {{ `num : [64] }})];
  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} (integerFromBV b) }});
};
let bn_select_words_same_res_left_false_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  (_a, a_ptr) <- ptr_to_fresh "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  crucible_execute_func [a_ptr, (crucible_term {{ 0 : [64] }}), a_ptr, b_ptr, (crucible_term {{ `num : [64] }})];
  crucible_points_to a_ptr (crucible_term {{ integerToBV`{num_bits} (integerFromBV b) }});
};


let BN_FLG_MALLOCED =  {{ 1 : [32] }};
let BN_FLG_STATIC_DATA = {{ 2 : [32] }};

let points_to_bignum_st ptr d_ptr width dmax flags = do {
  crucible_points_to (crucible_field ptr "d") d_ptr;
  crucible_points_to (crucible_field ptr "width") (crucible_term {{ `width : [32] }});
  crucible_points_to (crucible_field ptr "dmax") (crucible_term {{ `dmax : [32] }});
  crucible_points_to (crucible_field ptr "neg") (crucible_term {{ 0 : [32] }});
  crucible_points_to (crucible_field ptr "flags") (crucible_term flags);
};

let points_to_bignum_st_same ptr d_ptr dmax = do {
  flag <- crucible_fresh_var "flag" i32;
  points_to_bignum_st ptr d_ptr dmax dmax flag;
};


let pointer_to_bn_mont_ctx_st num N = do {
  let num_bits = eval_size {| num * 64 |};
  let RR_bn_dmax = eval_size {| 2 * num + 1 |};
  let R = {{ 2 ^^ `num_bits }};

  ptr <- crucible_alloc_readonly (llvm_struct "struct.bn_mont_ctx_st");

  RR_d_ptr <- crucible_alloc_readonly (llvm_int num_bits);
  crucible_points_to RR_d_ptr (crucible_term {{ (fromInteger ((R * R) % `N)) : [num_bits] }});
  points_to_bignum_st (crucible_field ptr "RR") RR_d_ptr num RR_bn_dmax {{ 0 : [32] }};

  let n0 = eval_int {{ bn_mont_n0`{N} }};
  crucible_points_to_untyped (crucible_field ptr "n0") (crucible_term {{ `n0 : [64] }});

  N_d_ptr <- crucible_alloc_readonly (llvm_int num_bits);
  crucible_points_to N_d_ptr (crucible_term {{ (fromInteger `N) : [num_bits] }});
  points_to_bignum_st (crucible_field ptr "N") N_d_ptr num num {{ 0 : [32] }};

  return ptr;
};

let {{
bn_mont_n0_with_N : {a} (fin a) => [a][64] -> [64]
bn_mont_n0_with_N n = undefined

mont_R_inv_with_N : {a} (fin a) => [a] -> [a]
mont_R_inv_with_N n = undefined
}};

let pointer_to_bn_mont_ctx_st_with_N_d num N_d_ptr N_d = do {
  let num_bits = eval_size {| num * 64 |};
  let RR_bn_dmax = eval_size {| 2 * num + 1 |};
  let R = {{ 2 ^^ `num_bits }};

  ptr <- crucible_alloc_readonly (llvm_struct "struct.bn_mont_ctx_st");

  RR_d_ptr <- crucible_alloc_readonly (llvm_int num_bits);
  points_to_bignum_st (crucible_field ptr "RR") RR_d_ptr num RR_bn_dmax {{ 0 : [32] }};
  crucible_points_to RR_d_ptr (crucible_term {{ integerToBV`{num_bits} ((R * R) % (integerModulusFromBV N_d)) }});

  n0 <- crucible_fresh_var "n0" i64;
  crucible_points_to_untyped (crucible_field ptr "n0") (crucible_term n0);
  crucible_precond {{ n0 == bn_mont_n0_with_N (split`{num} N_d) }};

  points_to_bignum_st_same (crucible_field ptr "N") N_d_ptr num;

  return ptr;
};

let pointer_to_bignum_ctx = do {
  // Technically the bignum_ctx ptr is not a const input.  However, it is
  // pretty much just a stack of bignums to use as temp values, and the
  // callee pops off values that it pushes to the stack, so from an abstract
  // perspective, the stack is unchanged.  In reality though, it's possible
  // for the callee to push enough to realloc the stack (though I'm not sure
  // whether this happens), and more importantly, popping the stack does not
  // zero it, so the memory itself will be different for values beyond the
  // tip of the stack.
  crucible_alloc_readonly (llvm_struct "struct.bignum_ctx");
};

let BN_value_one_spec = do {
  crucible_execute_func [];
  ret_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");
  ret_d_ptr <- crucible_alloc (llvm_array 1 i64);
  crucible_points_to ret_d_ptr (crucible_term {{ [1 : [64]] }});
  points_to_bignum_st ret_ptr ret_d_ptr 1 1 BN_FLG_STATIC_DATA;
  crucible_return ret_ptr;
};

let bn_uadd_consttime_spec a_num b_num = do {
  let a_num_bits = eval_size {| a_num * 64 |};
  let b_num_bits = eval_size {| b_num * 64 |};
  let r_num = eval_int {{ (if (`a_num : [64]) >= `b_num then (`a_num : [64]) else `b_num) + 1 }};
  let r_num_bits = eval_size {| r_num * 64 |};

  a_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int a_num_bits);
  points_to_bignum_st_same a_ptr a_d_ptr a_num;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int b_num_bits);
  points_to_bignum_st_same b_ptr b_d_ptr b_num;

  crucible_execute_func [a_ptr, a_ptr, b_ptr];

  r_d_ptr <- crucible_alloc (llvm_int r_num_bits);
  crucible_points_to r_d_ptr (crucible_term {{ integerToBV`{r_num_bits} ((integerFromBV a_d) + (integerFromBV b_d)) }});
  points_to_bignum_st_same a_ptr r_d_ptr r_num;

  crucible_return (crucible_term {{ 1 : [32] }});
};

let bn_mul_consttime_spec a_num b_num = do {
  let a_num_bits = eval_size {| a_num * 64 |};
  let b_num_bits = eval_size {| b_num * 64 |};
  let r_num = eval_size {| a_num + b_num |};
  let r_num_bits = eval_size {| r_num * 64 |};

  a_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int a_num_bits);
  points_to_bignum_st_same a_ptr a_d_ptr a_num;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int b_num_bits);
  points_to_bignum_st_same b_ptr b_d_ptr b_num;

  ctx_ptr <- pointer_to_bignum_ctx;

  crucible_execute_func [a_ptr, a_ptr, b_ptr, ctx_ptr];

  r_d_ptr <- crucible_alloc (llvm_int r_num_bits);
  crucible_points_to r_d_ptr (crucible_term {{ integerToBV`{r_num_bits} ((integerFromBV a_d) * (integerFromBV b_d)) }});
  points_to_bignum_st_same a_ptr r_d_ptr r_num;

  crucible_return (crucible_term {{ 1 : [32] }});
};

let bn_mod_sub_consttime_spec num = do {
  let num_bits = eval_size {| num * 64 |};

  a_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int num_bits);
  points_to_bignum_st_same a_ptr a_d_ptr num;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int num_bits);
  points_to_bignum_st_same b_ptr b_d_ptr num;

  m_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (m_d, m_d_ptr) <- ptr_to_fresh_readonly "m_d" (llvm_int num_bits);
  points_to_bignum_st_same m_ptr m_d_ptr num;

  ctx_ptr <- pointer_to_bignum_ctx;

  crucible_execute_func [a_ptr, a_ptr, b_ptr, m_ptr, ctx_ptr];

  r_d_ptr <- crucible_alloc (llvm_int num_bits);
  crucible_points_to r_d_ptr (crucible_term {{ integerToBV`{num_bits} (((integerFromBV a_d) - (integerFromBV b_d)) % (integerModulusFromBV m_d)) }});
  points_to_bignum_st_same a_ptr r_d_ptr num;

  crucible_return (crucible_term {{ 1 : [32] }});
};

let BN_div_spec numerator_width divisor_width = do {
  numerator_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");
  (numerator, numerator_d_ptr) <- ptr_to_fresh "numerator" (llvm_array numerator_width i64);
  points_to_bignum_st numerator_ptr numerator_d_ptr numerator_width numerator_width {{ 0 : [32] }};
  divisor_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (divisor, divisor_d_ptr) <- ptr_to_fresh_readonly "divisor" (llvm_array divisor_width i64);
  points_to_bignum_st divisor_ptr divisor_d_ptr divisor_width divisor_width {{ 0 : [32] }};
  ctx_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_ctx");
  crucible_execute_func
    [ crucible_null // quotient_ptr
    , numerator_ptr // rem_ptr
    , numerator_ptr
    , divisor_ptr
    , ctx_ptr
    ];

  crucible_points_to_untyped numerator_d_ptr (crucible_term {{ take`{divisor_width} (reverse (split`{each=64} ((join (reverse numerator)) % (0 # (join (reverse divisor)))))) }});
  points_to_bignum_st numerator_ptr numerator_d_ptr divisor_width numerator_width {{ 0 : [32] }};
  crucible_return (crucible_term {{ 1 : [32] }});
};

let BN_bin2bn_spec num = do {
  let bytes = eval_int {{ (`num * 8) : [64] }};
  let num_bits = eval_size {| num * 64 |};

  (in_d, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array bytes i8);

  out_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");
  points_to_bignum_st out_ptr crucible_null 0 0 BN_FLG_MALLOCED;

  crucible_execute_func [in_ptr, crucible_term {{ `bytes : [64] }}, out_ptr];

  out_d_ptr <- crucible_alloc (llvm_int num_bits);
  crucible_points_to out_d_ptr (crucible_term {{ join in_d }});
  points_to_bignum_st out_ptr out_d_ptr num num BN_FLG_MALLOCED;

  crucible_return out_ptr;
};

let BN_bn2bin_padded_spec num num_extra = do {
  let bytes = eval_int {{ (`num * 8) : [64] }};
  let num_bits = eval_size {| num * 64 |};
  out_ptr <- crucible_alloc (llvm_array bytes i8);

  in_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (in_d, in_d_ptr) <- ptr_to_fresh_readonly "in_d" (llvm_int num_bits);
  flag <- crucible_fresh_var "flag" i32;
  points_to_bignum_st in_ptr in_d_ptr num (eval_size {| num + num_extra |}) flag;

  crucible_execute_func [out_ptr, crucible_term {{ `bytes : [64] }}, in_ptr];

  crucible_points_to out_ptr (crucible_term {{ split`{each=8} in_d }});
  crucible_return (crucible_term {{ 1 : [32] }});
};

let bn_from_montgomery_in_place_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  let a_num = eval_size {| 2 * num |};
  let a_num_bits = eval_size {| a_num * 64 |};

  r_ptr <- crucible_alloc (llvm_int num_bits);
  (a, a_ptr) <- ptr_to_fresh "a" (llvm_int a_num_bits);

  (N_d, N_d_ptr) <- ptr_to_fresh_readonly "N_d" (llvm_int num_bits);
  mont_ptr <- pointer_to_bn_mont_ctx_st_with_N_d num N_d_ptr N_d;

  crucible_execute_func [r_ptr, (crucible_term {{ `num : [64] }}), a_ptr, (crucible_term {{ `a_num : [64] }}), mont_ptr];

  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} (((integerFromBV a) * (integerFromBV (mont_R_inv_with_N N_d))) % (integerModulusFromBV N_d)) }});

  crucible_return (crucible_term {{ 1 : [32] }});
};

let bn_mul_mont_with_N_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  r_ptr <- crucible_alloc (llvm_int num_bits);
  (a, a_ptr) <- ptr_to_fresh_readonly "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  (n, n_ptr) <- ptr_to_fresh_readonly "n" (llvm_int num_bits);
  (n0, n0_ptr) <- ptr_to_fresh_readonly "n0" i64;
  crucible_precond {{ n0 == bn_mont_n0_with_N (split n) }};

  crucible_execute_func [r_ptr, a_ptr, b_ptr, n_ptr, n0_ptr, (crucible_term {{ `num : [64] }})];

  crucible_points_to r_ptr (crucible_term {{ integerToBV`{num_bits} (((integerFromBV a) * (integerFromBV b) * (integerFromBV (mont_R_inv_with_N n))) % (integerModulusFromBV n)) }});
  crucible_return (crucible_term {{ 1 : [32] }});
};
let bn_mul_mont_with_N_same_res_left_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  (a, a_ptr) <- ptr_to_fresh "a" (llvm_int num_bits);
  (b, b_ptr) <- ptr_to_fresh_readonly "b" (llvm_int num_bits);
  (n, n_ptr) <- ptr_to_fresh_readonly "n" (llvm_int num_bits);
  (n0, n0_ptr) <- ptr_to_fresh_readonly "n0" i64;
  crucible_precond {{ n0 == bn_mont_n0_with_N (split n) }};

  crucible_execute_func [a_ptr, a_ptr, b_ptr, n_ptr, n0_ptr, (crucible_term {{ `num : [64] }})];

  crucible_points_to a_ptr (crucible_term {{ integerToBV`{num_bits} (((integerFromBV a) * (integerFromBV b) * (integerFromBV (mont_R_inv_with_N n))) % (integerModulusFromBV n)) }});
  crucible_return (crucible_term {{ 1 : [32] }});
};
let bn_mul_mont_with_N_same_res_left_right_spec num = do {
  let num_bits = eval_size {| num * 64 |};
  (a, a_ptr) <- ptr_to_fresh "a" (llvm_int num_bits);
  (n, n_ptr) <- ptr_to_fresh_readonly "n" (llvm_int num_bits);
  (n0, n0_ptr) <- ptr_to_fresh_readonly "n0" i64;
  crucible_precond {{ n0 == bn_mont_n0_with_N (split n) }};

  crucible_execute_func [a_ptr, a_ptr, a_ptr, n_ptr, n0_ptr, (crucible_term {{ `num : [64] }})];

  crucible_points_to a_ptr (crucible_term {{ integerToBV`{num_bits} (((integerFromBV a) * (integerFromBV a) * (integerFromBV (mont_R_inv_with_N n))) % (integerModulusFromBV n)) }});
  crucible_return (crucible_term {{ 1 : [32] }});
};

let BN_mod_exp_mont_spec num p_num num_extra = do {
  let num_bits = eval_size {| num * 64 |};
  let p_num_bits = eval_size {| p_num * 64 |};
  r_ptr <- crucible_alloc (llvm_struct "struct.bignum_st");

  a_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int num_bits);
  flag <- crucible_fresh_var "flag" i32;
  points_to_bignum_st a_ptr a_d_ptr num (eval_size {| num + num_extra |}) flag;

  p_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (p_d, p_d_ptr) <- ptr_to_fresh_readonly "p_d" (llvm_int p_num_bits);
  points_to_bignum_st_same p_ptr p_d_ptr p_num;

  m_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (m_d, m_d_ptr) <- ptr_to_fresh_readonly "m_d" (llvm_int num_bits);
  points_to_bignum_st_same m_ptr m_d_ptr num;

  ctx_ptr <- pointer_to_bignum_ctx;

  (N_d, N_d_ptr) <- ptr_to_fresh_readonly "N_d" (llvm_int num_bits);
  mont_ptr <- pointer_to_bn_mont_ctx_st_with_N_d num N_d_ptr N_d;

  crucible_execute_func [r_ptr, a_ptr, p_ptr, m_ptr, ctx_ptr, mont_ptr];

  r_d_ptr <- crucible_alloc (llvm_int num_bits);
  crucible_points_to r_d_ptr (crucible_term {{ integerToBV`{num_bits} ((exp (integerFromBV a_d) (integerFromBV p_d)) % (integerModulusFromBV m_d)) }});
  points_to_bignum_st_same r_ptr r_d_ptr num;

  crucible_return (crucible_term {{ 1 : [32] }});
};

let BN_equal_consttime_spec num = do {
  let num_bits = eval_size {| num * 64 |};

  a_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int num_bits);
  points_to_bignum_st_same a_ptr a_d_ptr num;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int num_bits);
  points_to_bignum_st_same b_ptr b_d_ptr num;

  crucible_execute_func [a_ptr, b_ptr];

  crucible_return (crucible_term {{ if integerFromBV a_d == integerFromBV b_d then (1 : [32]) else 0 }});
};

let BN_ucmp_spec num = do {
  let num_bits = eval_size {| num * 64 |};

  a_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int num_bits);
  points_to_bignum_st_same a_ptr a_d_ptr num;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int num_bits);
  points_to_bignum_st_same b_ptr b_d_ptr num;

  crucible_execute_func [a_ptr, b_ptr];

  crucible_return (crucible_term {{ if (integerFromBV a_d) < (integerFromBV b_d) then (~0 : [32]) else if (integerFromBV a_d) == (integerFromBV b_d) then 0 else 1 }});
};
let BN_ucmp_lt_spec num = do {
  let num_bits = eval_size {| num * 64 |};

  a_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int num_bits);
  points_to_bignum_st_same a_ptr a_d_ptr num;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int num_bits);
  points_to_bignum_st_same b_ptr b_d_ptr num;

  crucible_precond {{ (integerFromBV a_d) < (integerFromBV b_d) }};

  crucible_execute_func [a_ptr, b_ptr];

  crucible_return (crucible_term {{ ~0 : [32] }});
};
let BN_ucmp_gt_spec num_a num_b = do {
  let num_bits_a = eval_size {| num_a * 64 |};
  let num_bits_b = eval_size {| num_b * 64 |};

  a_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (a_d, a_d_ptr) <- ptr_to_fresh_readonly "a_d" (llvm_int num_bits_a);
  points_to_bignum_st_same a_ptr a_d_ptr num_a;

  b_ptr <- crucible_alloc_readonly (llvm_struct "struct.bignum_st");
  (b_d, b_d_ptr) <- ptr_to_fresh_readonly "b_d" (llvm_int num_bits_b);
  points_to_bignum_st_same b_ptr b_d_ptr num_b;

  crucible_precond {{ (integerFromBV a_d) > (integerFromBV b_d) }};

  crucible_execute_func [a_ptr, b_ptr];

  crucible_return (crucible_term {{ 1 : [32] }});
};


BN_value_one_ov <- crucible_llvm_unsafe_assume_spec
  m
  "BN_value_one"
  BN_value_one_spec;

