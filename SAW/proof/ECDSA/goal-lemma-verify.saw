/*
* Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
* SPDX-License-Identifier: Apache-2.0
*/

enable_experimental;

let eqTrue x = term_apply (parse_core "EqTrue") [x];

EVP_DigestVerify_statement <-
do {
  block1 <- fresh_symbolic "block1" {| ByteArray |};
  block2 <- fresh_symbolic "block2" {| ByteArray |};
  block3 <- fresh_symbolic "block3" {| ByteArray |};
  h <- fresh_symbolic "h" {| [8][64] |};
  n <- fresh_symbolic "n" {| [32] |};
  sz <- fresh_symbolic "sz" {| [128] |};
  data <- fresh_symbolic "data" {| ByteArray |};
  data_len <- fresh_symbolic "data_len" {| [64] |};
  pub_key <- fresh_symbolic "pub_key" {| JacobianBVPoint |};
  r <- fresh_symbolic "r" {| [48][8] |};
  s <- fresh_symbolic "s" {| [48][8] |};

  let allvars = [block1, block2, block3, h, n, sz, data, data_len, pub_key, r, s];

  let update_spec =
    {{ ECDSA_SignVerify_Update {block = block1, h = h, n = n, sz = sz} data data_len }};
  let update_impl =
    {{ ECDSA_SignVerify_Update {block = block2, h = h, n = n, sz = sz} data data_len }};

  let spec_state = {{ {block = update_spec.block, h = update_spec.h, n = update_spec.n, sz = update_spec.sz} }};
  let final_spec = {{ ECDSA_Verify_Final pub_key spec_state r s }};
  let impl_state = {{ {block = block3, h = update_impl.h, n = update_impl.n, sz = update_impl.sz} }};
  let final_impl = {{ ECDSA_Verify_Final pub_key impl_state r s }};

  let lemma = eqTrue {{ final_impl == final_spec }};

  let concl = eqTrue {{ (if final_impl then (1 : [32]) else 0) == (if final_spec then 1 else 0) }};

  let goal = (implies_term lemma concl);

  return (generalize_term allvars
           (rewrite (cryptol_ss ())
             (unfold_term ["ecEq"] goal)));
};

EVP_DigestVerify_thm <-
prove_extcore
do { goal_eval_unint ["ECDSA_Verify_Final", "ECDSA_SignVerify_Update", "join", "is_num_bits_bn"];
     w4_unint_z3 ["ECDSA_Verify_Final", "ECDSA_SignVerify_Update", "join", "is_num_bits_bn"];
     }
EVP_DigestVerify_statement;

EVP_DigestVerify_equal_statement <-
do {
  block1 <- fresh_symbolic "block1" {| ByteArray |};
  block2 <- fresh_symbolic "block2" {| ByteArray |};
  block3 <- fresh_symbolic "block3" {| ByteArray |};
  h <- fresh_symbolic "h" {| [8][64] |};
  n <- fresh_symbolic "n" {| [32] |};
  sz <- fresh_symbolic "sz" {| [128] |};
  data <- fresh_symbolic "data" {| ByteArray |};
  data_len <- fresh_symbolic "data_len" {| [64] |};
  pub_key <- fresh_symbolic "pub_key" {| JacobianBVPoint |};
  r <- fresh_symbolic "r" {| [48][8] |};
  s <- fresh_symbolic "s" {| [48][8] |};

  let allvars = [block1, block2, block3, h, n, sz, data, data_len, pub_key, r, s];

  let update_spec =
    {{ ECDSA_SignVerify_Update {block = block1, h = h, n = n, sz = sz} data data_len }};
  let update_impl =
    {{ ECDSA_SignVerify_Update {block = block2, h = h, n = n, sz = sz} data data_len }};

  let spec_state = {{ {block = update_spec.block, h = update_spec.h, n = update_spec.n, sz = update_spec.sz} }};
  let final_spec = {{ ECDSA_Verify_Final pub_key spec_state r s }};
  let impl_state = {{ {block = block3, h = update_impl.h, n = update_impl.n, sz = update_impl.sz} }};
  let final_impl = {{ ECDSA_Verify_Final pub_key impl_state r s }};

  let lemma = eqTrue {{ (arrayRangeEq block1 0 block2 0 128)
                     && (arrayRangeEq block3 0 update_impl.block 0 128) }};

  let concl = eqTrue {{ final_impl == final_spec }};

  let goal = (implies_term lemma concl);

  return (generalize_term allvars
           (rewrite (cryptol_ss ())
             (unfold_term ["ecEq"] goal)));
};

EVP_DigestVerify_equal_thm <-
prove_extcore
do { goal_eval_unint ["SHAUpdate_Array", "ECDSA_verify", "SHAFinal_Array", "fromJacobian"];
     block1 <- goal_intro "block1";
     block2 <- goal_intro "block2";
     block3 <- goal_intro "block3";
     h <- goal_intro "h";
     sz <- goal_intro "sz";
     n <- goal_intro "n";
     data <- goal_intro "data";
     data_len <- goal_intro "data_len";
     goal_insert_and_specialize SHAFinal_Array_of_SHAUpdate_Array_equivalence_thm [block1, block2, block3, h, sz, n, data, data_len];
     w4_unint_z3 ["SHAUpdate_Array", "ECDSA_verify", "SHAFinal_Array", "fromJacobian"];
     }
EVP_DigestVerify_equal_statement;
